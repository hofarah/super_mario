
super_mario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080054b4  080054b4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054b4  080054b4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080054bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  20000018  080054d4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  080054d4  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001638e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1f  00000000  00000000  000363d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  0003a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f6fe  00000000  00000000  0003b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011546  00000000  00000000  0005ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be1bc  00000000  00000000  0006c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e4  00000000  00000000  0012a5ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005434 	.word	0x08005434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005434 	.word	0x08005434

080001c8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08e      	sub	sp, #56	; 0x38
 80001cc:	af0a      	add	r7, sp, #40	; 0x28
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4603      	mov	r3, r0
 80001d8:	817b      	strh	r3, [r7, #10]
 80001da:	460b      	mov	r3, r1
 80001dc:	813b      	strh	r3, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <LiquidCrystal+0x90>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d019      	beq.n	800021e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001ea:	8939      	ldrh	r1, [r7, #8]
 80001ec:	897a      	ldrh	r2, [r7, #10]
 80001ee:	2300      	movs	r3, #0
 80001f0:	9308      	str	r3, [sp, #32]
 80001f2:	2300      	movs	r3, #0
 80001f4:	9307      	str	r3, [sp, #28]
 80001f6:	2300      	movs	r3, #0
 80001f8:	9306      	str	r3, [sp, #24]
 80001fa:	2300      	movs	r3, #0
 80001fc:	9305      	str	r3, [sp, #20]
 80001fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000200:	9304      	str	r3, [sp, #16]
 8000202:	8c3b      	ldrh	r3, [r7, #32]
 8000204:	9303      	str	r3, [sp, #12]
 8000206:	8bbb      	ldrh	r3, [r7, #28]
 8000208:	9302      	str	r3, [sp, #8]
 800020a:	8b3b      	ldrh	r3, [r7, #24]
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	460b      	mov	r3, r1
 8000214:	68f9      	ldr	r1, [r7, #12]
 8000216:	2001      	movs	r0, #1
 8000218:	f000 f820 	bl	800025c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800021c:	e018      	b.n	8000250 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800021e:	8939      	ldrh	r1, [r7, #8]
 8000220:	897a      	ldrh	r2, [r7, #10]
 8000222:	2300      	movs	r3, #0
 8000224:	9308      	str	r3, [sp, #32]
 8000226:	2300      	movs	r3, #0
 8000228:	9307      	str	r3, [sp, #28]
 800022a:	2300      	movs	r3, #0
 800022c:	9306      	str	r3, [sp, #24]
 800022e:	2300      	movs	r3, #0
 8000230:	9305      	str	r3, [sp, #20]
 8000232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000234:	9304      	str	r3, [sp, #16]
 8000236:	8c3b      	ldrh	r3, [r7, #32]
 8000238:	9303      	str	r3, [sp, #12]
 800023a:	8bbb      	ldrh	r3, [r7, #28]
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	460b      	mov	r3, r1
 8000248:	68f9      	ldr	r1, [r7, #12]
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f806 	bl	800025c <init>
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000000 	.word	0x20000000

0800025c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	60b9      	str	r1, [r7, #8]
 8000264:	4611      	mov	r1, r2
 8000266:	461a      	mov	r2, r3
 8000268:	4603      	mov	r3, r0
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	460b      	mov	r3, r1
 800026e:	81bb      	strh	r3, [r7, #12]
 8000270:	4613      	mov	r3, r2
 8000272:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000274:	4a1a      	ldr	r2, [pc, #104]	; (80002e0 <init+0x84>)
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800027a:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <init+0x88>)
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <init+0x8c>)
 8000282:	8b3b      	ldrh	r3, [r7, #24]
 8000284:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <init+0x90>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <init+0x94>)
 800028e:	8bbb      	ldrh	r3, [r7, #28]
 8000290:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <init+0x94>)
 8000294:	8c3b      	ldrh	r3, [r7, #32]
 8000296:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <init+0x94>)
 800029a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800029c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <init+0x94>)
 80002a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002a2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <init+0x94>)
 80002a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80002a8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <init+0x94>)
 80002ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002ae:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <init+0x94>)
 80002b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002b4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <init+0x94>)
 80002b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002ba:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <init+0x98>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]
 80002c8:	e002      	b.n	80002d0 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <init+0x98>)
 80002cc:	2210      	movs	r2, #16
 80002ce:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80002d0:	2102      	movs	r1, #2
 80002d2:	2010      	movs	r0, #16
 80002d4:	f000 f810 	bl	80002f8 <begin>
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000084 	.word	0x20000084
 80002e4:	20000064 	.word	0x20000064
 80002e8:	20000082 	.word	0x20000082
 80002ec:	20000068 	.word	0x20000068
 80002f0:	20000070 	.word	0x20000070
 80002f4:	20000081 	.word	0x20000081

080002f8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d906      	bls.n	800031c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800030e:	4b77      	ldr	r3, [pc, #476]	; (80004ec <begin+0x1f4>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b74      	ldr	r3, [pc, #464]	; (80004ec <begin+0x1f4>)
 800031a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800031c:	4a74      	ldr	r2, [pc, #464]	; (80004f0 <begin+0x1f8>)
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3340      	adds	r3, #64	; 0x40
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	2000      	movs	r0, #0
 800032c:	f000 f988 	bl	8000640 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000330:	4b70      	ldr	r3, [pc, #448]	; (80004f4 <begin+0x1fc>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <begin+0x54>
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d106      	bne.n	800034c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800033e:	4b6b      	ldr	r3, [pc, #428]	; (80004ec <begin+0x1f4>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b68      	ldr	r3, [pc, #416]	; (80004ec <begin+0x1f4>)
 800034a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800034c:	f000 f8e4 	bl	8000518 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000350:	2303      	movs	r3, #3
 8000352:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000358:	4b67      	ldr	r3, [pc, #412]	; (80004f8 <begin+0x200>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d01b      	beq.n	8000398 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000360:	4b66      	ldr	r3, [pc, #408]	; (80004fc <begin+0x204>)
 8000362:	881a      	ldrh	r2, [r3, #0]
 8000364:	4b66      	ldr	r3, [pc, #408]	; (8000500 <begin+0x208>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	4313      	orrs	r3, r2
 800036a:	b29a      	uxth	r2, r3
 800036c:	4b65      	ldr	r3, [pc, #404]	; (8000504 <begin+0x20c>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b64      	ldr	r3, [pc, #400]	; (8000508 <begin+0x210>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b62      	ldr	r3, [pc, #392]	; (8000508 <begin+0x210>)
 800037e:	885b      	ldrh	r3, [r3, #2]
 8000380:	4313      	orrs	r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b60      	ldr	r3, [pc, #384]	; (8000508 <begin+0x210>)
 8000386:	889b      	ldrh	r3, [r3, #4]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b5e      	ldr	r3, [pc, #376]	; (8000508 <begin+0x210>)
 800038e:	88db      	ldrh	r3, [r3, #6]
 8000390:	4313      	orrs	r3, r2
 8000392:	b29b      	uxth	r3, r3
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	e02a      	b.n	80003ee <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000398:	4b58      	ldr	r3, [pc, #352]	; (80004fc <begin+0x204>)
 800039a:	881a      	ldrh	r2, [r3, #0]
 800039c:	4b58      	ldr	r3, [pc, #352]	; (8000500 <begin+0x208>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b57      	ldr	r3, [pc, #348]	; (8000504 <begin+0x20c>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003ac:	4b56      	ldr	r3, [pc, #344]	; (8000508 <begin+0x210>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003b4:	4b54      	ldr	r3, [pc, #336]	; (8000508 <begin+0x210>)
 80003b6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003bc:	4b52      	ldr	r3, [pc, #328]	; (8000508 <begin+0x210>)
 80003be:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003c4:	4b50      	ldr	r3, [pc, #320]	; (8000508 <begin+0x210>)
 80003c6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <begin+0x210>)
 80003ce:	891b      	ldrh	r3, [r3, #8]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	4b4c      	ldr	r3, [pc, #304]	; (8000508 <begin+0x210>)
 80003d6:	895b      	ldrh	r3, [r3, #10]
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b4a      	ldr	r3, [pc, #296]	; (8000508 <begin+0x210>)
 80003de:	899b      	ldrh	r3, [r3, #12]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b48      	ldr	r3, [pc, #288]	; (8000508 <begin+0x210>)
 80003e6:	89db      	ldrh	r3, [r3, #14]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003ec:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80003ee:	4b47      	ldr	r3, [pc, #284]	; (800050c <begin+0x214>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f107 020c 	add.w	r2, r7, #12
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fc4f 	bl	8001c9c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f001 faa2 	bl	8001948 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000404:	4b41      	ldr	r3, [pc, #260]	; (800050c <begin+0x214>)
 8000406:	6818      	ldr	r0, [r3, #0]
 8000408:	4b3c      	ldr	r3, [pc, #240]	; (80004fc <begin+0x204>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	4619      	mov	r1, r3
 8000410:	f001 fdbe 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000414:	4b3d      	ldr	r3, [pc, #244]	; (800050c <begin+0x214>)
 8000416:	6818      	ldr	r0, [r3, #0]
 8000418:	4b3a      	ldr	r3, [pc, #232]	; (8000504 <begin+0x20c>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f001 fdb6 	bl	8001f90 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000424:	4b36      	ldr	r3, [pc, #216]	; (8000500 <begin+0x208>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2bff      	cmp	r3, #255	; 0xff
 800042a:	d007      	beq.n	800043c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <begin+0x214>)
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	4b33      	ldr	r3, [pc, #204]	; (8000500 <begin+0x208>)
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	2200      	movs	r2, #0
 8000436:	4619      	mov	r1, r3
 8000438:	f001 fdaa 	bl	8001f90 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <begin+0x1f4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	2b00      	cmp	r3, #0
 8000446:	d115      	bne.n	8000474 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000448:	2003      	movs	r0, #3
 800044a:	f000 fa19 	bl	8000880 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800044e:	2005      	movs	r0, #5
 8000450:	f001 fa7a 	bl	8001948 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000454:	2003      	movs	r0, #3
 8000456:	f000 fa13 	bl	8000880 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800045a:	2005      	movs	r0, #5
 800045c:	f001 fa74 	bl	8001948 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000460:	2003      	movs	r0, #3
 8000462:	f000 fa0d 	bl	8000880 <write4bits>
    HAL_Delay(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f001 fa6e 	bl	8001948 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 800046c:	2002      	movs	r0, #2
 800046e:	f000 fa07 	bl	8000880 <write4bits>
 8000472:	e01d      	b.n	80004b0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <begin+0x1f4>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f978 	bl	8000774 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000484:	2005      	movs	r0, #5
 8000486:	f001 fa5f 	bl	8001948 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <begin+0x1f4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f96d 	bl	8000774 <command>
    HAL_Delay(1);
 800049a:	2001      	movs	r0, #1
 800049c:	f001 fa54 	bl	8001948 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <begin+0x1f4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	f043 0320 	orr.w	r3, r3, #32
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f962 	bl	8000774 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <begin+0x1f4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f043 0320 	orr.w	r3, r3, #32
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f95a 	bl	8000774 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <begin+0x218>)
 80004c2:	2204      	movs	r2, #4
 80004c4:	701a      	strb	r2, [r3, #0]
  display();
 80004c6:	f000 f917 	bl	80006f8 <display>

  // clear it off
  clear();
 80004ca:	f000 f8d9 	bl	8000680 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <begin+0x21c>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <begin+0x21c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f948 	bl	8000774 <command>

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000081 	.word	0x20000081
 80004f0:	2000006d 	.word	0x2000006d
 80004f4:	20000034 	.word	0x20000034
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000084 	.word	0x20000084
 8000500:	20000064 	.word	0x20000064
 8000504:	20000082 	.word	0x20000082
 8000508:	20000070 	.word	0x20000070
 800050c:	20000068 	.word	0x20000068
 8000510:	2000006c 	.word	0x2000006c
 8000514:	20000080 	.word	0x20000080

08000518 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000518:	b480      	push	{r7}
 800051a:	b089      	sub	sp, #36	; 0x24
 800051c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800051e:	4b41      	ldr	r3, [pc, #260]	; (8000624 <enableClock+0x10c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000526:	d10c      	bne.n	8000542 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <enableClock+0x110>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <enableClock+0x110>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	6153      	str	r3, [r2, #20]
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <enableClock+0x110>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000540:	e06a      	b.n	8000618 <enableClock+0x100>
  else if(_port == GPIOB)
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <enableClock+0x10c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a39      	ldr	r2, [pc, #228]	; (800062c <enableClock+0x114>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d10c      	bne.n	8000566 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <enableClock+0x110>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a35      	ldr	r2, [pc, #212]	; (8000628 <enableClock+0x110>)
 8000552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000556:	6153      	str	r3, [r2, #20]
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <enableClock+0x110>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	69bb      	ldr	r3, [r7, #24]
}
 8000564:	e058      	b.n	8000618 <enableClock+0x100>
  else if(_port == GPIOB)
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <enableClock+0x10c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a30      	ldr	r2, [pc, #192]	; (800062c <enableClock+0x114>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d10c      	bne.n	800058a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <enableClock+0x110>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <enableClock+0x110>)
 8000576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057a:	6153      	str	r3, [r2, #20]
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <enableClock+0x110>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	e046      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOC)
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <enableClock+0x10c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a28      	ldr	r2, [pc, #160]	; (8000630 <enableClock+0x118>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d10c      	bne.n	80005ae <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <enableClock+0x110>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a23      	ldr	r2, [pc, #140]	; (8000628 <enableClock+0x110>)
 800059a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <enableClock+0x110>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	693b      	ldr	r3, [r7, #16]
}
 80005ac:	e034      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOD)
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <enableClock+0x10c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <enableClock+0x11c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d10c      	bne.n	80005d2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <enableClock+0x110>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <enableClock+0x110>)
 80005be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c2:	6153      	str	r3, [r2, #20]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <enableClock+0x110>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	e022      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOE)
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <enableClock+0x10c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <enableClock+0x120>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d10c      	bne.n	80005f6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <enableClock+0x110>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a11      	ldr	r2, [pc, #68]	; (8000628 <enableClock+0x110>)
 80005e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <enableClock+0x110>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
}
 80005f4:	e010      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOF)
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <enableClock+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <enableClock+0x124>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d10b      	bne.n	8000618 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <enableClock+0x110>)
 8000606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <enableClock+0x110>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	bf00      	nop
 800061a:	3724      	adds	r7, #36	; 0x24
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000068 	.word	0x20000068
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400
 8000630:	48000800 	.word	0x48000800
 8000634:	48000c00 	.word	0x48000c00
 8000638:	48001000 	.word	0x48001000
 800063c:	48001400 	.word	0x48001400

08000640 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <setRowOffsets+0x3c>)
 8000654:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <setRowOffsets+0x3c>)
 800065c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <setRowOffsets+0x3c>)
 8000664:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <setRowOffsets+0x3c>)
 800066c:	70da      	strb	r2, [r3, #3]
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000060 	.word	0x20000060

08000680 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000684:	2001      	movs	r0, #1
 8000686:	f000 f875 	bl	8000774 <command>
  HAL_Delay(2);  // this command takes a long time!
 800068a:	2002      	movs	r0, #2
 800068c:	f001 f95c 	bl	8001948 <HAL_Delay>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80006a4:	2304      	movs	r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d803      	bhi.n	80006b8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3b01      	subs	r3, #1
 80006b6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <setCursor+0x5c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	79ba      	ldrb	r2, [r7, #6]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d303      	bcc.n	80006ca <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <setCursor+0x5c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <setCursor+0x60>)
 80006ce:	5cd2      	ldrb	r2, [r2, r3]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4413      	add	r3, r2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f847 	bl	8000774 <command>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000006d 	.word	0x2000006d
 80006f4:	20000060 	.word	0x20000060

080006f8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <display+0x28>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <display+0x28>)
 8000708:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <display+0x28>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f82d 	bl	8000774 <command>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000006c 	.word	0x2000006c

08000724 <createChar>:
  return n;
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	b25b      	sxtb	r3, r3
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f814 	bl	8000774 <command>
  for (int i=0; i<8; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e009      	b.n	8000766 <createChar+0x42>
    write(charmap[i]);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f818 	bl	8000790 <write>
  for (int i=0; i<8; i++) {
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b07      	cmp	r3, #7
 800076a:	ddf2      	ble.n	8000752 <createChar+0x2e>
  }
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f814 	bl	80007b0 <send>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <write>:

inline size_t write(uint8_t value) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f806 	bl	80007b0 <send>
  return 1; // assume sucess
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <send+0x6c>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <send+0x70>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	4619      	mov	r1, r3
 80007cc:	f001 fbe0 	bl	8001f90 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <send+0x74>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2bff      	cmp	r3, #255	; 0xff
 80007d6:	d007      	beq.n	80007e8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <send+0x6c>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <send+0x74>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	f001 fbd4 	bl	8001f90 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <send+0x78>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f003 0310 	and.w	r3, r3, #16
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <send+0x4e>
    write8bits(value); 
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f86c 	bl	80008d4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80007fc:	e009      	b.n	8000812 <send+0x62>
    write4bits(value>>4);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f83b 	bl	8000880 <write4bits>
    write4bits(value);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f837 	bl	8000880 <write4bits>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000068 	.word	0x20000068
 8000820:	20000084 	.word	0x20000084
 8000824:	20000064 	.word	0x20000064
 8000828:	20000081 	.word	0x20000081

0800082c <pulseEnable>:

void pulseEnable(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <pulseEnable+0x4c>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <pulseEnable+0x50>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	f001 fba8 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000840:	2001      	movs	r0, #1
 8000842:	f001 f881 	bl	8001948 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <pulseEnable+0x4c>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <pulseEnable+0x50>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f001 fb9d 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000856:	2001      	movs	r0, #1
 8000858:	f001 f876 	bl	8001948 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <pulseEnable+0x4c>)
 800085e:	6818      	ldr	r0, [r3, #0]
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <pulseEnable+0x50>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	f001 fb92 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800086c:	2001      	movs	r0, #1
 800086e:	f001 f86b 	bl	8001948 <HAL_Delay>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000068 	.word	0x20000068
 800087c:	20000082 	.word	0x20000082

08000880 <write4bits>:

void write4bits(uint8_t value) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e013      	b.n	80008b8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <write4bits+0x4c>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <write4bits+0x50>)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	fa42 f303 	asr.w	r3, r2, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	f001 fb6f 	bl	8001f90 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	dde8      	ble.n	8000890 <write4bits+0x10>
  }

  pulseEnable();
 80008be:	f7ff ffb5 	bl	800082c <pulseEnable>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000068 	.word	0x20000068
 80008d0:	20000070 	.word	0x20000070

080008d4 <write8bits>:

void write8bits(uint8_t value) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e013      	b.n	800090c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <write8bits+0x4c>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <write8bits+0x50>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa42 f303 	asr.w	r3, r2, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	f001 fb45 	bl	8001f90 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b07      	cmp	r3, #7
 8000910:	dde8      	ble.n	80008e4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000912:	f7ff ff8b 	bl	800082c <pulseEnable>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000068 	.word	0x20000068
 8000924:	20000070 	.word	0x20000070

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b092      	sub	sp, #72	; 0x48
 800092c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 ffa5 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f89b 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 fa1d 	bl	8000d74 <MX_GPIO_Init>
  MX_I2C1_Init();
 800093a:	f000 f8fb 	bl	8000b34 <MX_I2C1_Init>
  MX_SPI1_Init();
 800093e:	f000 f939 	bl	8000bb4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000942:	f000 f9f5 	bl	8000d30 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000946:	f000 f9c3 	bl	8000cd0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800094a:	f000 f971 	bl	8000c30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LiquidCrystal(GPIOD,GPIO_PIN_8 ,GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 800094e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000952:	9303      	str	r3, [sp, #12]
 8000954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000972:	4834      	ldr	r0, [pc, #208]	; (8000a44 <main+0x11c>)
 8000974:	f7ff fc28 	bl	80001c8 <LiquidCrystal>
   begin(20,4);
 8000978:	2104      	movs	r1, #4
 800097a:	2014      	movs	r0, #20
 800097c:	f7ff fcbc 	bl	80002f8 <begin>
   clear();
 8000980:	f7ff fe7e 	bl	8000680 <clear>
   HAL_TIM_Base_Start_IT(&htim3);
 8000984:	4830      	ldr	r0, [pc, #192]	; (8000a48 <main+0x120>)
 8000986:	f003 f90f 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
   HAL_UART_Receive_IT(&huart2, data,sizeof(data));
 800098a:	2201      	movs	r2, #1
 800098c:	492f      	ldr	r1, [pc, #188]	; (8000a4c <main+0x124>)
 800098e:	4830      	ldr	r0, [pc, #192]	; (8000a50 <main+0x128>)
 8000990:	f003 fd94 	bl	80044bc <HAL_UART_Receive_IT>

   unsigned char mario[]={ 0x0F, 0x0E, 0x0E, 0x04, 0x1F, 0x04, 0x0E, 0x1B};
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <main+0x12c>)
 8000996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800099a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800099e:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char brick[] = { 0x1F, 0x15, 0x1F, 0x15, 0x1F, 0x15, 0x1F, 0x15 };
 80009a2:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <main+0x130>)
 80009a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ac:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char brickUp[] = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };
 80009b0:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <main+0x134>)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ba:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char brickQuestion[] = { 0x1F, 0x11, 0x17, 0x11, 0x1D, 0x1F, 0x1D, 0x1F };
 80009be:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <main+0x138>)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c8:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char flag[] = { 0x10, 0x1C, 0x1E, 0x1F, 0x1C, 0x10, 0x10, 0x10 };
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <main+0x13c>)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d6:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char mane[] =  { 0x1F, 0x1F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E };
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <main+0x140>)
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e4:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char zero[]={  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
   createChar(2, mario);
 80009f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f4:	4619      	mov	r1, r3
 80009f6:	2002      	movs	r0, #2
 80009f8:	f7ff fe94 	bl	8000724 <createChar>
   createChar(3, brick);
 80009fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a00:	4619      	mov	r1, r3
 8000a02:	2003      	movs	r0, #3
 8000a04:	f7ff fe8e 	bl	8000724 <createChar>
   createChar(4, brickUp);
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f7ff fe88 	bl	8000724 <createChar>
   createChar(5, brickQuestion);
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f7ff fe82 	bl	8000724 <createChar>
   createChar(6, flag);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	2006      	movs	r0, #6
 8000a28:	f7ff fe7c 	bl	8000724 <createChar>
   createChar(7, mane);
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	4619      	mov	r1, r3
 8000a32:	2007      	movs	r0, #7
 8000a34:	f7ff fe76 	bl	8000724 <createChar>
   createChar(0, zero);
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fe71 	bl	8000724 <createChar>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <main+0x11a>
 8000a44:	48000c00 	.word	0x48000c00
 8000a48:	200000d4 	.word	0x200000d4
 8000a4c:	20000120 	.word	0x20000120
 8000a50:	20000188 	.word	0x20000188
 8000a54:	0800544c 	.word	0x0800544c
 8000a58:	08005454 	.word	0x08005454
 8000a5c:	0800545c 	.word	0x0800545c
 8000a60:	08005464 	.word	0x08005464
 8000a64:	0800546c 	.word	0x0800546c
 8000a68:	08005474 	.word	0x08005474

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09e      	sub	sp, #120	; 0x78
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a76:	2228      	movs	r2, #40	; 0x28
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fcd2 	bl	8005424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	223c      	movs	r2, #60	; 0x3c
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fcc4 	bl	8005424 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000abc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ac0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fc7e 	bl	80023c8 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ad2:	f000 f9cf 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000af0:	2101      	movs	r1, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fb70 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000afe:	f000 f9b9 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <SystemClock_Config+0xc4>)
 8000b04:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fd94 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b22:	f000 f9a7 	bl	8000e74 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3778      	adds	r7, #120	; 0x78
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	00020022 	.word	0x00020022

08000b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <MX_I2C1_Init+0x78>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <MX_I2C1_Init+0x7c>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b70:	f001 fa26 	bl	8001fc0 <HAL_I2C_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f000 f97b 	bl	8000e74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b82:	f001 faac 	bl	80020de <HAL_I2CEx_ConfigAnalogFilter>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f972 	bl	8000e74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b94:	f001 faee 	bl	8002174 <HAL_I2CEx_ConfigDigitalFilter>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f969 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	2000090e 	.word	0x2000090e

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bba:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <MX_SPI1_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bce:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c0e:	2208      	movs	r2, #8
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c14:	f002 fec6 	bl	80039a4 <HAL_SPI_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 f929 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	40013000 	.word	0x40013000

08000c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c50:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <MX_TIM3_Init+0x9c>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c56:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c64:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c76:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c78:	f002 ff3f 	bl	8003afa <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000c82:	f000 f8f7 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c94:	f003 f911 	bl	8003eba <HAL_TIM_ConfigClockSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000c9e:	f000 f8e9 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000cb0:	f003 fb18 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000cba:	f000 f8db 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3720      	adds	r7, #32
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000d4 	.word	0x200000d4
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_USART2_UART_Init+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d14:	f003 fb84 	bl	8004420 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f000 f8a9 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000188 	.word	0x20000188
 8000d2c:	40004400 	.word	0x40004400

08000d30 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <MX_USB_PCD_Init+0x40>)
 8000d38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_USB_PCD_Init+0x3c>)
 8000d5a:	f001 fa57 	bl	800220c <HAL_PCD_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000d64:	f000 f886 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000020c 	.word	0x2000020c
 8000d70:	40005c00 	.word	0x40005c00

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_GPIO_Init+0xf4>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e02:	2200      	movs	r2, #0
 8000e04:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000e08:	4818      	ldr	r0, [pc, #96]	; (8000e6c <MX_GPIO_Init+0xf8>)
 8000e0a:	f001 f8c1 	bl	8001f90 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000e0e:	2337      	movs	r3, #55	; 0x37
 8000e10:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <MX_GPIO_Init+0xf8>)
 8000e22:	f000 ff3b 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e26:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000e2a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_GPIO_Init+0xf8>)
 8000e40:	f000 ff2c 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 ff1f 	bl	8001c9c <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48001000 	.word	0x48001000
 8000e70:	10120000 	.word	0x10120000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <Error_Handler+0x6>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f000 fe3a 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_I2C_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d127      	bne.n	8000f36 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_I2C_MspInit+0x80>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_I2C_MspInit+0x80>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_I2C_MspInit+0x80>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_I2C_MspInit+0x84>)
 8000f1a:	f000 febf 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_I2C_MspInit+0x80>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0x80>)
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_I2C_MspInit+0x80>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40005400 	.word	0x40005400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000400 	.word	0x48000400

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x7c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d128      	bne.n	8000fc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_SPI_MspInit+0x80>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <HAL_SPI_MspInit+0x80>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_SPI_MspInit+0x80>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_SPI_MspInit+0x80>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <HAL_SPI_MspInit+0x80>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_SPI_MspInit+0x80>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f9e:	23e0      	movs	r3, #224	; 0xe0
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f000 fe6e 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40013000 	.word	0x40013000
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d113      	bne.n	800100a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_TIM_Base_MspInit+0x48>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_TIM_Base_MspInit+0x48>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_Base_MspInit+0x48>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	201d      	movs	r0, #29
 8001000:	f000 fd9f 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001004:	201d      	movs	r0, #29
 8001006:	f000 fdb8 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40000400 	.word	0x40000400
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_UART_MspInit+0x8c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d130      	bne.n	80010a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_UART_MspInit+0x90>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <HAL_UART_MspInit+0x90>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_UART_MspInit+0x90>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_UART_MspInit+0x90>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_UART_MspInit+0x90>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_UART_MspInit+0x90>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800106e:	230c      	movs	r3, #12
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107e:	2307      	movs	r3, #7
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f000 fe06 	bl	8001c9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2026      	movs	r0, #38	; 0x26
 8001096:	f000 fd54 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800109a:	2026      	movs	r0, #38	; 0x26
 800109c:	f000 fd6d 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <HAL_PCD_MspInit+0x80>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d129      	bne.n	8001126 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_PCD_MspInit+0x84>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_PCD_MspInit+0x84>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_PCD_MspInit+0x84>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80010ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80010fc:	230e      	movs	r3, #14
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fdc7 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_PCD_MspInit+0x84>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_PCD_MspInit+0x84>)
 8001114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_PCD_MspInit+0x84>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005c00 	.word	0x40005c00
 8001134:	40021000 	.word	0x40021000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 fbc0 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001190:	4828      	ldr	r0, [pc, #160]	; (8001234 <TIM3_IRQHandler+0xa8>)
 8001192:	f002 fd73 	bl	8003c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  timer++;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <TIM3_IRQHandler+0xac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <TIM3_IRQHandler+0xac>)
 800119e:	6013      	str	r3, [r2, #0]
switch (gameMode) {
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <TIM3_IRQHandler+0xb0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d843      	bhi.n	8001230 <TIM3_IRQHandler+0xa4>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <TIM3_IRQHandler+0x24>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011e9 	.word	0x080011e9
 80011b8:	0800122f 	.word	0x0800122f
 80011bc:	0800122f 	.word	0x0800122f
      case 0:


	marioX = 2;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <TIM3_IRQHandler+0xb4>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	601a      	str	r2, [r3, #0]
	            marioY = 2;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <TIM3_IRQHandler+0xb8>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	601a      	str	r2, [r3, #0]
	            setCursor(0, 0);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fa60 	bl	8000694 <setCursor>
	            fillTestMap();
 80011d4:	f000 fada 	bl	800178c <fillTestMap>
	           showMap();
 80011d8:	f000 fa0a 	bl	80015f0 <showMap>
gameMode++;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <TIM3_IRQHandler+0xb0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <TIM3_IRQHandler+0xb0>)
 80011e4:	6013      	str	r3, [r2, #0]
          //TODO not started game


          break;
 80011e6:	e023      	b.n	8001230 <TIM3_IRQHandler+0xa4>
      case 1:
          //TODO in game
      	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4816      	ldr	r0, [pc, #88]	; (8001248 <TIM3_IRQHandler+0xbc>)
 80011f0:	f000 fece 	bl	8001f90 <HAL_GPIO_WritePin>
if (timer%2==0){
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <TIM3_IRQHandler+0xac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d105      	bne.n	800120c <TIM3_IRQHandler+0x80>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <TIM3_IRQHandler+0xbc>)
 8001208:	f000 fec2 	bl	8001f90 <HAL_GPIO_WritePin>

}
            updateWindowMarioPosition();//change position of window and mario.mario locate according to window
 800120c:	f000 f84c 	bl	80012a8 <updateWindowMarioPosition>
            if (dir) {
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <TIM3_IRQHandler+0xc0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <TIM3_IRQHandler+0x9c>
                updateMarioPosition(dir);
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <TIM3_IRQHandler+0xc0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f8e1 	bl	80013e4 <updateMarioPosition>
            	dir=0;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <TIM3_IRQHandler+0xc0>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

            }
            updateMap();
 8001228:	f000 f8fa 	bl	8001420 <updateMap>

          break;
 800122c:	e000      	b.n	8001230 <TIM3_IRQHandler+0xa4>
      case 2:
          //TODO in pause page
          break;
 800122e:	bf00      	nop
      case 3:
          //TODO in show details page
          break;
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000d4 	.word	0x200000d4
 8001238:	20000048 	.word	0x20000048
 800123c:	20000038 	.word	0x20000038
 8001240:	20000040 	.word	0x20000040
 8001244:	20000044 	.word	0x20000044
 8001248:	48001000 	.word	0x48001000
 800124c:	2000004c 	.word	0x2000004c

08001250 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if ((data[0]=='r')&&(marioLeftRight==0)){
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <USART2_IRQHandler+0x44>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b72      	cmp	r3, #114	; 0x72
 800125a:	d109      	bne.n	8001270 <USART2_IRQHandler+0x20>
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <USART2_IRQHandler+0x48>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <USART2_IRQHandler+0x20>
		dir=1;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <USART2_IRQHandler+0x4c>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
		marioLeftRight=1;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <USART2_IRQHandler+0x48>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
	}

	if ((data[0]=='u')){
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <USART2_IRQHandler+0x44>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b75      	cmp	r3, #117	; 0x75
 8001276:	d102      	bne.n	800127e <USART2_IRQHandler+0x2e>
		jump=1;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <USART2_IRQHandler+0x50>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
//		lockJump=1;
	}
 // 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <USART2_IRQHandler+0x54>)
 8001280:	f003 f95a 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, data,sizeof(data));
 8001284:	2201      	movs	r2, #1
 8001286:	4903      	ldr	r1, [pc, #12]	; (8001294 <USART2_IRQHandler+0x44>)
 8001288:	4806      	ldr	r0, [pc, #24]	; (80012a4 <USART2_IRQHandler+0x54>)
 800128a:	f003 f917 	bl	80044bc <HAL_UART_Receive_IT>

  /* USER CODE END USART2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000120 	.word	0x20000120
 8001298:	20000054 	.word	0x20000054
 800129c:	2000004c 	.word	0x2000004c
 80012a0:	20000050 	.word	0x20000050
 80012a4:	20000188 	.word	0x20000188

080012a8 <updateWindowMarioPosition>:

/* USER CODE BEGIN 1 */
void updateWindowMarioPosition() {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
	if (jump!=0){
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <updateWindowMarioPosition+0x11c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d041      	beq.n	800133a <updateWindowMarioPosition+0x92>
    float check1 = w + (gameSpeed / 4);
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <updateWindowMarioPosition+0x120>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80012c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <updateWindowMarioPosition+0x124>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	edc7 7a01 	vstr	s15, [r7, #4]
    if ((int) check1 != (int) w) {
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 2a90 	vmov	r2, s15
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <updateWindowMarioPosition+0x124>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e8:	ee17 3a90 	vmov	r3, s15
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d021      	beq.n	8001334 <updateWindowMarioPosition+0x8c>
 if (jump==1){
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <updateWindowMarioPosition+0x11c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d104      	bne.n	8001302 <updateWindowMarioPosition+0x5a>
	 marioY--;
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <updateWindowMarioPosition+0x128>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a34      	ldr	r2, [pc, #208]	; (80013d0 <updateWindowMarioPosition+0x128>)
 8001300:	6013      	str	r3, [r2, #0]
 }
 if (jump==-1){
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <updateWindowMarioPosition+0x11c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800130a:	d104      	bne.n	8001316 <updateWindowMarioPosition+0x6e>
	 marioY++;
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <updateWindowMarioPosition+0x128>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <updateWindowMarioPosition+0x128>)
 8001314:	6013      	str	r3, [r2, #0]
 }
 if (marioY==0){
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <updateWindowMarioPosition+0x128>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <updateWindowMarioPosition+0x7e>
	 jump=-1;
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <updateWindowMarioPosition+0x11c>)
 8001320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001324:	601a      	str	r2, [r3, #0]
 }
 if (marioY==2){
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <updateWindowMarioPosition+0x128>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d102      	bne.n	8001334 <updateWindowMarioPosition+0x8c>
	 jump=0;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <updateWindowMarioPosition+0x11c>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 }

    }
	w=check1;}
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <updateWindowMarioPosition+0x124>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]

    float check = willChangeMario + (gameSpeed / 4);
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <updateWindowMarioPosition+0x120>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001344:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <updateWindowMarioPosition+0x12c>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001352:	edc7 7a00 	vstr	s15, [r7]
		    if ((int) check != (int) willChangeMario) {
 8001356:	edd7 7a00 	vldr	s15, [r7]
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 2a90 	vmov	r2, s15
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <updateWindowMarioPosition+0x12c>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136c:	ee17 3a90 	vmov	r3, s15
 8001370:	429a      	cmp	r2, r3
 8001372:	d01d      	beq.n	80013b0 <updateWindowMarioPosition+0x108>
		 windowStart++;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <updateWindowMarioPosition+0x130>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <updateWindowMarioPosition+0x130>)
 800137c:	6013      	str	r3, [r2, #0]
		        windowEnd++;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <updateWindowMarioPosition+0x134>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	4a15      	ldr	r2, [pc, #84]	; (80013dc <updateWindowMarioPosition+0x134>)
 8001386:	6013      	str	r3, [r2, #0]
		        if (windowEnd>60){
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <updateWindowMarioPosition+0x134>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b3c      	cmp	r3, #60	; 0x3c
 800138e:	dd0a      	ble.n	80013a6 <updateWindowMarioPosition+0xfe>
		        	windowEnd=60;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <updateWindowMarioPosition+0x134>)
 8001392:	223c      	movs	r2, #60	; 0x3c
 8001394:	601a      	str	r2, [r3, #0]
		        	windowStart=40;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <updateWindowMarioPosition+0x130>)
 8001398:	2228      	movs	r2, #40	; 0x28
 800139a:	601a      	str	r2, [r3, #0]
		        	marioX++;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <updateWindowMarioPosition+0x138>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <updateWindowMarioPosition+0x138>)
 80013a4:	6013      	str	r3, [r2, #0]
		        }
		        marioX--;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <updateWindowMarioPosition+0x138>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <updateWindowMarioPosition+0x138>)
 80013ae:	6013      	str	r3, [r2, #0]
	}

willChangeMario=check;
 80013b0:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <updateWindowMarioPosition+0x12c>)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6013      	str	r3, [r2, #0]


}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000050 	.word	0x20000050
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000058 	.word	0x20000058
 80013d0:	20000044 	.word	0x20000044
 80013d4:	2000005c 	.word	0x2000005c
 80013d8:	2000003c 	.word	0x2000003c
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000040 	.word	0x20000040

080013e4 <updateMarioPosition>:

void updateMarioPosition(int dir) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    //dir is -1(left) or +1(right)

if (dir>0){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dd05      	ble.n	80013fe <updateMarioPosition+0x1a>
	marioX++;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <updateMarioPosition+0x38>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <updateMarioPosition+0x38>)
 80013fa:	6013      	str	r3, [r2, #0]
}else if (dir<0){
	marioX--;
}
}
 80013fc:	e007      	b.n	800140e <updateMarioPosition+0x2a>
}else if (dir<0){
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	da04      	bge.n	800140e <updateMarioPosition+0x2a>
	marioX--;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <updateMarioPosition+0x38>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <updateMarioPosition+0x38>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000040 	.word	0x20000040

08001420 <updateMap>:

void updateMap() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b0d6      	sub	sp, #344	; 0x158
 8001424:	af00      	add	r7, sp, #0
//	unsigned char h[100];
//	int s=sprintf(h,"%d",1);
//		HAL_UART_Transmit(&huart2, h, s, 1000);

    int show[4][20];
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 8001426:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <updateMap+0x1b4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001434:	e037      	b.n	80014a6 <updateMap+0x86>
        show[0][j] = map[0][i];
 8001436:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <updateMap+0x1b8>)
 8001438:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800143c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001440:	463b      	mov	r3, r7
 8001442:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[1][j] = map[1][i];
 800144a:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <updateMap+0x1b8>)
 800144c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001450:	333c      	adds	r3, #60	; 0x3c
 8001452:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001456:	463b      	mov	r3, r7
 8001458:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800145c:	3214      	adds	r2, #20
 800145e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[2][j] = map[2][i];
 8001462:	4a5d      	ldr	r2, [pc, #372]	; (80015d8 <updateMap+0x1b8>)
 8001464:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001468:	3378      	adds	r3, #120	; 0x78
 800146a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800146e:	463b      	mov	r3, r7
 8001470:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001474:	3228      	adds	r2, #40	; 0x28
 8001476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[3][j] = map[3][i];
 800147a:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <updateMap+0x1b8>)
 800147c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001480:	33b4      	adds	r3, #180	; 0xb4
 8001482:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001486:	463b      	mov	r3, r7
 8001488:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800148c:	323c      	adds	r2, #60	; 0x3c
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 8001492:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001496:	3301      	adds	r3, #1
 8001498:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800149c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <updateMap+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dbc1      	blt.n	8001436 <updateMap+0x16>
    }
    show[marioY][marioX] = 2;
 80014b2:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <updateMap+0x1c0>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <updateMap+0x1c4>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	4639      	mov	r1, r7
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4403      	add	r3, r0
 80014c6:	2202      	movs	r2, #2
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int c=0;c<4;c++){
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014d2:	e040      	b.n	8001556 <updateMap+0x136>
       	for (int i=0;i<20;i++){
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80014da:	e033      	b.n	8001544 <updateMap+0x124>
       		if (lastLcd[c][i]!=show[c][i]){
 80014dc:	4942      	ldr	r1, [pc, #264]	; (80015e8 <updateMap+0x1c8>)
 80014de:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014ee:	4413      	add	r3, r2
 80014f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80014f4:	4638      	mov	r0, r7
 80014f6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001506:	4413      	add	r3, r2
 8001508:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800150c:	4299      	cmp	r1, r3
 800150e:	d014      	beq.n	800153a <updateMap+0x11a>
           		setCursor(i, c);
 8001510:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001514:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8001518:	f7ff f8bc 	bl	8000694 <setCursor>
       	    	write(show[c][i]);
 800151c:	4639      	mov	r1, r7
 800151e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800152e:	4413      	add	r3, r2
 8001530:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f92b 	bl	8000790 <write>
       	for (int i=0;i<20;i++){
 800153a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800153e:	3301      	adds	r3, #1
 8001540:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001544:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001548:	2b13      	cmp	r3, #19
 800154a:	ddc7      	ble.n	80014dc <updateMap+0xbc>
    for(int c=0;c<4;c++){
 800154c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001550:	3301      	adds	r3, #1
 8001552:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001556:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800155a:	2b03      	cmp	r3, #3
 800155c:	ddba      	ble.n	80014d4 <updateMap+0xb4>
       	 	}
       	    }
       }
    for(int c=0;c<4;c++){
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001564:	e029      	b.n	80015ba <updateMap+0x19a>
          	for (int i=0;i<20;i++){
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800156c:	e01c      	b.n	80015a8 <updateMap+0x188>
lastLcd[c][i]=show[c][i];
 800156e:	4639      	mov	r1, r7
 8001570:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001580:	4413      	add	r3, r2
 8001582:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <updateMap+0x1c8>)
 8001588:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001598:	4413      	add	r3, r2
 800159a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          	for (int i=0;i<20;i++){
 800159e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80015a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80015ac:	2b13      	cmp	r3, #19
 80015ae:	ddde      	ble.n	800156e <updateMap+0x14e>
    for(int c=0;c<4;c++){
 80015b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80015b4:	3301      	adds	r3, #1
 80015b6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80015ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80015be:	2b03      	cmp	r3, #3
 80015c0:	ddd1      	ble.n	8001566 <updateMap+0x146>
}
    }
    marioLeftRight=0;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <updateMap+0x1cc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000003c 	.word	0x2000003c
 80015d8:	200004f8 	.word	0x200004f8
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000044 	.word	0x20000044
 80015e4:	20000040 	.word	0x20000040
 80015e8:	200008b8 	.word	0x200008b8
 80015ec:	20000054 	.word	0x20000054

080015f0 <showMap>:
void showMap() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0d6      	sub	sp, #344	; 0x158
 80015f4:	af00      	add	r7, sp, #0

    int show[4][20];
    if (windowEnd>=59){
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <showMap+0x184>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b3a      	cmp	r3, #58	; 0x3a
 80015fc:	f300 80b4 	bgt.w	8001768 <showMap+0x178>
    	return;
    }
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 8001600:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <showMap+0x188>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800160e:	e037      	b.n	8001680 <showMap+0x90>
        show[0][j] = map[0][i];
 8001610:	4a5a      	ldr	r2, [pc, #360]	; (800177c <showMap+0x18c>)
 8001612:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001616:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800161a:	463b      	mov	r3, r7
 800161c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[1][j] = map[1][i];
 8001624:	4a55      	ldr	r2, [pc, #340]	; (800177c <showMap+0x18c>)
 8001626:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800162a:	333c      	adds	r3, #60	; 0x3c
 800162c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001630:	463b      	mov	r3, r7
 8001632:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001636:	3214      	adds	r2, #20
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[2][j] = map[2][i];
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <showMap+0x18c>)
 800163e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001642:	3378      	adds	r3, #120	; 0x78
 8001644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001648:	463b      	mov	r3, r7
 800164a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800164e:	3228      	adds	r2, #40	; 0x28
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[3][j] = map[3][i];
 8001654:	4a49      	ldr	r2, [pc, #292]	; (800177c <showMap+0x18c>)
 8001656:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800165a:	33b4      	adds	r3, #180	; 0xb4
 800165c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001660:	463b      	mov	r3, r7
 8001662:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001666:	323c      	adds	r2, #60	; 0x3c
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 800166c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001670:	3301      	adds	r3, #1
 8001672:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001676:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <showMap+0x184>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001688:	429a      	cmp	r2, r3
 800168a:	dbc1      	blt.n	8001610 <showMap+0x20>
    }
    show[marioY][marioX] = 2;
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <showMap+0x190>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <showMap+0x194>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	4639      	mov	r1, r7
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4403      	add	r3, r0
 80016a0:	2202      	movs	r2, #2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int c=0;c<4;c++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016ac:	e025      	b.n	80016fa <showMap+0x10a>
   		setCursor(0, c);
 80016ae:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7fe ffee 	bl	8000694 <setCursor>
       	for (int i=0;i<20;i++){
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80016be:	e013      	b.n	80016e8 <showMap+0xf8>
       	    	write(show[c][i]);
 80016c0:	4639      	mov	r1, r7
 80016c2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016d2:	4413      	add	r3, r2
 80016d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f859 	bl	8000790 <write>
       	for (int i=0;i<20;i++){
 80016de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80016e2:	3301      	adds	r3, #1
 80016e4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80016e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80016ec:	2b13      	cmp	r3, #19
 80016ee:	dde7      	ble.n	80016c0 <showMap+0xd0>
    for(int c=0;c<4;c++){
 80016f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80016f4:	3301      	adds	r3, #1
 80016f6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80016fe:	2b03      	cmp	r3, #3
 8001700:	ddd5      	ble.n	80016ae <showMap+0xbe>

       	    }
       }
    for(int c=0;c<4;c++){
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001708:	e029      	b.n	800175e <showMap+0x16e>
              	for (int i=0;i<20;i++){
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001710:	e01c      	b.n	800174c <showMap+0x15c>
    lastLcd[c][i]=show[c][i];
 8001712:	4639      	mov	r1, r7
 8001714:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001724:	4413      	add	r3, r2
 8001726:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800172a:	4817      	ldr	r0, [pc, #92]	; (8001788 <showMap+0x198>)
 800172c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800173c:	4413      	add	r3, r2
 800173e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
              	for (int i=0;i<20;i++){
 8001742:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001746:	3301      	adds	r3, #1
 8001748:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800174c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001750:	2b13      	cmp	r3, #19
 8001752:	ddde      	ble.n	8001712 <showMap+0x122>
    for(int c=0;c<4;c++){
 8001754:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001758:	3301      	adds	r3, #1
 800175a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800175e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001762:	2b03      	cmp	r3, #3
 8001764:	ddd1      	ble.n	800170a <showMap+0x11a>
 8001766:	e000      	b.n	800176a <showMap+0x17a>
    	return;
 8001768:	bf00      	nop
    }
        }
}
 800176a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	2000003c 	.word	0x2000003c
 800177c:	200004f8 	.word	0x200004f8
 8001780:	20000044 	.word	0x20000044
 8001784:	20000040 	.word	0x20000040
 8001788:	200008b8 	.word	0x200008b8

0800178c <fillTestMap>:
void fillTestMap() {
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
	for (int i=0;i<4;i++){
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e016      	b.n	80017c6 <fillTestMap+0x3a>
		for(int j=0;j<60;j++){
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	e00d      	b.n	80017ba <fillTestMap+0x2e>
			map[i][j]=0;
 800179e:	4918      	ldr	r1, [pc, #96]	; (8001800 <fillTestMap+0x74>)
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<60;j++){
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b3b      	cmp	r3, #59	; 0x3b
 80017be:	ddee      	ble.n	800179e <fillTestMap+0x12>
	for (int i=0;i<4;i++){
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	dde5      	ble.n	8001798 <fillTestMap+0xc>
		}
	}
//    for (int i = 0; i < 60; i++) {
//        map[0][i] = 4;
//    }
    for (int i = 0; i < 60; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	e008      	b.n	80017e4 <fillTestMap+0x58>
        map[3][i] = 3;
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <fillTestMap+0x74>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	33b4      	adds	r3, #180	; 0xb4
 80017d8:	2103      	movs	r1, #3
 80017da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 60; i++) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b3b      	cmp	r3, #59	; 0x3b
 80017e8:	ddf3      	ble.n	80017d2 <fillTestMap+0x46>
    }
map[2][17]=6;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <fillTestMap+0x74>)
 80017ec:	2206      	movs	r2, #6
 80017ee:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200004f8 	.word	0x200004f8

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 800182e:	490e      	ldr	r1, [pc, #56]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001844:	4c0b      	ldr	r4, [pc, #44]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff ffd7 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f003 fdc1 	bl	80053dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7ff f865 	bl	8000928 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800186c:	080054bc 	.word	0x080054bc
  ldr r2, =_sbss
 8001870:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001874:	200009fc 	.word	0x200009fc

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x28>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f94d 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff faf0 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f965 	bl	8001b96 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	f000 f92d 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	20000014 	.word	0x20000014
 8001904:	20000010 	.word	0x20000010

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000014 	.word	0x20000014
 800192c:	200009f8 	.word	0x200009f8

08001930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;  
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200009f8 	.word	0x200009f8

08001948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_Delay+0x40>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000014 	.word	0x20000014

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff3e 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff31 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d008      	beq.n	8001bd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e020      	b.n	8001c14 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 020e 	bic.w	r2, r2, #14
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d005      	beq.n	8001c42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e027      	b.n	8001c92 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020e 	bic.w	r2, r2, #14
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
    } 
  }
  return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001caa:	e154      	b.n	8001f56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8146 	beq.w	8001f50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d00b      	beq.n	8001ce4 <HAL_GPIO_Init+0x48>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd8:	2b11      	cmp	r3, #17
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b12      	cmp	r3, #18
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0201 	and.w	r2, r3, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0xea>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d123      	bne.n	8001dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0203 	and.w	r2, r3, #3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80a0 	beq.w	8001f50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e10:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_GPIO_Init+0x2d8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_GPIO_Init+0x2d8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <HAL_GPIO_Init+0x2d8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e28:	4a53      	ldr	r2, [pc, #332]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e52:	d019      	beq.n	8001e88 <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a49      	ldr	r2, [pc, #292]	; (8001f7c <HAL_GPIO_Init+0x2e0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x1e4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0x1e0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a46      	ldr	r2, [pc, #280]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_GPIO_Init+0x1dc>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e008      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e78:	2305      	movs	r3, #5
 8001e7a:	e006      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e004      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	f002 0203 	and.w	r2, r2, #3
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	4093      	lsls	r3, r2
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e9a:	4937      	ldr	r1, [pc, #220]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ef6:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f20:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f47f aea3 	bne.w	8001cac <HAL_GPIO_Init+0x10>
  }
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	48000800 	.word	0x48000800
 8001f84:	48000c00 	.word	0x48000c00
 8001f88:	48001000 	.word	0x48001000
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e081      	b.n	80020d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe ff6c 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002010:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002020:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	e006      	b.n	8002048 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002046:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d104      	bne.n	800205a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	ea42 0103 	orr.w	r1, r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	021a      	lsls	r2, r3, #8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69d9      	ldr	r1, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d138      	bne.n	8002166 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020fe:	2302      	movs	r3, #2
 8002100:	e032      	b.n	8002168 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2224      	movs	r2, #36	; 0x24
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002130:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
  }
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b20      	cmp	r3, #32
 8002188:	d139      	bne.n	80021fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002194:	2302      	movs	r3, #2
 8002196:	e033      	b.n	8002200 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
  }
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	b08b      	sub	sp, #44	; 0x2c
 8002210:	af06      	add	r7, sp, #24
 8002212:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0d0      	b.n	80023c0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe ff3c 	bl	80010b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 f88d 	bl	8005364 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
 800224e:	e04c      	b.n	80022ea <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3301      	adds	r3, #1
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	b298      	uxth	r0, r3
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	3336      	adds	r3, #54	; 0x36
 800228e:	4602      	mov	r2, r0
 8002290:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3303      	adds	r3, #3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3338      	adds	r3, #56	; 0x38
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	333c      	adds	r3, #60	; 0x3c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3340      	adds	r3, #64	; 0x40
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3ad      	bcc.n	8002250 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e044      	b.n	8002384 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	f203 1369 	addw	r3, r3, #361	; 0x169
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	3301      	adds	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d3b5      	bcc.n	80022fa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	687e      	ldr	r6, [r7, #4]
 8002396:	466d      	mov	r5, sp
 8002398:	f106 0410 	add.w	r4, r6, #16
 800239c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	1d33      	adds	r3, r6, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f002 fff6 	bl	800539a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f000 bef4 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 816a 	beq.w	80026c6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023f2:	4bb3      	ldr	r3, [pc, #716]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fe:	4bb0      	ldr	r3, [pc, #704]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	d159      	bne.n	80024be <HAL_RCC_OscConfig+0xf6>
 800240a:	4bad      	ldr	r3, [pc, #692]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002416:	d152      	bne.n	80024be <HAL_RCC_OscConfig+0xf6>
 8002418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800241c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800242c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_RCC_OscConfig+0x82>
 8002444:	4b9e      	ldr	r3, [pc, #632]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0xae>
 800244a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800245e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002462:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002466:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002472:	4b93      	ldr	r3, [pc, #588]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800247a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800247e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002482:	fa92 f2a2 	rbit	r2, r2
 8002486:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800248a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f042 0220 	orr.w	r2, r2, #32
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f002 021f 	and.w	r2, r2, #31
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 810c 	beq.w	80026c4 <HAL_RCC_OscConfig+0x2fc>
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8106 	bne.w	80026c4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f000 be86 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x110>
 80024ca:	4b7d      	ldr	r3, [pc, #500]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7c      	ldr	r2, [pc, #496]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e030      	b.n	800253a <HAL_RCC_OscConfig+0x172>
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x134>
 80024e2:	4b77      	ldr	r3, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a76      	ldr	r2, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b74      	ldr	r3, [pc, #464]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a73      	ldr	r2, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80024f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e01e      	b.n	800253a <HAL_RCC_OscConfig+0x172>
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x15a>
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6c      	ldr	r2, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800250e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a69      	ldr	r2, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x172>
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800253a:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f023 020f 	bic.w	r2, r3, #15
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	495d      	ldr	r1, [pc, #372]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d059      	beq.n	800260c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff f9ea 	bl	8001930 <HAL_GetTick>
 800255c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002562:	f7ff f9e5 	bl	8001930 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d902      	bls.n	8002578 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	f000 be29 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>
 8002578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800258c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d102      	bne.n	80025aa <HAL_RCC_OscConfig+0x1e2>
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x20e>
 80025aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025e2:	fa92 f2a2 	rbit	r2, r2
 80025e6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025ea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f042 0220 	orr.w	r2, r2, #32
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f002 021f 	and.w	r2, r2, #31
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0ab      	beq.n	8002562 <HAL_RCC_OscConfig+0x19a>
 800260a:	e05c      	b.n	80026c6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff f990 	bl	8001930 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002616:	f7ff f98b 	bl	8001930 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d902      	bls.n	800262c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	f000 bdcf 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>
 800262c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002630:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002640:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0x296>
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x2c2>
 800265e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002662:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002676:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800267a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <HAL_RCC_OscConfig+0x2f8>)
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800268e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002692:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800269e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	f042 0220 	orr.w	r2, r2, #32
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f002 021f 	and.w	r2, r2, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ab      	bne.n	8002616 <HAL_RCC_OscConfig+0x24e>
 80026be:	e002      	b.n	80026c6 <HAL_RCC_OscConfig+0x2fe>
 80026c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 816f 	beq.w	80029b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d6:	4bd0      	ldr	r3, [pc, #832]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026e2:	4bcd      	ldr	r3, [pc, #820]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d16c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x400>
 80026ee:	4bca      	ldr	r3, [pc, #808]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d166      	bne.n	80027c8 <HAL_RCC_OscConfig+0x400>
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800270c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <HAL_RCC_OscConfig+0x362>
 8002724:	4bbc      	ldr	r3, [pc, #752]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	e013      	b.n	8002752 <HAL_RCC_OscConfig+0x38a>
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002742:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800274e:	4bb2      	ldr	r3, [pc, #712]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2202      	movs	r2, #2
 8002754:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002758:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800275c:	fa92 f2a2 	rbit	r2, r2
 8002760:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002764:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_RCC_OscConfig+0x3cc>
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d002      	beq.n	8002794 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f000 bd1b 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4ba0      	ldr	r3, [pc, #640]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	21f8      	movs	r1, #248	; 0xf8
 80027a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027ac:	fa91 f1a1 	rbit	r1, r1
 80027b0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027b4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027b8:	fab1 f181 	clz	r1, r1
 80027bc:	b2c9      	uxtb	r1, r1
 80027be:	408b      	lsls	r3, r1
 80027c0:	4995      	ldr	r1, [pc, #596]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e0f5      	b.n	80029b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8085 	beq.w	80028de <HAL_RCC_OscConfig+0x516>
 80027d4:	2301      	movs	r3, #1
 80027d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	461a      	mov	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff f896 	bl	8001930 <HAL_GetTick>
 8002804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280a:	f7ff f891 	bl	8001930 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	f000 bcd5 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002832:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0x488>
 800284a:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e013      	b.n	8002878 <HAL_RCC_OscConfig+0x4b0>
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002868:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	2202      	movs	r2, #2
 800287a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800287e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002882:	fa92 f2a2 	rbit	r2, r2
 8002886:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800288a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800288e:	fab2 f282 	clz	r2, r2
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f042 0220 	orr.w	r2, r2, #32
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f002 021f 	and.w	r2, r2, #31
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0af      	beq.n	800280a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	21f8      	movs	r1, #248	; 0xf8
 80028ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028c2:	fa91 f1a1 	rbit	r1, r1
 80028c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028ce:	fab1 f181 	clz	r1, r1
 80028d2:	b2c9      	uxtb	r1, r1
 80028d4:	408b      	lsls	r3, r1
 80028d6:	4950      	ldr	r1, [pc, #320]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e06a      	b.n	80029b4 <HAL_RCC_OscConfig+0x5ec>
 80028de:	2301      	movs	r3, #1
 80028e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	461a      	mov	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff f811 	bl	8001930 <HAL_GetTick>
 800290e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7ff f80c 	bl	8001930 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d902      	bls.n	800292a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	f000 bc50 	b.w	80031ca <HAL_RCC_OscConfig+0xe02>
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800293c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d102      	bne.n	800295a <HAL_RCC_OscConfig+0x592>
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e013      	b.n	8002982 <HAL_RCC_OscConfig+0x5ba>
 800295a:	2302      	movs	r3, #2
 800295c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002972:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCC_OscConfig+0x650>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2202      	movs	r2, #2
 8002984:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002988:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800298c:	fa92 f2a2 	rbit	r2, r2
 8002990:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002994:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1af      	bne.n	8002914 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80da 	beq.w	8002b78 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d069      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x6da>
 80029ce:	2301      	movs	r3, #1
 80029d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x654>)
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	461a      	mov	r2, r3
 80029f4:	2301      	movs	r3, #1
 80029f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7fe ff9a 	bl	8001930 <HAL_GetTick>
 80029fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a00:	e00e      	b.n	8002a20 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe ff95 	bl	8001930 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d906      	bls.n	8002a20 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e3d9      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	10908120 	.word	0x10908120
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a36:	2202      	movs	r2, #2
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a4e:	2202      	movs	r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	4ba5      	ldr	r3, [pc, #660]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	6019      	str	r1, [r3, #0]
 8002a6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f1a3 	rbit	r1, r3
 8002a78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a7c:	6019      	str	r1, [r3, #0]
  return result;
 8002a7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0b0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x63a>
 8002aa0:	e06a      	b.n	8002b78 <HAL_RCC_OscConfig+0x7b0>
 8002aa2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fa93 f2a3 	rbit	r2, r3
 8002ab4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ab8:	601a      	str	r2, [r3, #0]
  return result;
 8002aba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002abe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b8c      	ldr	r3, [pc, #560]	; (8002cfc <HAL_RCC_OscConfig+0x934>)
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe ff2c 	bl	8001930 <HAL_GetTick>
 8002ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e009      	b.n	8002af2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe ff27 	bl	8001930 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e36b      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 8002af2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b26:	2202      	movs	r2, #2
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	fa93 f2a3 	rbit	r2, r3
 8002b34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b42:	2102      	movs	r1, #2
 8002b44:	6019      	str	r1, [r3, #0]
 8002b46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f1a3 	rbit	r1, r3
 8002b50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b54:	6019      	str	r1, [r3, #0]
  return result;
 8002b56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1b2      	bne.n	8002ade <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8158 	beq.w	8002e38 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	61d3      	str	r3, [r2, #28]
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	; (8002d00 <HAL_RCC_OscConfig+0x938>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11a      	bne.n	8002c02 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x938>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a4b      	ldr	r2, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x938>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd8:	f7fe feaa 	bl	8001930 <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	e009      	b.n	8002bf6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe fea5 	bl	8001930 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e2e9      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <HAL_RCC_OscConfig+0x938>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ef      	beq.n	8002be2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x852>
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e02f      	b.n	8002c7a <HAL_RCC_OscConfig+0x8b2>
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x876>
 8002c24:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	6213      	str	r3, [r2, #32]
 8002c30:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e01d      	b.n	8002c7a <HAL_RCC_OscConfig+0x8b2>
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x89a>
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x8b2>
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d06b      	beq.n	8002d5c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fe54 	bl	8001930 <HAL_GetTick>
 8002c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fe4f 	bl	8001930 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e291      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 8002ca6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002caa:	2202      	movs	r2, #2
 8002cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cd4:	601a      	str	r2, [r3, #0]
  return result;
 8002cd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d109      	bne.n	8002d04 <HAL_RCC_OscConfig+0x93c>
 8002cf0:	4b01      	ldr	r3, [pc, #4]	; (8002cf8 <HAL_RCC_OscConfig+0x930>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	e014      	b.n	8002d20 <HAL_RCC_OscConfig+0x958>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	10908120 	.word	0x10908120
 8002d00:	40007000 	.word	0x40007000
 8002d04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f2a3 	rbit	r2, r3
 8002d16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	4bbb      	ldr	r3, [pc, #748]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d24:	2102      	movs	r1, #2
 8002d26:	6011      	str	r1, [r2, #0]
 8002d28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	fa92 f1a2 	rbit	r1, r2
 8002d32:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d36:	6011      	str	r1, [r2, #0]
  return result;
 8002d38:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f002 021f 	and.w	r2, r2, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d099      	beq.n	8002c8e <HAL_RCC_OscConfig+0x8c6>
 8002d5a:	e063      	b.n	8002e24 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fde8 	bl	8001930 <HAL_GetTick>
 8002d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fde3 	bl	8001930 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e225      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 8002d7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dac:	601a      	str	r2, [r3, #0]
  return result;
 8002dae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002db2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_OscConfig+0xa06>
 8002dc8:	4b90      	ldr	r3, [pc, #576]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	e00d      	b.n	8002dea <HAL_RCC_OscConfig+0xa22>
 8002dce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f2a3 	rbit	r2, r3
 8002de0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	4b89      	ldr	r3, [pc, #548]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dee:	2102      	movs	r1, #2
 8002df0:	6011      	str	r1, [r2, #0]
 8002df2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	fa92 f1a2 	rbit	r1, r2
 8002dfc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e00:	6011      	str	r1, [r2, #0]
  return result;
 8002e02:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	fab2 f282 	clz	r2, r2
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f002 021f 	and.w	r2, r2, #31
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1a0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2c:	4b77      	ldr	r3, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4a76      	ldr	r2, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 81c2 	beq.w	80031c8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f000 819c 	beq.w	800318a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	f040 8114 	bne.w	8003086 <HAL_RCC_OscConfig+0xcbe>
 8002e5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e76:	601a      	str	r2, [r3, #0]
  return result;
 8002e78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fd4c 	bl	8001930 <HAL_GetTick>
 8002e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	e009      	b.n	8002eb2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fd47 	bl	8001930 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e18b      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 8002eb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	fa93 f2a3 	rbit	r2, r3
 8002ec6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eca:	601a      	str	r2, [r3, #0]
  return result;
 8002ecc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ed0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_RCC_OscConfig+0xb24>
 8002ee6:	4b49      	ldr	r3, [pc, #292]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0xb5c>
 8002eec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f2c:	6011      	str	r1, [r2, #0]
 8002f2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	fa92 f1a2 	rbit	r1, r2
 8002f38:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f3c:	6011      	str	r1, [r2, #0]
  return result;
 8002f3e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f042 0220 	orr.w	r2, r2, #32
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f002 021f 	and.w	r2, r2, #31
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d19e      	bne.n	8002e9e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	4925      	ldr	r1, [pc, #148]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f94:	601a      	str	r2, [r3, #0]
  return result;
 8002f96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f9a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	2301      	movs	r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fcbd 	bl	8001930 <HAL_GetTick>
 8002fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fba:	e009      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fcb8 	bl	8001930 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0fc      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 8002fd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fe8:	601a      	str	r2, [r3, #0]
  return result;
 8002fea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_RCC_OscConfig+0xc48>
 8003004:	4b01      	ldr	r3, [pc, #4]	; (800300c <HAL_RCC_OscConfig+0xc44>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	e01e      	b.n	8003048 <HAL_RCC_OscConfig+0xc80>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800302e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCC_OscConfig+0xe0c>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800304c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	fa92 f1a2 	rbit	r1, r2
 800305c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003060:	6011      	str	r1, [r2, #0]
  return result;
 8003062:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0220 	orr.w	r2, r2, #32
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d09b      	beq.n	8002fbc <HAL_RCC_OscConfig+0xbf4>
 8003084:	e0a0      	b.n	80031c8 <HAL_RCC_OscConfig+0xe00>
 8003086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800308a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800309e:	601a      	str	r2, [r3, #0]
  return result;
 80030a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	461a      	mov	r2, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fc38 	bl	8001930 <HAL_GetTick>
 80030c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	e009      	b.n	80030da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe fc33 	bl	8001930 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e077      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
 80030da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	601a      	str	r2, [r3, #0]
  return result;
 80030f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d102      	bne.n	8003114 <HAL_RCC_OscConfig+0xd4c>
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0xe0c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	e01b      	b.n	800314c <HAL_RCC_OscConfig+0xd84>
 8003114:	f107 0320 	add.w	r3, r7, #32
 8003118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f107 0320 	add.w	r3, r7, #32
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f107 0318 	add.w	r3, r7, #24
 8003132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f107 0318 	add.w	r3, r7, #24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_OscConfig+0xe0c>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f107 0210 	add.w	r2, r7, #16
 8003150:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	f107 0210 	add.w	r2, r7, #16
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fa92 f1a2 	rbit	r1, r2
 8003160:	f107 020c 	add.w	r2, r7, #12
 8003164:	6011      	str	r1, [r2, #0]
  return result;
 8003166:	f107 020c 	add.w	r2, r7, #12
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d19e      	bne.n	80030c6 <HAL_RCC_OscConfig+0xcfe>
 8003188:	e01e      	b.n	80031c8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e018      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_RCC_OscConfig+0xe0c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d108      	bne.n	80031c4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b09e      	sub	sp, #120	; 0x78
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e162      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b90      	ldr	r3, [pc, #576]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d910      	bls.n	8003220 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	498b      	ldr	r1, [pc, #556]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b89      	ldr	r3, [pc, #548]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e14a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b82      	ldr	r3, [pc, #520]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	497f      	ldr	r1, [pc, #508]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80dc 	beq.w	8003404 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d13c      	bne.n	80032ce <HAL_RCC_ClockConfig+0xf6>
 8003254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d102      	bne.n	800327e <HAL_RCC_ClockConfig+0xa6>
 8003278:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	e00f      	b.n	800329e <HAL_RCC_ClockConfig+0xc6>
 800327e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003282:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	667b      	str	r3, [r7, #100]	; 0x64
 800328c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003290:	663b      	str	r3, [r7, #96]	; 0x60
 8003292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329a:	4b67      	ldr	r3, [pc, #412]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80032a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032a6:	fa92 f2a2 	rbit	r2, r2
 80032aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d17b      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0f3      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d13c      	bne.n	8003350 <HAL_RCC_ClockConfig+0x178>
 80032d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_ClockConfig+0x128>
 80032fa:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_ClockConfig+0x148>
 8003300:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003304:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
 800330e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003312:	643b      	str	r3, [r7, #64]	; 0x40
 8003314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331c:	4b46      	ldr	r3, [pc, #280]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003324:	63ba      	str	r2, [r7, #56]	; 0x38
 8003326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003328:	fa92 f2a2 	rbit	r2, r2
 800332c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800332e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0220 	orr.w	r2, r2, #32
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d13a      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b2      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
 8003350:	2302      	movs	r3, #2
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_RCC_ClockConfig+0x1a0>
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	e00d      	b.n	8003394 <HAL_RCC_ClockConfig+0x1bc>
 8003378:	2302      	movs	r3, #2
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	2302      	movs	r3, #2
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2202      	movs	r2, #2
 8003396:	61ba      	str	r2, [r7, #24]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	fa92 f2a2 	rbit	r2, r2
 800339e:	617a      	str	r2, [r7, #20]
  return result;
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	fab2 f282 	clz	r2, r2
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	f002 021f 	and.w	r2, r2, #31
 80033b2:	2101      	movs	r1, #1
 80033b4:	fa01 f202 	lsl.w	r2, r1, r2
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e079      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	491a      	ldr	r1, [pc, #104]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe faac 	bl	8001930 <HAL_GetTick>
 80033d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033dc:	f7fe faa8 	bl	8001930 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e061      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 020c 	and.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d1eb      	bne.n	80033dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d214      	bcs.n	800343c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 0207 	bic.w	r2, r3, #7
 800341a:	4906      	ldr	r1, [pc, #24]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e040      	b.n	80034b6 <HAL_RCC_ClockConfig+0x2de>
 8003434:	40022000 	.word	0x40022000
 8003438:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_RCC_ClockConfig+0x2e8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	491a      	ldr	r1, [pc, #104]	; (80034c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4912      	ldr	r1, [pc, #72]	; (80034c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800347a:	f000 f829 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800347e:	4601      	mov	r1, r0
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003488:	22f0      	movs	r2, #240	; 0xf0
 800348a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	fa92 f2a2 	rbit	r2, r2
 8003492:	60fa      	str	r2, [r7, #12]
  return result;
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	fab2 f282 	clz	r2, r2
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	40d3      	lsrs	r3, r2
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x2ec>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	fa21 f303 	lsr.w	r3, r1, r3
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <HAL_RCC_ClockConfig+0x2f0>)
 80034a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_RCC_ClockConfig+0x2f4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe f9fa 	bl	80018a8 <HAL_InitTick>
  
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3778      	adds	r7, #120	; 0x78
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	0800547c 	.word	0x0800547c
 80034c8:	2000000c 	.word	0x2000000c
 80034cc:	20000010 	.word	0x20000010

080034d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b08b      	sub	sp, #44	; 0x2c
 80034d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x30>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x36>
 80034fe:	e03c      	b.n	800357a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003502:	623b      	str	r3, [r7, #32]
      break;
 8003504:	e03c      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800350c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003510:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	fa92 f2a2 	rbit	r2, r2
 8003518:	607a      	str	r2, [r7, #4]
  return result;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	40d3      	lsrs	r3, r2
 8003524:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003526:	5cd3      	ldrb	r3, [r2, r3]
 8003528:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_RCC_GetSysClockFreq+0xc0>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	220f      	movs	r2, #15
 8003534:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	fa92 f2a2 	rbit	r2, r2
 800353c:	60fa      	str	r2, [r7, #12]
  return result;
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	40d3      	lsrs	r3, r2
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_RCC_GetSysClockFreq+0xcc>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003558:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc4>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e004      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	623b      	str	r3, [r7, #32]
      break;
 8003578:	e002      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc4>)
 800357c:	623b      	str	r3, [r7, #32]
      break;
 800357e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003580:	6a3b      	ldr	r3, [r7, #32]
}
 8003582:	4618      	mov	r0, r3
 8003584:	372c      	adds	r7, #44	; 0x2c
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	007a1200 	.word	0x007a1200
 8003598:	08005494 	.word	0x08005494
 800359c:	080054a4 	.word	0x080054a4
 80035a0:	003d0900 	.word	0x003d0900

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035c2:	f7ff ffef 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c6:	4601      	mov	r1, r0
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	603a      	str	r2, [r7, #0]
  return result;
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	40d3      	lsrs	r3, r2
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	0800548c 	.word	0x0800548c

08003600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003606:	f7ff ffcd 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 800360a:	4601      	mov	r1, r0
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003614:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003618:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	fa92 f2a2 	rbit	r2, r2
 8003620:	603a      	str	r2, [r7, #0]
  return result;
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	fab2 f282 	clz	r2, r2
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	40d3      	lsrs	r3, r2
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x40>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	0800548c 	.word	0x0800548c

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b092      	sub	sp, #72	; 0x48
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80d4 	beq.w	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10e      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a4a      	ldr	r2, [pc, #296]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	61d3      	str	r3, [r2, #28]
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fe f941 	bl	8001930 <HAL_GetTick>
 80036ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fe f93d 	bl	8001930 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e169      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8084 	beq.w	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d07c      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2301      	movs	r3, #1
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	461a      	mov	r2, r3
 800373e:	2300      	movs	r3, #0
 8003740:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04b      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe f8ed 	bl	8001930 <HAL_GetTick>
 8003756:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe f8e9 	bl	8001930 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e113      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003770:	2302      	movs	r3, #2
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	2302      	movs	r3, #2
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	61fb      	str	r3, [r7, #28]
  return result;
 8003788:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d108      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800379e:	4b01      	ldr	r3, [pc, #4]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	e00d      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
 80037ac:	10908100 	.word	0x10908100
 80037b0:	2302      	movs	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	4b78      	ldr	r3, [pc, #480]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2202      	movs	r2, #2
 80037c2:	613a      	str	r2, [r7, #16]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	fa92 f2a2 	rbit	r2, r2
 80037ca:	60fa      	str	r2, [r7, #12]
  return result;
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	fab2 f282 	clz	r2, r2
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f002 021f 	and.w	r2, r2, #31
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0b7      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	496a      	ldr	r1, [pc, #424]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800381c:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f023 0203 	bic.w	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	495d      	ldr	r1, [pc, #372]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800383a:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4956      	ldr	r1, [pc, #344]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003858:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	494e      	ldr	r1, [pc, #312]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f023 0210 	bic.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4947      	ldr	r1, [pc, #284]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	493f      	ldr	r1, [pc, #252]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f023 0220 	bic.w	r2, r3, #32
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4938      	ldr	r1, [pc, #224]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	4930      	ldr	r1, [pc, #192]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ee:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4929      	ldr	r1, [pc, #164]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4921      	ldr	r1, [pc, #132]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	491a      	ldr	r1, [pc, #104]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	4912      	ldr	r1, [pc, #72]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	490b      	ldr	r1, [pc, #44]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3748      	adds	r7, #72	; 0x48
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e09d      	b.n	8003af2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d108      	bne.n	80039d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c6:	d009      	beq.n	80039dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
 80039ce:	e005      	b.n	80039dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fd faa8 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a1c:	d902      	bls.n	8003a24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e002      	b.n	8003a2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a32:	d007      	beq.n	8003a44 <HAL_SPI_Init+0xa0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	ea42 0103 	orr.w	r1, r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	f003 0204 	and.w	r2, r3, #4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ac0:	ea42 0103 	orr.w	r1, r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e049      	b.n	8003ba0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fd fa55 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f000 faa9 	bl	8004090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04a      	b.n	8003c56 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d018      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d013      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00e      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d009      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d115      	bne.n	8003c40 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d015      	beq.n	8003c52 <HAL_TIM_Base_Start_IT+0xaa>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d011      	beq.n	8003c52 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	e008      	b.n	8003c52 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e000      	b.n	8003c54 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	00010007 	.word	0x00010007

08003c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d122      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0202 	mvn.w	r2, #2
 8003ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9c8 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9ba 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f9cb 	bl	8004068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0204 	mvn.w	r2, #4
 8003cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f99e 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f990 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9a1 	bl	8004068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0208 	mvn.w	r2, #8
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2204      	movs	r2, #4
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f974 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f966 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f977 	bl	8004068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0210 	mvn.w	r2, #16
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2208      	movs	r2, #8
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f94a 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f93c 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f94d 	bl	8004068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0201 	mvn.w	r2, #1
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f916 	bl	800402c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d10e      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fae6 	bl	80043f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3a:	d10e      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fad9 	bl	800440c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d10e      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f8fb 	bl	800407c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d10e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0220 	mvn.w	r2, #32
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fa99 	bl	80043e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_ConfigClockSource+0x18>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0a8      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x16a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ef4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d067      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x124>
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d80b      	bhi.n	8003f2a <HAL_TIM_ConfigClockSource+0x70>
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d073      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x144>
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d802      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x66>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d06f      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f1e:	e078      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d06c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x144>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d06a      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003f28:	e073      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003f2a:	2b70      	cmp	r3, #112	; 0x70
 8003f2c:	d00d      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x90>
 8003f2e:	2b70      	cmp	r3, #112	; 0x70
 8003f30:	d804      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x82>
 8003f32:	2b50      	cmp	r3, #80	; 0x50
 8003f34:	d033      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xe4>
 8003f36:	2b60      	cmp	r3, #96	; 0x60
 8003f38:	d041      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003f3a:	e06a      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f40:	d066      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x156>
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f46:	d017      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003f48:	e063      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f000 f9a3 	bl	80042a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e04c      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 f98c 	bl	80042a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e039      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 f900 	bl	80041b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	; 0x50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f959 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e029      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 f91f 	bl	800420e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f949 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e019      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 f8e0 	bl	80041b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f939 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e009      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 f930 	bl	800426e <TIM_ITRx_SetConfig>
        break;
 800400e:	e000      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <TIM_Base_SetConfig+0x104>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a39      	ldr	r2, [pc, #228]	; (8004198 <TIM_Base_SetConfig+0x108>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a38      	ldr	r2, [pc, #224]	; (800419c <TIM_Base_SetConfig+0x10c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a37      	ldr	r2, [pc, #220]	; (80041a0 <TIM_Base_SetConfig+0x110>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <TIM_Base_SetConfig+0x104>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01b      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d017      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <TIM_Base_SetConfig+0x108>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <TIM_Base_SetConfig+0x10c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <TIM_Base_SetConfig+0x110>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00b      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <TIM_Base_SetConfig+0x118>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a25      	ldr	r2, [pc, #148]	; (80041ac <TIM_Base_SetConfig+0x11c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <TIM_Base_SetConfig+0x104>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00f      	beq.n	8004178 <TIM_Base_SetConfig+0xe8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <TIM_Base_SetConfig+0x110>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00b      	beq.n	8004178 <TIM_Base_SetConfig+0xe8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_Base_SetConfig+0xe8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0f      	ldr	r2, [pc, #60]	; (80041a8 <TIM_Base_SetConfig+0x118>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0xe8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <TIM_Base_SetConfig+0x11c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d103      	bne.n	8004180 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	615a      	str	r2, [r3, #20]
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40013400 	.word	0x40013400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800

080041b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 030a 	bic.w	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	031b      	lsls	r3, r3, #12
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	f043 0307 	orr.w	r3, r3, #7
 8004290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e063      	b.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d013      	beq.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a17      	ldr	r2, [pc, #92]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10c      	bne.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40013400 	.word	0x40013400
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40014000 	.word	0x40014000

080043e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e040      	b.n	80044b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc fdea 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa94 	bl	800498c <UART_SetConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e022      	b.n	80044b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fc5a 	bl	8004d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fce1 	bl	8004e74 <UART_CheckIdleState>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d12c      	bne.n	800452c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_Receive_IT+0x22>
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e025      	b.n	800452e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Receive_IT+0x34>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e01e      	b.n	800452e <HAL_UART_Receive_IT+0x72>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800451a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	461a      	mov	r2, r3
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fd6c 	bl	8005000 <UART_Start_Receive_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	e000      	b.n	800452e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	f640 030f 	movw	r3, #2063	; 0x80f
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 81cd 	beq.w	8004920 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
      }
      return;
 800458e:	e1c7      	b.n	8004920 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80e3 	beq.w	800475e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4ba5      	ldr	r3, [pc, #660]	; (800483c <HAL_UART_IRQHandler+0x304>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80d8 	beq.w	800475e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <HAL_UART_IRQHandler+0xa2>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <HAL_UART_IRQHandler+0xce>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2202      	movs	r2, #2
 80045f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d010      	beq.n	8004632 <HAL_UART_IRQHandler+0xfa>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800465e:	f043 0208 	orr.w	r2, r3, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466e:	2b00      	cmp	r3, #0
 8004670:	d011      	beq.n	8004696 <HAL_UART_IRQHandler+0x15e>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8141 	beq.w	8004924 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d004      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d031      	beq.n	800474a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fd00 	bl	80050ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d123      	bne.n	8004742 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004708:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a4a      	ldr	r2, [pc, #296]	; (8004840 <HAL_UART_IRQHandler+0x308>)
 8004718:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fa7e 	bl	8001c20 <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00f      	b.n	800475a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f910 	bl	8004960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00b      	b.n	800475a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f90c 	bl	8004960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e007      	b.n	800475a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f908 	bl	8004960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004758:	e0e4      	b.n	8004924 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475a:	bf00      	nop
    return;
 800475c:	e0e2      	b.n	8004924 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004762:	2b01      	cmp	r3, #1
 8004764:	f040 80a7 	bne.w	80048b6 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80a1 	beq.w	80048b6 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 809b 	beq.w	80048b6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2210      	movs	r2, #16
 8004786:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d156      	bne.n	8004844 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80c0 	beq.w	8004928 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047ae:	893a      	ldrh	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	f080 80b9 	bcs.w	8004928 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	893a      	ldrh	r2, [r7, #8]
 80047ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d02a      	beq.n	800481e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0210 	bic.w	r2, r2, #16
 8004812:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd f9c8 	bl	8001bae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800482a:	b29b      	uxth	r3, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f89e 	bl	8004974 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004838:	e076      	b.n	8004928 <HAL_UART_IRQHandler+0x3f0>
 800483a:	bf00      	nop
 800483c:	04000120 	.word	0x04000120
 8004840:	0800514b 	.word	0x0800514b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004850:	b29b      	uxth	r3, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d064      	beq.n	800492c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d061      	beq.n	800492c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004876:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0210 	bic.w	r2, r2, #16
 80048a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f860 	bl	8004974 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048b4:	e03a      	b.n	800492c <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <HAL_UART_IRQHandler+0x3a4>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fd3b 	bl	8005350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048da:	e02a      	b.n	8004932 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
    }
    return;
 8004900:	e016      	b.n	8004930 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <HAL_UART_IRQHandler+0x3fa>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fc2d 	bl	8005176 <UART_EndTransmit_IT>
    return;
 800491c:	bf00      	nop
 800491e:	e008      	b.n	8004932 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004920:	bf00      	nop
 8004922:	e006      	b.n	8004932 <HAL_UART_IRQHandler+0x3fa>
    return;
 8004924:	bf00      	nop
 8004926:	e004      	b.n	8004932 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004928:	bf00      	nop
 800492a:	e002      	b.n	8004932 <HAL_UART_IRQHandler+0x3fa>
      return;
 800492c:	bf00      	nop
 800492e:	e000      	b.n	8004932 <HAL_UART_IRQHandler+0x3fa>
    return;
 8004930:	bf00      	nop
  }

}
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049ba:	f023 030c 	bic.w	r3, r3, #12
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4aad      	ldr	r2, [pc, #692]	; (8004cbc <UART_SetConfig+0x330>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d121      	bne.n	8004a50 <UART_SetConfig+0xc4>
 8004a0c:	4bac      	ldr	r3, [pc, #688]	; (8004cc0 <UART_SetConfig+0x334>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d817      	bhi.n	8004a48 <UART_SetConfig+0xbc>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UART_SetConfig+0x94>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a3d 	.word	0x08004a3d
 8004a28:	08004a43 	.word	0x08004a43
 8004a2c:	08004a37 	.word	0x08004a37
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e0b2      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a36:	2302      	movs	r3, #2
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e0af      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e0ac      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a42:	2308      	movs	r3, #8
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e0a9      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	bf00      	nop
 8004a4e:	e0a5      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a9b      	ldr	r2, [pc, #620]	; (8004cc4 <UART_SetConfig+0x338>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d123      	bne.n	8004aa2 <UART_SetConfig+0x116>
 8004a5a:	4b99      	ldr	r3, [pc, #612]	; (8004cc0 <UART_SetConfig+0x334>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d012      	beq.n	8004a8e <UART_SetConfig+0x102>
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6c:	d802      	bhi.n	8004a74 <UART_SetConfig+0xe8>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <UART_SetConfig+0xf6>
 8004a72:	e012      	b.n	8004a9a <UART_SetConfig+0x10e>
 8004a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a78:	d00c      	beq.n	8004a94 <UART_SetConfig+0x108>
 8004a7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a7e:	d003      	beq.n	8004a88 <UART_SetConfig+0xfc>
 8004a80:	e00b      	b.n	8004a9a <UART_SetConfig+0x10e>
 8004a82:	2300      	movs	r3, #0
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e089      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e086      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	77fb      	strb	r3, [r7, #31]
 8004a92:	e083      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a94:	2308      	movs	r3, #8
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e080      	b.n	8004b9c <UART_SetConfig+0x210>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	bf00      	nop
 8004aa0:	e07c      	b.n	8004b9c <UART_SetConfig+0x210>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a88      	ldr	r2, [pc, #544]	; (8004cc8 <UART_SetConfig+0x33c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d123      	bne.n	8004af4 <UART_SetConfig+0x168>
 8004aac:	4b84      	ldr	r3, [pc, #528]	; (8004cc0 <UART_SetConfig+0x334>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ab8:	d012      	beq.n	8004ae0 <UART_SetConfig+0x154>
 8004aba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004abe:	d802      	bhi.n	8004ac6 <UART_SetConfig+0x13a>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <UART_SetConfig+0x148>
 8004ac4:	e012      	b.n	8004aec <UART_SetConfig+0x160>
 8004ac6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004aca:	d00c      	beq.n	8004ae6 <UART_SetConfig+0x15a>
 8004acc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad0:	d003      	beq.n	8004ada <UART_SetConfig+0x14e>
 8004ad2:	e00b      	b.n	8004aec <UART_SetConfig+0x160>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e060      	b.n	8004b9c <UART_SetConfig+0x210>
 8004ada:	2302      	movs	r3, #2
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e05d      	b.n	8004b9c <UART_SetConfig+0x210>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e05a      	b.n	8004b9c <UART_SetConfig+0x210>
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e057      	b.n	8004b9c <UART_SetConfig+0x210>
 8004aec:	2310      	movs	r3, #16
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	bf00      	nop
 8004af2:	e053      	b.n	8004b9c <UART_SetConfig+0x210>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a74      	ldr	r2, [pc, #464]	; (8004ccc <UART_SetConfig+0x340>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d123      	bne.n	8004b46 <UART_SetConfig+0x1ba>
 8004afe:	4b70      	ldr	r3, [pc, #448]	; (8004cc0 <UART_SetConfig+0x334>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0a:	d012      	beq.n	8004b32 <UART_SetConfig+0x1a6>
 8004b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b10:	d802      	bhi.n	8004b18 <UART_SetConfig+0x18c>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <UART_SetConfig+0x19a>
 8004b16:	e012      	b.n	8004b3e <UART_SetConfig+0x1b2>
 8004b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1c:	d00c      	beq.n	8004b38 <UART_SetConfig+0x1ac>
 8004b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b22:	d003      	beq.n	8004b2c <UART_SetConfig+0x1a0>
 8004b24:	e00b      	b.n	8004b3e <UART_SetConfig+0x1b2>
 8004b26:	2300      	movs	r3, #0
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e037      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e034      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b32:	2304      	movs	r3, #4
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e031      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e02e      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b3e:	2310      	movs	r3, #16
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	bf00      	nop
 8004b44:	e02a      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a61      	ldr	r2, [pc, #388]	; (8004cd0 <UART_SetConfig+0x344>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d123      	bne.n	8004b98 <UART_SetConfig+0x20c>
 8004b50:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <UART_SetConfig+0x334>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5c:	d012      	beq.n	8004b84 <UART_SetConfig+0x1f8>
 8004b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b62:	d802      	bhi.n	8004b6a <UART_SetConfig+0x1de>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <UART_SetConfig+0x1ec>
 8004b68:	e012      	b.n	8004b90 <UART_SetConfig+0x204>
 8004b6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b6e:	d00c      	beq.n	8004b8a <UART_SetConfig+0x1fe>
 8004b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b74:	d003      	beq.n	8004b7e <UART_SetConfig+0x1f2>
 8004b76:	e00b      	b.n	8004b90 <UART_SetConfig+0x204>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e00e      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e00b      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b84:	2304      	movs	r3, #4
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e008      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e005      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b90:	2310      	movs	r3, #16
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	bf00      	nop
 8004b96:	e001      	b.n	8004b9c <UART_SetConfig+0x210>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	d15d      	bne.n	8004c62 <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d828      	bhi.n	8004bfe <UART_SetConfig+0x272>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x228>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fe fcf0 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004bdc:	61b8      	str	r0, [r7, #24]
        break;
 8004bde:	e013      	b.n	8004c08 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fd0e 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e00f      	b.n	8004c08 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <UART_SetConfig+0x348>)
 8004bea:	61bb      	str	r3, [r7, #24]
        break;
 8004bec:	e00c      	b.n	8004c08 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe fc6f 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8004bf2:	61b8      	str	r0, [r7, #24]
        break;
 8004bf4:	e008      	b.n	8004c08 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e004      	b.n	8004c08 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77bb      	strb	r3, [r7, #30]
        break;
 8004c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8085 	beq.w	8004d1a <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	005a      	lsls	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d916      	bls.n	8004c5c <UART_SetConfig+0x2d0>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d212      	bcs.n	8004c5c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f023 030f 	bic.w	r3, r3, #15
 8004c3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	89fb      	ldrh	r3, [r7, #14]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	89fa      	ldrh	r2, [r7, #14]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	e05e      	b.n	8004d1a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	77bb      	strb	r3, [r7, #30]
 8004c60:	e05b      	b.n	8004d1a <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d837      	bhi.n	8004cd8 <UART_SetConfig+0x34c>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <UART_SetConfig+0x2e4>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cd9 	.word	0x08004cd9
 8004c80:	08004cab 	.word	0x08004cab
 8004c84:	08004cd9 	.word	0x08004cd9
 8004c88:	08004cd9 	.word	0x08004cd9
 8004c8c:	08004cd9 	.word	0x08004cd9
 8004c90:	08004cb3 	.word	0x08004cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c94:	f7fe fc92 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004c98:	61b8      	str	r0, [r7, #24]
        break;
 8004c9a:	e022      	b.n	8004ce2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c9c:	f7fe fcb0 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8004ca0:	61b8      	str	r0, [r7, #24]
        break;
 8004ca2:	e01e      	b.n	8004ce2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <UART_SetConfig+0x348>)
 8004ca6:	61bb      	str	r3, [r7, #24]
        break;
 8004ca8:	e01b      	b.n	8004ce2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004caa:	f7fe fc11 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8004cae:	61b8      	str	r0, [r7, #24]
        break;
 8004cb0:	e017      	b.n	8004ce2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb6:	61bb      	str	r3, [r7, #24]
        break;
 8004cb8:	e013      	b.n	8004ce2 <UART_SetConfig+0x356>
 8004cba:	bf00      	nop
 8004cbc:	40013800 	.word	0x40013800
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	40004800 	.word	0x40004800
 8004ccc:	40004c00 	.word	0x40004c00
 8004cd0:	40005000 	.word	0x40005000
 8004cd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	77bb      	strb	r3, [r7, #30]
        break;
 8004ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d018      	beq.n	8004d1a <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	085a      	lsrs	r2, r3, #1
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b0f      	cmp	r3, #15
 8004d02:	d908      	bls.n	8004d16 <UART_SetConfig+0x38a>
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d204      	bcs.n	8004d16 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	e001      	b.n	8004d1a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d26:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2e:	d10a      	bne.n	8004e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e84:	f7fc fd54 	bl	8001930 <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d10e      	bne.n	8004eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f82d 	bl	8004f06 <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e023      	b.n	8004efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d10e      	bne.n	8004ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f817 	bl	8004f06 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e00d      	b.n	8004efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	e05e      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1e:	d05a      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7fc fd06 	bl	8001930 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d302      	bcc.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11b      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e043      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02c      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8a:	d124      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d091      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005032:	d10e      	bne.n	8005052 <UART_Start_Receive_IT+0x52>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <UART_Start_Receive_IT+0x48>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005042:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005046:	e01a      	b.n	800507e <UART_Start_Receive_IT+0x7e>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	22ff      	movs	r2, #255	; 0xff
 800504c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005050:	e015      	b.n	800507e <UART_Start_Receive_IT+0x7e>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <UART_Start_Receive_IT+0x76>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <UART_Start_Receive_IT+0x6c>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800506a:	e008      	b.n	800507e <UART_Start_Receive_IT+0x7e>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	227f      	movs	r2, #127	; 0x7f
 8005070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005074:	e003      	b.n	800507e <UART_Start_Receive_IT+0x7e>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2222      	movs	r2, #34	; 0x22
 800508a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a4:	d107      	bne.n	80050b6 <UART_Start_Receive_IT+0xb6>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <UART_Start_Receive_IT+0xe4>)
 80050b2:	665a      	str	r2, [r3, #100]	; 0x64
 80050b4:	e002      	b.n	80050bc <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <UART_Start_Receive_IT+0xe8>)
 80050ba:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80050d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	0800527d 	.word	0x0800527d
 80050e8:	080051a9 	.word	0x080051a9

080050ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005102:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0210 	bic.w	r2, r2, #16
 800512a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff fbf9 	bl	8004960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fbcc 	bl	8004938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051bc:	2b22      	cmp	r3, #34	; 0x22
 80051be:	d151      	bne.n	8005264 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051c6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051c8:	89bb      	ldrh	r3, [r7, #12]
 80051ca:	b2d9      	uxtb	r1, r3
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	400a      	ands	r2, r1
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d138      	bne.n	8005274 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005210:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10f      	bne.n	8005256 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0210 	bic.w	r2, r2, #16
 8005244:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fb90 	bl	8004974 <HAL_UARTEx_RxEventCallback>
 8005254:	e002      	b.n	800525c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fb78 	bl	800494c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005262:	e007      	b.n	8005274 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0208 	orr.w	r2, r2, #8
 8005272:	619a      	str	r2, [r3, #24]
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800528a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005290:	2b22      	cmp	r3, #34	; 0x22
 8005292:	d151      	bne.n	8005338 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800529a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80052a2:	89ba      	ldrh	r2, [r7, #12]
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	4013      	ands	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	1c9a      	adds	r2, r3, #2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d138      	bne.n	8005348 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052e4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	2b01      	cmp	r3, #1
 8005308:	d10f      	bne.n	800532a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0210 	bic.w	r2, r2, #16
 8005318:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fb26 	bl	8004974 <HAL_UARTEx_RxEventCallback>
 8005328:	e002      	b.n	8005330 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fb0e 	bl	800494c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005336:	e007      	b.n	8005348 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0208 	orr.w	r2, r2, #8
 8005346:	619a      	str	r2, [r3, #24]
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800536c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005370:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	b29b      	uxth	r3, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	b29b      	uxth	r3, r3
 8005382:	4013      	ands	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800539a:	b084      	sub	sp, #16
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	f107 0014 	add.w	r0, r7, #20
 80053a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	b004      	add	sp, #16
 80053da:	4770      	bx	lr

080053dc <__libc_init_array>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	4e0d      	ldr	r6, [pc, #52]	; (8005414 <__libc_init_array+0x38>)
 80053e0:	4c0d      	ldr	r4, [pc, #52]	; (8005418 <__libc_init_array+0x3c>)
 80053e2:	1ba4      	subs	r4, r4, r6
 80053e4:	10a4      	asrs	r4, r4, #2
 80053e6:	2500      	movs	r5, #0
 80053e8:	42a5      	cmp	r5, r4
 80053ea:	d109      	bne.n	8005400 <__libc_init_array+0x24>
 80053ec:	4e0b      	ldr	r6, [pc, #44]	; (800541c <__libc_init_array+0x40>)
 80053ee:	4c0c      	ldr	r4, [pc, #48]	; (8005420 <__libc_init_array+0x44>)
 80053f0:	f000 f820 	bl	8005434 <_init>
 80053f4:	1ba4      	subs	r4, r4, r6
 80053f6:	10a4      	asrs	r4, r4, #2
 80053f8:	2500      	movs	r5, #0
 80053fa:	42a5      	cmp	r5, r4
 80053fc:	d105      	bne.n	800540a <__libc_init_array+0x2e>
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005404:	4798      	blx	r3
 8005406:	3501      	adds	r5, #1
 8005408:	e7ee      	b.n	80053e8 <__libc_init_array+0xc>
 800540a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800540e:	4798      	blx	r3
 8005410:	3501      	adds	r5, #1
 8005412:	e7f2      	b.n	80053fa <__libc_init_array+0x1e>
 8005414:	080054b4 	.word	0x080054b4
 8005418:	080054b4 	.word	0x080054b4
 800541c:	080054b4 	.word	0x080054b4
 8005420:	080054b8 	.word	0x080054b8

08005424 <memset>:
 8005424:	4402      	add	r2, r0
 8005426:	4603      	mov	r3, r0
 8005428:	4293      	cmp	r3, r2
 800542a:	d100      	bne.n	800542e <memset+0xa>
 800542c:	4770      	bx	lr
 800542e:	f803 1b01 	strb.w	r1, [r3], #1
 8005432:	e7f9      	b.n	8005428 <memset+0x4>

08005434 <_init>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr

08005440 <_fini>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr
