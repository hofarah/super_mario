
super_mario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800901c  0800901c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800901c  0800901c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800901c  0800901c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  20000090  080090b4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  080090b4  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aba7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003145  00000000  00000000  0003ac67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  0003ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  0003f550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020cda  00000000  00000000  00040ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014694  00000000  00000000  00061882  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7484  00000000  00000000  00075f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d39a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a84  00000000  00000000  0013d418  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00143e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00143ec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ee0 	.word	0x08008ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008ee0 	.word	0x08008ee0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af0a      	add	r7, sp, #40	; 0x28
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4603      	mov	r3, r0
 8000acc:	817b      	strh	r3, [r7, #10]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	813b      	strh	r3, [r7, #8]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <LiquidCrystal+0x90>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d019      	beq.n	8000b12 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000ade:	8939      	ldrh	r1, [r7, #8]
 8000ae0:	897a      	ldrh	r2, [r7, #10]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9308      	str	r3, [sp, #32]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9307      	str	r3, [sp, #28]
 8000aea:	2300      	movs	r3, #0
 8000aec:	9306      	str	r3, [sp, #24]
 8000aee:	2300      	movs	r3, #0
 8000af0:	9305      	str	r3, [sp, #20]
 8000af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000af4:	9304      	str	r3, [sp, #16]
 8000af6:	8c3b      	ldrh	r3, [r7, #32]
 8000af8:	9303      	str	r3, [sp, #12]
 8000afa:	8bbb      	ldrh	r3, [r7, #28]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	8b3b      	ldrh	r3, [r7, #24]
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	460b      	mov	r3, r1
 8000b08:	68f9      	ldr	r1, [r7, #12]
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 f820 	bl	8000b50 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000b10:	e018      	b.n	8000b44 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000b12:	8939      	ldrh	r1, [r7, #8]
 8000b14:	897a      	ldrh	r2, [r7, #10]
 8000b16:	2300      	movs	r3, #0
 8000b18:	9308      	str	r3, [sp, #32]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	9307      	str	r3, [sp, #28]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9306      	str	r3, [sp, #24]
 8000b22:	2300      	movs	r3, #0
 8000b24:	9305      	str	r3, [sp, #20]
 8000b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b28:	9304      	str	r3, [sp, #16]
 8000b2a:	8c3b      	ldrh	r3, [r7, #32]
 8000b2c:	9303      	str	r3, [sp, #12]
 8000b2e:	8bbb      	ldrh	r3, [r7, #28]
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	8b3b      	ldrh	r3, [r7, #24]
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	68f9      	ldr	r1, [r7, #12]
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f806 	bl	8000b50 <init>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000

08000b50 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	4611      	mov	r1, r2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <init+0x84>)
 8000b6a:	89bb      	ldrh	r3, [r7, #12]
 8000b6c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <init+0x88>)
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <init+0x8c>)
 8000b76:	8b3b      	ldrh	r3, [r7, #24]
 8000b78:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <init+0x90>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000b80:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <init+0x94>)
 8000b82:	8bbb      	ldrh	r3, [r7, #28]
 8000b84:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <init+0x94>)
 8000b88:	8c3b      	ldrh	r3, [r7, #32]
 8000b8a:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <init+0x94>)
 8000b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b90:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <init+0x94>)
 8000b94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b96:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <init+0x94>)
 8000b9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b9c:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <init+0x94>)
 8000ba0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ba2:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <init+0x94>)
 8000ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ba8:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <init+0x94>)
 8000bac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bae:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e002      	b.n	8000bc4 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <init+0x98>)
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	2010      	movs	r0, #16
 8000bc8:	f000 f810 	bl	8000bec <begin>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000110 	.word	0x20000110
 8000bd8:	200000f0 	.word	0x200000f0
 8000bdc:	2000010e 	.word	0x2000010e
 8000be0:	200000f4 	.word	0x200000f4
 8000be4:	200000fc 	.word	0x200000fc
 8000be8:	2000010d 	.word	0x2000010d

08000bec <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d906      	bls.n	8000c10 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000c02:	4b77      	ldr	r3, [pc, #476]	; (8000de0 <begin+0x1f4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <begin+0x1f4>)
 8000c0e:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000c10:	4a74      	ldr	r2, [pc, #464]	; (8000de4 <begin+0x1f8>)
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f988 	bl	8000f34 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000c24:	4b70      	ldr	r3, [pc, #448]	; (8000de8 <begin+0x1fc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d009      	beq.n	8000c40 <begin+0x54>
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d106      	bne.n	8000c40 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000c32:	4b6b      	ldr	r3, [pc, #428]	; (8000de0 <begin+0x1f4>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b68      	ldr	r3, [pc, #416]	; (8000de0 <begin+0x1f4>)
 8000c3e:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000c40:	f000 f8e4 	bl	8000e0c <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000c4c:	4b67      	ldr	r3, [pc, #412]	; (8000dec <begin+0x200>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d01b      	beq.n	8000c8c <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000c54:	4b66      	ldr	r3, [pc, #408]	; (8000df0 <begin+0x204>)
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	4b66      	ldr	r3, [pc, #408]	; (8000df4 <begin+0x208>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b65      	ldr	r3, [pc, #404]	; (8000df8 <begin+0x20c>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b64      	ldr	r3, [pc, #400]	; (8000dfc <begin+0x210>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b62      	ldr	r3, [pc, #392]	; (8000dfc <begin+0x210>)
 8000c72:	885b      	ldrh	r3, [r3, #2]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <begin+0x210>)
 8000c7a:	889b      	ldrh	r3, [r3, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <begin+0x210>)
 8000c82:	88db      	ldrh	r3, [r3, #6]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e02a      	b.n	8000ce2 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000c8c:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <begin+0x204>)
 8000c8e:	881a      	ldrh	r2, [r3, #0]
 8000c90:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <begin+0x208>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b57      	ldr	r3, [pc, #348]	; (8000df8 <begin+0x20c>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ca0:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <begin+0x210>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ca8:	4b54      	ldr	r3, [pc, #336]	; (8000dfc <begin+0x210>)
 8000caa:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000cb0:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <begin+0x210>)
 8000cb2:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000cb8:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <begin+0x210>)
 8000cba:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <begin+0x210>)
 8000cc2:	891b      	ldrh	r3, [r3, #8]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <begin+0x210>)
 8000cca:	895b      	ldrh	r3, [r3, #10]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <begin+0x210>)
 8000cd2:	899b      	ldrh	r3, [r3, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <begin+0x210>)
 8000cda:	89db      	ldrh	r3, [r3, #14]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ce0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <begin+0x214>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 ffc5 	bl	8004c7c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000cf2:	2032      	movs	r0, #50	; 0x32
 8000cf4:	f002 fafc 	bl	80032f0 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <begin+0x214>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <begin+0x204>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	f004 f934 	bl	8004f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000d08:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <begin+0x214>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <begin+0x20c>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f004 f92c 	bl	8004f70 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000d18:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <begin+0x208>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	2bff      	cmp	r3, #255	; 0xff
 8000d1e:	d007      	beq.n	8000d30 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000d20:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <begin+0x214>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <begin+0x208>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f004 f920 	bl	8004f70 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <begin+0x1f4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d115      	bne.n	8000d68 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 fa43 	bl	80011c8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000d42:	2005      	movs	r0, #5
 8000d44:	f002 fad4 	bl	80032f0 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 fa3d 	bl	80011c8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f002 face 	bl	80032f0 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 fa37 	bl	80011c8 <write4bits>
    HAL_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f002 fac8 	bl	80032f0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000d60:	2002      	movs	r0, #2
 8000d62:	f000 fa31 	bl	80011c8 <write4bits>
 8000d66:	e01d      	b.n	8000da4 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <begin+0x1f4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9a3 	bl	80010be <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f002 fab9 	bl	80032f0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <begin+0x1f4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	f043 0320 	orr.w	r3, r3, #32
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f998 	bl	80010be <command>
    HAL_Delay(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f002 faae 	bl	80032f0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <begin+0x1f4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f98d 	bl	80010be <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <begin+0x1f4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f985 	bl	80010be <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <begin+0x218>)
 8000db6:	2204      	movs	r2, #4
 8000db8:	701a      	strb	r2, [r3, #0]
  display();
 8000dba:	f000 f917 	bl	8000fec <display>

  // clear it off
  clear();
 8000dbe:	f000 f8d9 	bl	8000f74 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <begin+0x21c>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <begin+0x21c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f973 	bl	80010be <command>

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000010d 	.word	0x2000010d
 8000de4:	200000f9 	.word	0x200000f9
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000110 	.word	0x20000110
 8000df4:	200000f0 	.word	0x200000f0
 8000df8:	2000010e 	.word	0x2000010e
 8000dfc:	200000fc 	.word	0x200000fc
 8000e00:	200000f4 	.word	0x200000f4
 8000e04:	200000f8 	.word	0x200000f8
 8000e08:	2000010c 	.word	0x2000010c

08000e0c <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <enableClock+0x10c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1a:	d10c      	bne.n	8000e36 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <enableClock+0x110>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	4a3e      	ldr	r2, [pc, #248]	; (8000f1c <enableClock+0x110>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	6153      	str	r3, [r2, #20]
 8000e28:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <enableClock+0x110>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000e34:	e06a      	b.n	8000f0c <enableClock+0x100>
  else if(_port == GPIOB)
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <enableClock+0x10c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <enableClock+0x114>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d10c      	bne.n	8000e5a <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <enableClock+0x110>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <enableClock+0x110>)
 8000e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4a:	6153      	str	r3, [r2, #20]
 8000e4c:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <enableClock+0x110>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	69bb      	ldr	r3, [r7, #24]
}
 8000e58:	e058      	b.n	8000f0c <enableClock+0x100>
  else if(_port == GPIOB)
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <enableClock+0x10c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <enableClock+0x114>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d10c      	bne.n	8000e7e <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <enableClock+0x110>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <enableClock+0x110>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6e:	6153      	str	r3, [r2, #20]
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <enableClock+0x110>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
}
 8000e7c:	e046      	b.n	8000f0c <enableClock+0x100>
	else if(_port == GPIOC)
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <enableClock+0x10c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <enableClock+0x118>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d10c      	bne.n	8000ea2 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <enableClock+0x110>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <enableClock+0x110>)
 8000e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e92:	6153      	str	r3, [r2, #20]
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <enableClock+0x110>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
}
 8000ea0:	e034      	b.n	8000f0c <enableClock+0x100>
	else if(_port == GPIOD)
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <enableClock+0x10c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a20      	ldr	r2, [pc, #128]	; (8000f28 <enableClock+0x11c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d10c      	bne.n	8000ec6 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <enableClock+0x110>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <enableClock+0x110>)
 8000eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eb6:	6153      	str	r3, [r2, #20]
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <enableClock+0x110>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	e022      	b.n	8000f0c <enableClock+0x100>
	else if(_port == GPIOE)
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <enableClock+0x10c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <enableClock+0x120>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d10c      	bne.n	8000eea <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <enableClock+0x110>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <enableClock+0x110>)
 8000ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eda:	6153      	str	r3, [r2, #20]
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <enableClock+0x110>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
}
 8000ee8:	e010      	b.n	8000f0c <enableClock+0x100>
	else if(_port == GPIOF)
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <enableClock+0x10c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <enableClock+0x124>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d10b      	bne.n	8000f0c <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <enableClock+0x110>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <enableClock+0x110>)
 8000efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efe:	6153      	str	r3, [r2, #20]
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <enableClock+0x110>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	bf00      	nop
 8000f0e:	3724      	adds	r7, #36	; 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	200000f4 	.word	0x200000f4
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	48001000 	.word	0x48001000
 8000f30:	48001400 	.word	0x48001400

08000f34 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <setRowOffsets+0x3c>)
 8000f48:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <setRowOffsets+0x3c>)
 8000f50:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <setRowOffsets+0x3c>)
 8000f58:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <setRowOffsets+0x3c>)
 8000f60:	70da      	strb	r2, [r3, #3]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200000ec 	.word	0x200000ec

08000f74 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 f8a0 	bl	80010be <command>
  HAL_Delay(2);  // this command takes a long time!
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f002 f9b6 	bl	80032f0 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000f98:	2304      	movs	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d803      	bhi.n	8000fac <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <setCursor+0x5c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d303      	bcc.n	8000fbe <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <setCursor+0x5c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <setCursor+0x60>)
 8000fc2:	5cd2      	ldrb	r2, [r2, r3]
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f872 	bl	80010be <command>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000f9 	.word	0x200000f9
 8000fe8:	200000ec 	.word	0x200000ec

08000fec <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <display+0x28>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <display+0x28>)
 8000ffc:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <display+0x28>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f858 	bl	80010be <command>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000f8 	.word	0x200000f8

08001018 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <print+0x12>
 8001026:	2300      	movs	r3, #0
 8001028:	e01d      	b.n	8001066 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f8ce 	bl	80001d0 <strlen>
 8001034:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800103a:	e00c      	b.n	8001056 <print+0x3e>
    if (write(*buffer++)) n++;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	617a      	str	r2, [r7, #20]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f848 	bl	80010da <write>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <print+0x4a>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	613a      	str	r2, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ed      	bne.n	800103c <print+0x24>
 8001060:	e000      	b.n	8001064 <print+0x4c>
    else break;
 8001062:	bf00      	nop
  }
  return n;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	6039      	str	r1, [r7, #0]
 8001078:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	b25b      	sxtb	r3, r3
 8001088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108c:	b25b      	sxtb	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f814 	bl	80010be <command>
  for (int i=0; i<8; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e009      	b.n	80010b0 <createChar+0x42>
    write(charmap[i]);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f818 	bl	80010da <write>
  for (int i=0; i<8; i++) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	ddf2      	ble.n	800109c <createChar+0x2e>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f813 	bl	80010f8 <send>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <write>:

inline size_t write(uint8_t value) {
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f805 	bl	80010f8 <send>
  return 1; // assume sucess
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <send+0x6c>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <send+0x70>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	79ba      	ldrb	r2, [r7, #6]
 8001112:	4619      	mov	r1, r3
 8001114:	f003 ff2c 	bl	8004f70 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <send+0x74>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d007      	beq.n	8001130 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <send+0x6c>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <send+0x74>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	f003 ff20 	bl	8004f70 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <send+0x78>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <send+0x4e>
    write8bits(value); 
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f86c 	bl	800121c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001144:	e009      	b.n	800115a <send+0x62>
    write4bits(value>>4);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f83b 	bl	80011c8 <write4bits>
    write4bits(value);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f837 	bl	80011c8 <write4bits>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000f4 	.word	0x200000f4
 8001168:	20000110 	.word	0x20000110
 800116c:	200000f0 	.word	0x200000f0
 8001170:	2000010d 	.word	0x2000010d

08001174 <pulseEnable>:

void pulseEnable(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <pulseEnable+0x4c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <pulseEnable+0x50>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	f003 fef4 	bl	8004f70 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001188:	2001      	movs	r0, #1
 800118a:	f002 f8b1 	bl	80032f0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <pulseEnable+0x4c>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <pulseEnable+0x50>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	4619      	mov	r1, r3
 800119a:	f003 fee9 	bl	8004f70 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800119e:	2001      	movs	r0, #1
 80011a0:	f002 f8a6 	bl	80032f0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <pulseEnable+0x4c>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <pulseEnable+0x50>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	f003 fede 	bl	8004f70 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80011b4:	2001      	movs	r0, #1
 80011b6:	f002 f89b 	bl	80032f0 <HAL_Delay>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000f4 	.word	0x200000f4
 80011c4:	2000010e 	.word	0x2000010e

080011c8 <write4bits>:

void write4bits(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e013      	b.n	8001200 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <write4bits+0x4c>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <write4bits+0x50>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	fa42 f303 	asr.w	r3, r2, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	f003 febb 	bl	8004f70 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b03      	cmp	r3, #3
 8001204:	dde8      	ble.n	80011d8 <write4bits+0x10>
  }

  pulseEnable();
 8001206:	f7ff ffb5 	bl	8001174 <pulseEnable>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000f4 	.word	0x200000f4
 8001218:	200000fc 	.word	0x200000fc

0800121c <write8bits>:

void write8bits(uint8_t value) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e013      	b.n	8001254 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <write8bits+0x4c>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <write8bits+0x50>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	fa42 f303 	asr.w	r3, r2, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	f003 fe91 	bl	8004f70 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b07      	cmp	r3, #7
 8001258:	dde8      	ble.n	800122c <write8bits+0x10>
  }
  
  pulseEnable();
 800125a:	f7ff ff8b 	bl	8001174 <pulseEnable>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000f4 	.word	0x200000f4
 800126c:	200000fc 	.word	0x200000fc

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f001 ffd5 	bl	8003224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f8c7 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f000 fb09 	bl	8001894 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001282:	f000 f999 	bl	80015b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001286:	f000 f9d7 	bl	8001638 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800128a:	f000 fae1 	bl	8001850 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 800128e:	f000 faaf 	bl	80017f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001292:	f000 fa5d 	bl	8001750 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001296:	f000 f91f 	bl	80014d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800129a:	f000 fa0b 	bl	80016b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15,  1);
 800129e:	2201      	movs	r2, #1
 80012a0:	f248 01a1 	movw	r1, #32929	; 0x80a1
 80012a4:	484b      	ldr	r0, [pc, #300]	; (80013d4 <main+0x164>)
 80012a6:	f003 fe63 	bl	8004f70 <HAL_GPIO_WritePin>

    LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80012aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ae:	9303      	str	r3, [sp, #12]
 80012b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ce:	4841      	ldr	r0, [pc, #260]	; (80013d4 <main+0x164>)
 80012d0:	f7ff fbf4 	bl	8000abc <LiquidCrystal>
    begin(20, 4);
 80012d4:	2104      	movs	r1, #4
 80012d6:	2014      	movs	r0, #20
 80012d8:	f7ff fc88 	bl	8000bec <begin>
    clear();
 80012dc:	f7ff fe4a 	bl	8000f74 <clear>
    HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 80012e0:	2201      	movs	r2, #1
 80012e2:	493d      	ldr	r1, [pc, #244]	; (80013d8 <main+0x168>)
 80012e4:	483d      	ldr	r0, [pc, #244]	; (80013dc <main+0x16c>)
 80012e6:	f006 f99f 	bl	8007628 <HAL_UART_Receive_IT>
    unsigned char mario[] = {0x0F, 0x0E, 0x0E, 0x04, 0x1F, 0x04, 0x0E, 0x1B};
 80012ea:	4a3d      	ldr	r2, [pc, #244]	; (80013e0 <main+0x170>)
 80012ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f4:	e883 0003 	stmia.w	r3, {r0, r1}
    unsigned char brick[] = {0x1F, 0x15, 0x1F, 0x15, 0x1F, 0x15, 0x1F, 0x15};
 80012f8:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <main+0x174>)
 80012fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001302:	e883 0003 	stmia.w	r3, {r0, r1}
    unsigned char brickUp[] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
 8001306:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <main+0x178>)
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001310:	e883 0003 	stmia.w	r3, {r0, r1}
    unsigned char brickQuestion[] = {0x1F, 0x11, 0x17, 0x11, 0x1D, 0x1F, 0x1D, 0x1F};
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <main+0x17c>)
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131e:	e883 0003 	stmia.w	r3, {r0, r1}
    unsigned char flag[] = {0x10, 0x1C, 0x1E, 0x1F, 0x1C, 0x10, 0x10, 0x10};
 8001322:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <main+0x180>)
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132c:	e883 0003 	stmia.w	r3, {r0, r1}
    unsigned char mane[] = {0x1F, 0x1F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E};
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <main+0x184>)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133a:	e883 0003 	stmia.w	r3, {r0, r1}
    unsigned char zero[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
    unsigned char tigh[] = {
 8001348:	4a2b      	ldr	r2, [pc, #172]	; (80013f8 <main+0x188>)
 800134a:	463b      	mov	r3, r7
 800134c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001350:	e883 0003 	stmia.w	r3, {r0, r1}
     0x01,
     0x02,
     0x04,
     0x18
   };
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800135a:	4828      	ldr	r0, [pc, #160]	; (80013fc <main+0x18c>)
 800135c:	f003 fe08 	bl	8004f70 <HAL_GPIO_WritePin>
//    unsigned char downMid[] = {0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x07, 0x03, 0x03};
//    unsigned char upMid[] = {0x1C, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E};
//    unsigned char downRight[] = {0x10, 0x18, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18};
//    unsigned char upRight[] = {0x00, 0x10, 0x00, 0x10, 0x18, 0x10, 0x00, 0x00
//    };
    createChar(2, mario);
 8001360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001364:	4619      	mov	r1, r3
 8001366:	2002      	movs	r0, #2
 8001368:	f7ff fe81 	bl	800106e <createChar>
    createChar(3, brick);
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	4619      	mov	r1, r3
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff fe7b 	bl	800106e <createChar>
    createChar(4, brickUp);
 8001378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137c:	4619      	mov	r1, r3
 800137e:	2004      	movs	r0, #4
 8001380:	f7ff fe75 	bl	800106e <createChar>
    createChar(5, brickQuestion);
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	4619      	mov	r1, r3
 800138a:	2005      	movs	r0, #5
 800138c:	f7ff fe6f 	bl	800106e <createChar>
    createChar(6, flag);
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4619      	mov	r1, r3
 8001396:	2006      	movs	r0, #6
 8001398:	f7ff fe69 	bl	800106e <createChar>
    createChar(7, mane);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	2007      	movs	r0, #7
 80013a4:	f7ff fe63 	bl	800106e <createChar>
    createChar(0, zero);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fe5d 	bl	800106e <createChar>
    createChar(9, tigh);
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	2009      	movs	r0, #9
 80013ba:	f7ff fe58 	bl	800106e <createChar>
//    welcomePage[2][1] = 8;
//    welcomePage[3][2] = 9;
//    welcomePage[2][2] = 10;
//    welcomePage[2][3] = 12;
//    welcomePage[3][3] = 11;
    HAL_TIM_Base_Start_IT(&htim3);
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <main+0x190>)
 80013c0:	f005 fc14 	bl	8006bec <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <main+0x194>)
 80013c6:	f005 fc11 	bl	8006bec <HAL_TIM_Base_Start_IT>

    HAL_ADC_Start_IT(&hadc1);
 80013ca:	480f      	ldr	r0, [pc, #60]	; (8001408 <main+0x198>)
 80013cc:	f002 f9b0 	bl	8003730 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 80013d0:	e7fe      	b.n	80013d0 <main+0x160>
 80013d2:	bf00      	nop
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	2000033c 	.word	0x2000033c
 80013dc:	200003f0 	.word	0x200003f0
 80013e0:	08008ef8 	.word	0x08008ef8
 80013e4:	08008f00 	.word	0x08008f00
 80013e8:	08008f08 	.word	0x08008f08
 80013ec:	08008f10 	.word	0x08008f10
 80013f0:	08008f18 	.word	0x08008f18
 80013f4:	08008f20 	.word	0x08008f20
 80013f8:	08008f28 	.word	0x08008f28
 80013fc:	48001000 	.word	0x48001000
 8001400:	200002a0 	.word	0x200002a0
 8001404:	200003a4 	.word	0x200003a4
 8001408:	200002ec 	.word	0x200002ec

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b09e      	sub	sp, #120	; 0x78
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001416:	2228      	movs	r2, #40	; 0x28
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 f8be 	bl	800859c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	223c      	movs	r2, #60	; 0x3c
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f007 f8b0 	bl	800859c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800143c:	2303      	movs	r3, #3
 800143e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001440:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001444:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144a:	2301      	movs	r3, #1
 800144c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800145c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001460:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001466:	4618      	mov	r0, r3
 8001468:	f003 ffd0 	bl	800540c <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001472:	f000 fb09 	bl	8001a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800148c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fec2 	bl	800621c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800149e:	f000 faf3 	bl	8001a88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <SystemClock_Config+0xc8>)
 80014a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80014b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 f8e3 	bl	8006688 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014c8:	f000 fade 	bl	8001a88 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3778      	adds	r7, #120	; 0x78
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	000200a2 	.word	0x000200a2

080014d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <MX_ADC1_Init+0xdc>)
 80014fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_ADC1_Init+0xdc>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001516:	2200      	movs	r2, #0
 8001518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_ADC1_Init+0xdc>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_ADC1_Init+0xdc>)
 800152a:	2201      	movs	r2, #1
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001536:	2201      	movs	r2, #1
 8001538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_ADC1_Init+0xdc>)
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001544:	2204      	movs	r2, #4
 8001546:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_ADC1_Init+0xdc>)
 800154a:	2200      	movs	r2, #0
 800154c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001550:	2200      	movs	r2, #0
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001554:	4817      	ldr	r0, [pc, #92]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001556:	f001 ff0b 	bl	8003370 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001560:	f000 fa92 	bl	8001a88 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_ADC1_Init+0xdc>)
 8001570:	f003 f84c 	bl	800460c <HAL_ADCEx_MultiModeConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800157a:	f000 fa85 	bl	8001a88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800157e:	2302      	movs	r3, #2
 8001580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001582:	2301      	movs	r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800158a:	2307      	movs	r3, #7
 800158c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_ADC1_Init+0xdc>)
 800159c:	f002 fd4a 	bl	8004034 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80015a6:	f000 fa6f 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002ec 	.word	0x200002ec

080015b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_I2C1_Init+0x74>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_I2C1_Init+0x78>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_I2C1_Init+0x74>)
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <MX_I2C1_Init+0x7c>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_I2C1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_I2C1_Init+0x74>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_I2C1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_I2C1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_I2C1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <MX_I2C1_Init+0x74>)
 80015f4:	f003 fd06 	bl	8005004 <HAL_I2C_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015fe:	f000 fa43 	bl	8001a88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <MX_I2C1_Init+0x74>)
 8001606:	f003 fd8c 	bl	8005122 <HAL_I2CEx_ConfigAnalogFilter>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001610:	f000 fa3a 	bl	8001a88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001614:	2100      	movs	r1, #0
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_I2C1_Init+0x74>)
 8001618:	f003 fdce 	bl	80051b8 <HAL_I2CEx_ConfigDigitalFilter>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 fa31 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000114 	.word	0x20000114
 8001630:	40005400 	.word	0x40005400
 8001634:	2000090e 	.word	0x2000090e

08001638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_SPI1_Init+0x74>)
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <MX_SPI1_Init+0x78>)
 8001640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_SPI1_Init+0x74>)
 8001644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_SPI1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI1_Init+0x74>)
 8001652:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001656:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_SPI1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI1_Init+0x74>)
 8001666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_SPI1_Init+0x74>)
 800166e:	2208      	movs	r2, #8
 8001670:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_SPI1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_SPI1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_SPI1_Init+0x74>)
 8001686:	2207      	movs	r2, #7
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_SPI1_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI1_Init+0x74>)
 8001692:	2208      	movs	r2, #8
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_SPI1_Init+0x74>)
 8001698:	f005 f9a6 	bl	80069e8 <HAL_SPI_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016a2:	f000 f9f1 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000340 	.word	0x20000340
 80016b0:	40013000 	.word	0x40013000

080016b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_TIM2_Init+0x98>)
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_TIM2_Init+0x98>)
 80016dc:	2263      	movs	r2, #99	; 0x63
 80016de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM2_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_TIM2_Init+0x98>)
 80016e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_TIM2_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_TIM2_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fa:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_TIM2_Init+0x98>)
 80016fc:	f005 fa1f 	bl	8006b3e <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001706:	f000 f9bf 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_TIM2_Init+0x98>)
 8001718:	f005 fbf1 	bl	8006efe <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001722:	f000 f9b1 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_TIM2_Init+0x98>)
 8001734:	f005 fdf8 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800173e:	f000 f9a3 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003a4 	.word	0x200003a4

08001750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM3_Init+0x98>)
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <MX_TIM3_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1099;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM3_Init+0x98>)
 8001776:	f240 424b 	movw	r2, #1099	; 0x44b
 800177a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM3_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM3_Init+0x98>)
 8001784:	f242 7210 	movw	r2, #10000	; 0x2710
 8001788:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_TIM3_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_TIM3_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_TIM3_Init+0x98>)
 8001798:	f005 f9d1 	bl	8006b3e <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80017a2:	f000 f971 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM3_Init+0x98>)
 80017b4:	f005 fba3 	bl	8006efe <HAL_TIM_ConfigClockSource>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80017be:	f000 f963 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM3_Init+0x98>)
 80017d0:	f005 fdaa 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80017da:	f000 f955 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200002a0 	.word	0x200002a0
 80017ec:	40000400 	.word	0x40000400

080017f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART2_UART_Init+0x58>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_USART2_UART_Init+0x5c>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART2_UART_Init+0x58>)
 80017fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001834:	f005 fe16 	bl	8007464 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800183e:	f000 f923 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200003f0 	.word	0x200003f0
 800184c:	40004400 	.word	0x40004400

08001850 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <MX_USB_PCD_Init+0x3c>)
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <MX_USB_PCD_Init+0x40>)
 8001858:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USB_PCD_Init+0x3c>)
 800185c:	2208      	movs	r2, #8
 800185e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_USB_PCD_Init+0x3c>)
 8001862:	2202      	movs	r2, #2
 8001864:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USB_PCD_Init+0x3c>)
 8001868:	2202      	movs	r2, #2
 800186a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_USB_PCD_Init+0x3c>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USB_PCD_Init+0x3c>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_USB_PCD_Init+0x3c>)
 800187a:	f003 fce9 	bl	8005250 <HAL_PCD_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001884:	f000 f900 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000474 	.word	0x20000474
 8001890:	40005c00 	.word	0x40005c00

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018aa:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	4a6f      	ldr	r2, [pc, #444]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b4:	6153      	str	r3, [r2, #20]
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4a69      	ldr	r2, [pc, #420]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018cc:	6153      	str	r3, [r2, #20]
 80018ce:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4a63      	ldr	r2, [pc, #396]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e4:	6153      	str	r3, [r2, #20]
 80018e6:	4b61      	ldr	r3, [pc, #388]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b5e      	ldr	r3, [pc, #376]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 8001910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001914:	6153      	str	r3, [r2, #20]
 8001916:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6153      	str	r3, [r2, #20]
 800192e:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <MX_GPIO_Init+0x1d8>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800193a:	2200      	movs	r2, #0
 800193c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001940:	484b      	ldr	r0, [pc, #300]	; (8001a70 <MX_GPIO_Init+0x1dc>)
 8001942:	f003 fb15 	bl	8004f70 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001946:	2200      	movs	r2, #0
 8001948:	f241 010f 	movw	r1, #4111	; 0x100f
 800194c:	4849      	ldr	r0, [pc, #292]	; (8001a74 <MX_GPIO_Init+0x1e0>)
 800194e:	f003 fb0f 	bl	8004f70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001952:	2200      	movs	r2, #0
 8001954:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8001958:	4847      	ldr	r0, [pc, #284]	; (8001a78 <MX_GPIO_Init+0x1e4>)
 800195a:	f003 fb09 	bl	8004f70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2120      	movs	r1, #32
 8001962:	4846      	ldr	r0, [pc, #280]	; (8001a7c <MX_GPIO_Init+0x1e8>)
 8001964:	f003 fb04 	bl	8004f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT1_Pin;
 8001968:	2305      	movs	r3, #5
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800196c:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <MX_GPIO_Init+0x1ec>)
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	483d      	ldr	r0, [pc, #244]	; (8001a70 <MX_GPIO_Init+0x1dc>)
 800197c:	f003 f97e 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001980:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001984:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4835      	ldr	r0, [pc, #212]	; (8001a70 <MX_GPIO_Init+0x1dc>)
 800199a:	f003 f96f 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11;
 800199e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <MX_GPIO_Init+0x1f0>)
 80019a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a8:	2302      	movs	r3, #2
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4830      	ldr	r0, [pc, #192]	; (8001a74 <MX_GPIO_Init+0x1e0>)
 80019b4:	f003 f962 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019b8:	f241 030f 	movw	r3, #4111	; 0x100f
 80019bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4828      	ldr	r0, [pc, #160]	; (8001a74 <MX_GPIO_Init+0x1e0>)
 80019d2:	f003 f953 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f003 f946 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019f0:	2310      	movs	r3, #16
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <MX_GPIO_Init+0x1f0>)
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f8:	2302      	movs	r3, #2
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f003 f939 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001a0a:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001a0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4815      	ldr	r0, [pc, #84]	; (8001a78 <MX_GPIO_Init+0x1e4>)
 8001a24:	f003 f92a 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <MX_GPIO_Init+0x1e8>)
 8001a40:	f003 f91c 	bl	8004c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	200a      	movs	r0, #10
 8001a4a:	f003 f86a 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f003 f883 	bl	8004b5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2028      	movs	r0, #40	; 0x28
 8001a5a:	f003 f862 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a5e:	2028      	movs	r0, #40	; 0x28
 8001a60:	f003 f87b 	bl	8004b5a <HAL_NVIC_EnableIRQ>

}
 8001a64:	bf00      	nop
 8001a66:	3730      	adds	r7, #48	; 0x30
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48001000 	.word	0x48001000
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000c00 	.word	0x48000c00
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	10120000 	.word	0x10120000
 8001a84:	10110000 	.word	0x10110000

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001a8e:	e7fe      	b.n	8001a8e <Error_Handler+0x6>

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ac6:	2004      	movs	r0, #4
 8001ac8:	f003 f820 	bl	8004b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af8:	d12c      	bne.n	8001b54 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_ADC_MspInit+0x84>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_ADC_MspInit+0x84>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6153      	str	r3, [r2, #20]
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_ADC_MspInit+0x84>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_ADC_MspInit+0x84>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_ADC_MspInit+0x84>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_ADC_MspInit+0x84>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f003 f89c 	bl	8004c7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 7, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2107      	movs	r1, #7
 8001b48:	2012      	movs	r0, #18
 8001b4a:	f002 ffea 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b4e:	2012      	movs	r0, #18
 8001b50:	f003 f803 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_I2C_MspInit+0x7c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d127      	bne.n	8001bd2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_I2C_MspInit+0x80>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_I2C_MspInit+0x80>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_I2C_MspInit+0x80>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9e:	2312      	movs	r3, #18
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001baa:	2304      	movs	r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <HAL_I2C_MspInit+0x84>)
 8001bb6:	f003 f861 	bl	8004c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_I2C_MspInit+0x80>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_I2C_MspInit+0x80>)
 8001bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_I2C_MspInit+0x80>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40021000 	.word	0x40021000
 8001be4:	48000400 	.word	0x48000400

08001be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_SPI_MspInit+0x7c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d128      	bne.n	8001c5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001c3a:	23e0      	movs	r3, #224	; 0xe0
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f003 f810 	bl	8004c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40013000 	.word	0x40013000
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d114      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_TIM_Base_MspInit+0x78>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_TIM_Base_MspInit+0x78>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_TIM_Base_MspInit+0x78>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	f002 ff41 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca0:	201c      	movs	r0, #28
 8001ca2:	f002 ff5a 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ca6:	e018      	b.n	8001cda <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_TIM_Base_MspInit+0x7c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d113      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_TIM_Base_MspInit+0x78>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_TIM_Base_MspInit+0x78>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_TIM_Base_MspInit+0x78>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	201d      	movs	r0, #29
 8001cd0:	f002 ff27 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd4:	201d      	movs	r0, #29
 8001cd6:	f002 ff40 	bl	8004b5a <HAL_NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40000400 	.word	0x40000400

08001cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_UART_MspInit+0x8c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d130      	bne.n	8001d70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_UART_MspInit+0x90>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_UART_MspInit+0x90>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_UART_MspInit+0x90>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_UART_MspInit+0x90>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <HAL_UART_MspInit+0x90>)
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	6153      	str	r3, [r2, #20]
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_UART_MspInit+0x90>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5c:	f002 ff8e 	bl	8004c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2026      	movs	r0, #38	; 0x26
 8001d66:	f002 fedc 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d6a:	2026      	movs	r0, #38	; 0x26
 8001d6c:	f002 fef5 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40004400 	.word	0x40004400
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_PCD_MspInit+0x80>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d129      	bne.n	8001df6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_PCD_MspInit+0x84>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_PCD_MspInit+0x84>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_PCD_MspInit+0x84>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001dba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001dcc:	230e      	movs	r3, #14
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f002 ff4f 	bl	8004c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_PCD_MspInit+0x84>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_PCD_MspInit+0x84>)
 8001de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_PCD_MspInit+0x84>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005c00 	.word	0x40005c00
 8001e04:	40021000 	.word	0x40021000

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f001 fa2c 	bl	80032b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e60:	2010      	movs	r0, #16
 8001e62:	f003 f8b7 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	0000      	movs	r0, r0
 8001e6c:	0000      	movs	r0, r0
	...

08001e70 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

	if (timer%4==0){
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <ADC1_2_IRQHandler+0xb0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d140      	bne.n	8001f04 <ADC1_2_IRQHandler+0x94>
		int x=HAL_ADC_GetValue(&hadc1);
 8001e82:	4828      	ldr	r0, [pc, #160]	; (8001f24 <ADC1_2_IRQHandler+0xb4>)
 8001e84:	f001 fd94 	bl	80039b0 <HAL_ADC_GetValue>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	607b      	str	r3, [r7, #4]
		  int  fx=(int)((float)x*100/4095);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f28 <ADC1_2_IRQHandler+0xb8>
 8001e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e9e:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001f2c <ADC1_2_IRQHandler+0xbc>
 8001ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eaa:	ee17 3a90 	vmov	r3, s15
 8001eae:	603b      	str	r3, [r7, #0]
		gameSpeed=0.5+(fx*3.1/200);
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f7fe fb37 	bl	8000524 <__aeabi_i2d>
 8001eb6:	a318      	add	r3, pc, #96	; (adr r3, 8001f18 <ADC1_2_IRQHandler+0xa8>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <ADC1_2_IRQHandler+0xc0>)
 8001ece:	f7fe fcbd 	bl	800084c <__aeabi_ddiv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4621      	mov	r1, r4
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <ADC1_2_IRQHandler+0xc4>)
 8001ee0:	f7fe f9d4 	bl	800028c <__adddf3>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4621      	mov	r1, r4
 8001eec:	f7fe fd96 	bl	8000a1c <__aeabi_d2f>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <ADC1_2_IRQHandler+0xc8>)
 8001ef4:	601a      	str	r2, [r3, #0]
		           HAL_ADC_Start_IT(&hadc1);

		           return;
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <ADC1_2_IRQHandler+0xb4>)
 8001ef8:	f001 fd68 	bl	80039cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

           HAL_ADC_Start_IT(&hadc1);
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <ADC1_2_IRQHandler+0xb4>)
 8001efe:	f001 fc17 	bl	8003730 <HAL_ADC_Start_IT>
 8001f02:	e003      	b.n	8001f0c <ADC1_2_IRQHandler+0x9c>
		           HAL_ADC_Start_IT(&hadc1);
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <ADC1_2_IRQHandler+0xb4>)
 8001f06:	f001 fc13 	bl	8003730 <HAL_ADC_Start_IT>
		           return;
 8001f0a:	bf00      	nop
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	f3af 8000 	nop.w
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	4008cccc 	.word	0x4008cccc
 8001f20:	200000c4 	.word	0x200000c4
 8001f24:	200002ec 	.word	0x200002ec
 8001f28:	42c80000 	.word	0x42c80000
 8001f2c:	457ff000 	.word	0x457ff000
 8001f30:	40690000 	.word	0x40690000
 8001f34:	3fe00000 	.word	0x3fe00000
 8001f38:	20000008 	.word	0x20000008

08001f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <TIM2_IRQHandler+0x134>)
 8001f42:	f004 febd 	bl	8006cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if (x%4==0){
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <TIM2_IRQHandler+0x138>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d111      	bne.n	8001f76 <TIM2_IRQHandler+0x3a>
  		sevenSeg(0);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 fffe 	bl	8002f54 <sevenSeg>
  		BCDtoSev((int)gameSpeed);
 8001f58:	4b47      	ldr	r3, [pc, #284]	; (8002078 <TIM2_IRQHandler+0x13c>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f62:	ee17 0a90 	vmov	r0, s15
 8001f66:	f000 ffab 	bl	8002ec0 <BCDtoSev>
        HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	4843      	ldr	r0, [pc, #268]	; (800207c <TIM2_IRQHandler+0x140>)
 8001f70:	f002 fffe 	bl	8004f70 <HAL_GPIO_WritePin>
 8001f74:	e074      	b.n	8002060 <TIM2_IRQHandler+0x124>

  	}else
  	if (x%4==1){
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <TIM2_IRQHandler+0x138>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	425a      	negs	r2, r3
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	f002 0203 	and.w	r2, r2, #3
 8001f84:	bf58      	it	pl
 8001f86:	4253      	negpl	r3, r2
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11c      	bne.n	8001fc6 <TIM2_IRQHandler+0x8a>
  		sevenSeg(1);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f000 ffe1 	bl	8002f54 <sevenSeg>
  		BCDtoSev(((int)(gameSpeed*10))%10);
 8001f92:	4b39      	ldr	r3, [pc, #228]	; (8002078 <TIM2_IRQHandler+0x13c>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa4:	ee17 1a90 	vmov	r1, s15
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <TIM2_IRQHandler+0x144>)
 8001faa:	fb83 2301 	smull	r2, r3, r3, r1
 8001fae:	109a      	asrs	r2, r3, #2
 8001fb0:	17cb      	asrs	r3, r1, #31
 8001fb2:	1ad2      	subs	r2, r2, r3
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	1aca      	subs	r2, r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 ff7e 	bl	8002ec0 <BCDtoSev>
 8001fc4:	e04c      	b.n	8002060 <TIM2_IRQHandler+0x124>
  	}
  	else
  	if (x%4==2){
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <TIM2_IRQHandler+0x138>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	425a      	negs	r2, r3
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	bf58      	it	pl
 8001fd6:	4253      	negpl	r3, r2
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d11e      	bne.n	800201a <TIM2_IRQHandler+0xde>
  		sevenSeg(2);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f000 ffb9 	bl	8002f54 <sevenSeg>
  		BCDtoSev((score/10)%10);
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <TIM2_IRQHandler+0x148>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a26      	ldr	r2, [pc, #152]	; (8002080 <TIM2_IRQHandler+0x144>)
 8001fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fec:	1092      	asrs	r2, r2, #2
 8001fee:	17db      	asrs	r3, r3, #31
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <TIM2_IRQHandler+0x144>)
 8001ff4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ff8:	1099      	asrs	r1, r3, #2
 8001ffa:	17d3      	asrs	r3, r2, #31
 8001ffc:	1ac9      	subs	r1, r1, r3
 8001ffe:	460b      	mov	r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	1ad1      	subs	r1, r2, r3
 8002008:	4608      	mov	r0, r1
 800200a:	f000 ff59 	bl	8002ec0 <BCDtoSev>
        HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,1);
 800200e:	2201      	movs	r2, #1
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	481a      	ldr	r0, [pc, #104]	; (800207c <TIM2_IRQHandler+0x140>)
 8002014:	f002 ffac 	bl	8004f70 <HAL_GPIO_WritePin>
 8002018:	e022      	b.n	8002060 <TIM2_IRQHandler+0x124>

  	}
  	else
  	if (x%4==3){
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <TIM2_IRQHandler+0x138>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	425a      	negs	r2, r3
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	bf58      	it	pl
 800202a:	4253      	negpl	r3, r2
 800202c:	2b03      	cmp	r3, #3
 800202e:	d117      	bne.n	8002060 <TIM2_IRQHandler+0x124>
  		sevenSeg(3);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 ff8f 	bl	8002f54 <sevenSeg>
  		BCDtoSev(score%10);
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <TIM2_IRQHandler+0x148>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <TIM2_IRQHandler+0x144>)
 800203c:	fb83 1302 	smull	r1, r3, r3, r2
 8002040:	1099      	asrs	r1, r3, #2
 8002042:	17d3      	asrs	r3, r2, #31
 8002044:	1ac9      	subs	r1, r1, r3
 8002046:	460b      	mov	r3, r1
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	1ad1      	subs	r1, r2, r3
 8002050:	4608      	mov	r0, r1
 8002052:	f000 ff35 	bl	8002ec0 <BCDtoSev>
        HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,1);
 8002056:	2201      	movs	r2, #1
 8002058:	2140      	movs	r1, #64	; 0x40
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <TIM2_IRQHandler+0x140>)
 800205c:	f002 ff88 	bl	8004f70 <HAL_GPIO_WritePin>

  	}

  	x++;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <TIM2_IRQHandler+0x138>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <TIM2_IRQHandler+0x138>)
 8002068:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200003a4 	.word	0x200003a4
 8002074:	200000b0 	.word	0x200000b0
 8002078:	20000008 	.word	0x20000008
 800207c:	48000c00 	.word	0x48000c00
 8002080:	66666667 	.word	0x66666667
 8002084:	200000b8 	.word	0x200000b8

08002088 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800208e:	4857      	ldr	r0, [pc, #348]	; (80021ec <TIM3_IRQHandler+0x164>)
 8002090:	f004 fe16 	bl	8006cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

    timer++;
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <TIM3_IRQHandler+0x168>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <TIM3_IRQHandler+0x168>)
 800209c:	6013      	str	r3, [r2, #0]
    switch (gameMode) {
 800209e:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <TIM3_IRQHandler+0x16c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	2b07      	cmp	r3, #7
 80020a6:	f200 809d 	bhi.w	80021e4 <TIM3_IRQHandler+0x15c>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <TIM3_IRQHandler+0x28>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020d1 	.word	0x080020d1
 80020b4:	0800216f 	.word	0x0800216f
 80020b8:	08002197 	.word	0x08002197
 80020bc:	080021b9 	.word	0x080021b9
 80020c0:	080021cd 	.word	0x080021cd
 80020c4:	080021d3 	.word	0x080021d3
 80020c8:	080021d9 	.word	0x080021d9
 80020cc:	080021d9 	.word	0x080021d9
        case -1:
            for (int c = 0; c < 4; c++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	e028      	b.n	8002128 <TIM3_IRQHandler+0xa0>
                for (int i = 0; i < 20; i++) {
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	e01f      	b.n	800211c <TIM3_IRQHandler+0x94>
                    if (welcomePage[c][i] != 0) {
 80020dc:	4946      	ldr	r1, [pc, #280]	; (80021f8 <TIM3_IRQHandler+0x170>)
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d010      	beq.n	8002116 <TIM3_IRQHandler+0x8e>
                        setCursor(i, c);
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	6838      	ldr	r0, [r7, #0]
 80020f8:	f7fe ff46 	bl	8000f88 <setCursor>
                        write(welcomePage[c][i]);
 80020fc:	493e      	ldr	r1, [pc, #248]	; (80021f8 <TIM3_IRQHandler+0x170>)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe ffe2 	bl	80010da <write>
                for (int i = 0; i < 20; i++) {
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b13      	cmp	r3, #19
 8002120:	dddc      	ble.n	80020dc <TIM3_IRQHandler+0x54>
            for (int c = 0; c < 4; c++) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3301      	adds	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b03      	cmp	r3, #3
 800212c:	ddd3      	ble.n	80020d6 <TIM3_IRQHandler+0x4e>
                    }
                }
            }
            setCursor(4, 1);
 800212e:	2101      	movs	r1, #1
 8002130:	2004      	movs	r0, #4
 8002132:	f7fe ff29 	bl	8000f88 <setCursor>

//        	   print("s");
//            displayLcd(welcomePage, 0);
//            setCursor(6, 2);

            print("SUPER MARIO");
 8002136:	4831      	ldr	r0, [pc, #196]	; (80021fc <TIM3_IRQHandler+0x174>)
 8002138:	f7fe ff6e 	bl	8001018 <print>
            setCursor(5, 3);
 800213c:	2103      	movs	r1, #3
 800213e:	2005      	movs	r0, #5
 8002140:	f7fe ff22 	bl	8000f88 <setCursor>
            if (timer % 3 == 0) {
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <TIM3_IRQHandler+0x168>)
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <TIM3_IRQHandler+0x178>)
 800214a:	fb83 3201 	smull	r3, r2, r3, r1
 800214e:	17cb      	asrs	r3, r1, #31
 8002150:	1ad2      	subs	r2, r2, r3
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	1aca      	subs	r2, r1, r3
 800215a:	2a00      	cmp	r2, #0
 800215c:	d103      	bne.n	8002166 <TIM3_IRQHandler+0xde>
                print("press any key!");
 800215e:	4829      	ldr	r0, [pc, #164]	; (8002204 <TIM3_IRQHandler+0x17c>)
 8002160:	f7fe ff5a 	bl	8001018 <print>
            } else {
                print("              ");
            }


            break;
 8002164:	e03e      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
                print("              ");
 8002166:	4828      	ldr	r0, [pc, #160]	; (8002208 <TIM3_IRQHandler+0x180>)
 8002168:	f7fe ff56 	bl	8001018 <print>
            break;
 800216c:	e03a      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
        case 0:


            marioX = 2;
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <TIM3_IRQHandler+0x184>)
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
            marioY = 2;
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <TIM3_IRQHandler+0x188>)
 8002176:	2202      	movs	r2, #2
 8002178:	601a      	str	r2, [r3, #0]
            setCursor(0, 0);
 800217a:	2100      	movs	r1, #0
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe ff03 	bl	8000f88 <setCursor>
            createMap();
 8002182:	f000 fc97 	bl	8002ab4 <createMap>
            showMap();
 8002186:	f000 fbb9 	bl	80028fc <showMap>
            gameMode++;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <TIM3_IRQHandler+0x16c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <TIM3_IRQHandler+0x16c>)
 8002192:	6013      	str	r3, [r2, #0]

            break;
 8002194:	e026      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
        case 1:
            updateWindowMarioPosition();//change position of window and mario.mario locate according to window
 8002196:	f000 f8bd 	bl	8002314 <updateWindowMarioPosition>
            if (dir) {
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <TIM3_IRQHandler+0x18c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <TIM3_IRQHandler+0x12a>
                updateMarioPosition(dir);
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <TIM3_IRQHandler+0x18c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f972 	bl	8002490 <updateMarioPosition>
                dir = 0;
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <TIM3_IRQHandler+0x18c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

            }
            updateMap();
 80021b2:	f000 f9f5 	bl	80025a0 <updateMap>

            break;
 80021b6:	e015      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
        case 2:
            clear();
 80021b8:	f7fe fedc 	bl	8000f74 <clear>
            setCursor(2, 1);
 80021bc:	2101      	movs	r1, #1
 80021be:	2002      	movs	r0, #2
 80021c0:	f7fe fee2 	bl	8000f88 <setCursor>
            print("press o to resume");
 80021c4:	4814      	ldr	r0, [pc, #80]	; (8002218 <TIM3_IRQHandler+0x190>)
 80021c6:	f7fe ff27 	bl	8001018 <print>
            break;
 80021ca:	e00b      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
        case 3:
            gameOverPage();
 80021cc:	f000 fd46 	bl	8002c5c <gameOverPage>
            break;
 80021d0:	e008      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
        case 4:
            winGamePage();
 80021d2:	f000 fe19 	bl	8002e08 <winGamePage>
            break;
 80021d6:	e005      	b.n	80021e4 <TIM3_IRQHandler+0x15c>
        case 5:
            //TODO in show details page
        case 6:

            heartMarioPage();
 80021d8:	f000 fd30 	bl	8002c3c <heartMarioPage>
            gameMode = 0;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <TIM3_IRQHandler+0x16c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
            break;
 80021e2:	bf00      	nop
    }
  /* USER CODE END TIM3_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200002a0 	.word	0x200002a0
 80021f0:	200000c4 	.word	0x200000c4
 80021f4:	20000004 	.word	0x20000004
 80021f8:	20000160 	.word	0x20000160
 80021fc:	08008f30 	.word	0x08008f30
 8002200:	55555556 	.word	0x55555556
 8002204:	08008f3c 	.word	0x08008f3c
 8002208:	08008f4c 	.word	0x08008f4c
 800220c:	200000bc 	.word	0x200000bc
 8002210:	200000c0 	.word	0x200000c0
 8002214:	200000c8 	.word	0x200000c8
 8002218:	08008f5c 	.word	0x08008f5c

0800221c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002220:	4829      	ldr	r0, [pc, #164]	; (80022c8 <USART2_IRQHandler+0xac>)
 8002222:	f005 fa3f 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
    if (gameMode == -1) {
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <USART2_IRQHandler+0xb0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800222e:	d102      	bne.n	8002236 <USART2_IRQHandler+0x1a>
        gameMode = 0;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <USART2_IRQHandler+0xb0>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    }
    if (data[0] == 'r') {
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <USART2_IRQHandler+0xb4>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b72      	cmp	r3, #114	; 0x72
 800223c:	d105      	bne.n	800224a <USART2_IRQHandler+0x2e>
    	windowDir=1;
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <USART2_IRQHandler+0xb8>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
        dir = 1;
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <USART2_IRQHandler+0xbc>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    }

    if (data[0] == 'l') {
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <USART2_IRQHandler+0xb4>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b6c      	cmp	r3, #108	; 0x6c
 8002250:	d107      	bne.n	8002262 <USART2_IRQHandler+0x46>
    	windowDir=-1;
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <USART2_IRQHandler+0xb8>)
 8002254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002258:	601a      	str	r2, [r3, #0]
        dir = -1;
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <USART2_IRQHandler+0xbc>)
 800225c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002260:	601a      	str	r2, [r3, #0]
    }
    if (data[0] == 'p') {
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <USART2_IRQHandler+0xb4>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b70      	cmp	r3, #112	; 0x70
 8002268:	d102      	bne.n	8002270 <USART2_IRQHandler+0x54>
        gameMode = 2;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <USART2_IRQHandler+0xb0>)
 800226c:	2202      	movs	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
    }

    if (data[0] == 'o') {
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <USART2_IRQHandler+0xb4>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b6f      	cmp	r3, #111	; 0x6f
 8002276:	d102      	bne.n	800227e <USART2_IRQHandler+0x62>
        gameMode = 0;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <USART2_IRQHandler+0xb0>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    }

    if (data[0] == 'u') {
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <USART2_IRQHandler+0xb4>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b75      	cmp	r3, #117	; 0x75
 8002284:	d119      	bne.n	80022ba <USART2_IRQHandler+0x9e>
        //if under ario!=0

        if (lastLcd[marioY + 1][marioX] != 0) {
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <USART2_IRQHandler+0xc0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <USART2_IRQHandler+0xc4>)
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	4814      	ldr	r0, [pc, #80]	; (80022e4 <USART2_IRQHandler+0xc8>)
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <USART2_IRQHandler+0x9e>
        	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80022a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <USART2_IRQHandler+0xcc>)
 80022aa:	f002 fe79 	bl	8004fa0 <HAL_GPIO_TogglePin>
            jump = 1;
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <USART2_IRQHandler+0xd0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
            jumpLimit = 3;
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <USART2_IRQHandler+0xd4>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	601a      	str	r2, [r3, #0]
        }
    }
    HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 80022ba:	2201      	movs	r2, #1
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <USART2_IRQHandler+0xb4>)
 80022be:	4802      	ldr	r0, [pc, #8]	; (80022c8 <USART2_IRQHandler+0xac>)
 80022c0:	f005 f9b2 	bl	8007628 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200003f0 	.word	0x200003f0
 80022cc:	20000004 	.word	0x20000004
 80022d0:	2000033c 	.word	0x2000033c
 80022d4:	2000001c 	.word	0x2000001c
 80022d8:	200000c8 	.word	0x200000c8
 80022dc:	200000c0 	.word	0x200000c0
 80022e0:	200000bc 	.word	0x200000bc
 80022e4:	20000b20 	.word	0x20000b20
 80022e8:	48000800 	.word	0x48000800
 80022ec:	20000014 	.word	0x20000014
 80022f0:	20000018 	.word	0x20000018

080022f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022fc:	f002 fe6a 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002300:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002304:	f002 fe66 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002308:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800230c:	f002 fe62 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <updateWindowMarioPosition>:

/* USER CODE BEGIN 1 */
void updateWindowMarioPosition() {
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
    if (jump != 0) {
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <updateWindowMarioPosition+0x154>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d036      	beq.n	8002390 <updateWindowMarioPosition+0x7c>
        float check1 = w + (gameSpeed);
 8002322:	4b52      	ldr	r3, [pc, #328]	; (800246c <updateWindowMarioPosition+0x158>)
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	4b51      	ldr	r3, [pc, #324]	; (8002470 <updateWindowMarioPosition+0x15c>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	edc7 7a01 	vstr	s15, [r7, #4]
        if ((int) check1 != (int) w) {
 8002336:	edd7 7a01 	vldr	s15, [r7, #4]
 800233a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233e:	ee17 2a90 	vmov	r2, s15
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <updateWindowMarioPosition+0x158>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234c:	ee17 3a90 	vmov	r3, s15
 8002350:	429a      	cmp	r2, r3
 8002352:	d01a      	beq.n	800238a <updateWindowMarioPosition+0x76>
            if (marioY <= 0) {
 8002354:	4b47      	ldr	r3, [pc, #284]	; (8002474 <updateWindowMarioPosition+0x160>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	dc03      	bgt.n	8002364 <updateWindowMarioPosition+0x50>
                jump = -1;
 800235c:	4b42      	ldr	r3, [pc, #264]	; (8002468 <updateWindowMarioPosition+0x154>)
 800235e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002362:	601a      	str	r2, [r3, #0]
            }
            if (jump == 1) {
 8002364:	4b40      	ldr	r3, [pc, #256]	; (8002468 <updateWindowMarioPosition+0x154>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d104      	bne.n	8002376 <updateWindowMarioPosition+0x62>
                marioYTmp--;
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <updateWindowMarioPosition+0x164>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	4a41      	ldr	r2, [pc, #260]	; (8002478 <updateWindowMarioPosition+0x164>)
 8002374:	6013      	str	r3, [r2, #0]
            }
            if (jump == -1) {
 8002376:	4b3c      	ldr	r3, [pc, #240]	; (8002468 <updateWindowMarioPosition+0x154>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237e:	d104      	bne.n	800238a <updateWindowMarioPosition+0x76>
                marioYTmp++;
 8002380:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <updateWindowMarioPosition+0x164>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <updateWindowMarioPosition+0x164>)
 8002388:	6013      	str	r3, [r2, #0]
//            if (marioY == 2) {
//                jump = 0;
//            }

        }
        w = check1;
 800238a:	4a38      	ldr	r2, [pc, #224]	; (800246c <updateWindowMarioPosition+0x158>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6013      	str	r3, [r2, #0]
    }

    float check = willChangeMario + (gameSpeed / 4);
 8002390:	4b37      	ldr	r3, [pc, #220]	; (8002470 <updateWindowMarioPosition+0x15c>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800239a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <updateWindowMarioPosition+0x168>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	edc7 7a00 	vstr	s15, [r7]
    if ((int) check != (int) willChangeMario) {
 80023ac:	edd7 7a00 	vldr	s15, [r7]
 80023b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b4:	ee17 2a90 	vmov	r2, s15
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <updateWindowMarioPosition+0x168>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c2:	ee17 3a90 	vmov	r3, s15
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d045      	beq.n	8002456 <updateWindowMarioPosition+0x142>
        if (windowDir == 1) {
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <updateWindowMarioPosition+0x16c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11e      	bne.n	8002410 <updateWindowMarioPosition+0xfc>
            windowStart++;
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <updateWindowMarioPosition+0x170>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3301      	adds	r3, #1
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <updateWindowMarioPosition+0x170>)
 80023da:	6013      	str	r3, [r2, #0]
            windowEnd++;
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <updateWindowMarioPosition+0x174>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <updateWindowMarioPosition+0x174>)
 80023e4:	6013      	str	r3, [r2, #0]
            if (windowEnd > 60) {
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <updateWindowMarioPosition+0x174>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b3c      	cmp	r3, #60	; 0x3c
 80023ec:	dd0a      	ble.n	8002404 <updateWindowMarioPosition+0xf0>
                windowEnd = 60;
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <updateWindowMarioPosition+0x174>)
 80023f0:	223c      	movs	r2, #60	; 0x3c
 80023f2:	601a      	str	r2, [r3, #0]
                windowStart = 40;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <updateWindowMarioPosition+0x170>)
 80023f6:	2228      	movs	r2, #40	; 0x28
 80023f8:	601a      	str	r2, [r3, #0]
                marioX++;
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <updateWindowMarioPosition+0x178>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <updateWindowMarioPosition+0x178>)
 8002402:	6013      	str	r3, [r2, #0]
            }
            marioX--;
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <updateWindowMarioPosition+0x178>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3b01      	subs	r3, #1
 800240a:	4a20      	ldr	r2, [pc, #128]	; (800248c <updateWindowMarioPosition+0x178>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e022      	b.n	8002456 <updateWindowMarioPosition+0x142>
        } else if (windowDir == -1) {
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <updateWindowMarioPosition+0x16c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002418:	d11d      	bne.n	8002456 <updateWindowMarioPosition+0x142>
            windowStart--;
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <updateWindowMarioPosition+0x170>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <updateWindowMarioPosition+0x170>)
 8002422:	6013      	str	r3, [r2, #0]
            windowEnd--;
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <updateWindowMarioPosition+0x174>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <updateWindowMarioPosition+0x174>)
 800242c:	6013      	str	r3, [r2, #0]
            if (windowStart < 0) {
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <updateWindowMarioPosition+0x170>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	da0a      	bge.n	800244c <updateWindowMarioPosition+0x138>
                windowEnd = 20;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <updateWindowMarioPosition+0x174>)
 8002438:	2214      	movs	r2, #20
 800243a:	601a      	str	r2, [r3, #0]
                windowStart = 0;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <updateWindowMarioPosition+0x170>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
                marioX--;
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <updateWindowMarioPosition+0x178>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <updateWindowMarioPosition+0x178>)
 800244a:	6013      	str	r3, [r2, #0]
            }
            marioX++;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <updateWindowMarioPosition+0x178>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <updateWindowMarioPosition+0x178>)
 8002454:	6013      	str	r3, [r2, #0]
        }


    }

    willChangeMario = check;
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <updateWindowMarioPosition+0x168>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6013      	str	r3, [r2, #0]


}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	20000014 	.word	0x20000014
 800246c:	200000d4 	.word	0x200000d4
 8002470:	20000008 	.word	0x20000008
 8002474:	200000c0 	.word	0x200000c0
 8002478:	200000cc 	.word	0x200000cc
 800247c:	200000d8 	.word	0x200000d8
 8002480:	2000001c 	.word	0x2000001c
 8002484:	200000b4 	.word	0x200000b4
 8002488:	20000010 	.word	0x20000010
 800248c:	200000bc 	.word	0x200000bc

08002490 <updateMarioPosition>:

void updateMarioPosition(int dir) {
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
    //dir is -1(left) or +1(right)

    if (dir > 0) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	dd45      	ble.n	800252a <updateMarioPosition+0x9a>
        if (lastLcd[marioY][marioX + 1] == 0) {
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <updateMarioPosition+0xfc>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <updateMarioPosition+0x100>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	483a      	ldr	r0, [pc, #232]	; (8002594 <updateMarioPosition+0x104>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d123      	bne.n	8002504 <updateMarioPosition+0x74>
            if (lastLcd[marioY+1][marioX ]!=0) {
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <updateMarioPosition+0xfc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <updateMarioPosition+0x100>)
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	4833      	ldr	r0, [pc, #204]	; (8002594 <updateMarioPosition+0x104>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <updateMarioPosition+0x56>
                marioX++;
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <updateMarioPosition+0x100>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <updateMarioPosition+0x100>)
 80024e2:	6013      	str	r3, [r2, #0]
            marioX--;
        } else if (lastLcd[marioY][marioX - 1] == 6) {
            gameMode = 4;
        }
    }
}
 80024e4:	e04b      	b.n	800257e <updateMarioPosition+0xee>
            } else if (jumpLimit > 0) {
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <updateMarioPosition+0x108>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dd47      	ble.n	800257e <updateMarioPosition+0xee>
                marioX++;
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <updateMarioPosition+0x100>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <updateMarioPosition+0x100>)
 80024f6:	6013      	str	r3, [r2, #0]
                jumpLimit--;
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <updateMarioPosition+0x108>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <updateMarioPosition+0x108>)
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	e03c      	b.n	800257e <updateMarioPosition+0xee>
        } else if (lastLcd[marioY][marioX + 1] == 6) {
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <updateMarioPosition+0xfc>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <updateMarioPosition+0x100>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c59      	adds	r1, r3, #1
 800250e:	4821      	ldr	r0, [pc, #132]	; (8002594 <updateMarioPosition+0x104>)
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d12d      	bne.n	800257e <updateMarioPosition+0xee>
            gameMode = 4;
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <updateMarioPosition+0x10c>)
 8002524:	2204      	movs	r2, #4
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	e029      	b.n	800257e <updateMarioPosition+0xee>
    } else if (dir < 0) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	da26      	bge.n	800257e <updateMarioPosition+0xee>
        if (lastLcd[marioY][marioX - 1] == 0) {
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <updateMarioPosition+0xfc>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <updateMarioPosition+0x100>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1e59      	subs	r1, r3, #1
 800253a:	4816      	ldr	r0, [pc, #88]	; (8002594 <updateMarioPosition+0x104>)
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <updateMarioPosition+0xca>
            marioX--;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <updateMarioPosition+0x100>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3b01      	subs	r3, #1
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <updateMarioPosition+0x100>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	e011      	b.n	800257e <updateMarioPosition+0xee>
        } else if (lastLcd[marioY][marioX - 1] == 6) {
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <updateMarioPosition+0xfc>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <updateMarioPosition+0x100>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	480b      	ldr	r0, [pc, #44]	; (8002594 <updateMarioPosition+0x104>)
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002574:	2b06      	cmp	r3, #6
 8002576:	d102      	bne.n	800257e <updateMarioPosition+0xee>
            gameMode = 4;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <updateMarioPosition+0x10c>)
 800257a:	2204      	movs	r2, #4
 800257c:	601a      	str	r2, [r3, #0]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	200000c0 	.word	0x200000c0
 8002590:	200000bc 	.word	0x200000bc
 8002594:	20000b20 	.word	0x20000b20
 8002598:	20000018 	.word	0x20000018
 800259c:	20000004 	.word	0x20000004

080025a0 <updateMap>:

void updateMap() {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0f0      	sub	sp, #448	; 0x1c0
 80025a4:	af00      	add	r7, sp, #0
//	unsigned char h[100];
//	int s=sprintf(h,"%d",1);
//		HAL_UART_Transmit(&huart2, h, s, 1000);

    int show[4][20];
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 80025a6:	4bc6      	ldr	r3, [pc, #792]	; (80028c0 <updateMap+0x320>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80025b4:	e03b      	b.n	800262e <updateMap+0x8e>
        show[0][j] = map[0][i];
 80025b6:	4ac3      	ldr	r2, [pc, #780]	; (80028c4 <updateMap+0x324>)
 80025b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80025bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[1][j] = map[1][i];
 80025cc:	4abd      	ldr	r2, [pc, #756]	; (80028c4 <updateMap+0x324>)
 80025ce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80025d2:	333c      	adds	r3, #60	; 0x3c
 80025d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025e0:	3214      	adds	r2, #20
 80025e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[2][j] = map[2][i];
 80025e6:	4ab7      	ldr	r2, [pc, #732]	; (80028c4 <updateMap+0x324>)
 80025e8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80025ec:	3378      	adds	r3, #120	; 0x78
 80025ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025fa:	3228      	adds	r2, #40	; 0x28
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[3][j] = map[3][i];
 8002600:	4ab0      	ldr	r2, [pc, #704]	; (80028c4 <updateMap+0x324>)
 8002602:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002606:	33b4      	adds	r3, #180	; 0xb4
 8002608:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800260c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002610:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002614:	323c      	adds	r2, #60	; 0x3c
 8002616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 800261a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800261e:	3301      	adds	r3, #1
 8002620:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002624:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002628:	3301      	adds	r3, #1
 800262a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800262e:	4ba6      	ldr	r3, [pc, #664]	; (80028c8 <updateMap+0x328>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002636:	429a      	cmp	r2, r3
 8002638:	dbbd      	blt.n	80025b6 <updateMap+0x16>
    }
    if (show[marioY + marioYTmp][marioX] == 0) {
 800263a:	4ba4      	ldr	r3, [pc, #656]	; (80028cc <updateMap+0x32c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4ba4      	ldr	r3, [pc, #656]	; (80028d0 <updateMap+0x330>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	441a      	add	r2, r3
 8002644:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <updateMap+0x334>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4403      	add	r3, r0
 8002656:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10e      	bne.n	800267c <updateMap+0xdc>
        if (marioY + marioYTmp >= 0) {
 800265e:	4b9b      	ldr	r3, [pc, #620]	; (80028cc <updateMap+0x32c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b9b      	ldr	r3, [pc, #620]	; (80028d0 <updateMap+0x330>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	db4f      	blt.n	800270c <updateMap+0x16c>
            marioY += marioYTmp;
 800266c:	4b97      	ldr	r3, [pc, #604]	; (80028cc <updateMap+0x32c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b97      	ldr	r3, [pc, #604]	; (80028d0 <updateMap+0x330>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	4a95      	ldr	r2, [pc, #596]	; (80028cc <updateMap+0x32c>)
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e047      	b.n	800270c <updateMap+0x16c>

        }
    } else {
        if (jump == 1) {
 800267c:	4b96      	ldr	r3, [pc, #600]	; (80028d8 <updateMap+0x338>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d103      	bne.n	800268c <updateMap+0xec>
            jump = -1;
 8002684:	4b94      	ldr	r3, [pc, #592]	; (80028d8 <updateMap+0x338>)
 8002686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800268a:	601a      	str	r2, [r3, #0]
        }
        if (show[marioY - 1][marioX] == 5) {
 800268c:	4b8f      	ldr	r3, [pc, #572]	; (80028cc <updateMap+0x32c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	4b90      	ldr	r3, [pc, #576]	; (80028d4 <updateMap+0x334>)
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d11c      	bne.n	80026e6 <updateMap+0x146>
            score++;
 80026ac:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <updateMap+0x33c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a8a      	ldr	r2, [pc, #552]	; (80028dc <updateMap+0x33c>)
 80026b4:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80026b6:	2201      	movs	r2, #1
 80026b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026bc:	4888      	ldr	r0, [pc, #544]	; (80028e0 <updateMap+0x340>)
 80026be:	f002 fc57 	bl	8004f70 <HAL_GPIO_WritePin>
            unsigned char h[100];
            int sq = sprintf(h, "%d", score);
 80026c2:	4b86      	ldr	r3, [pc, #536]	; (80028dc <updateMap+0x33c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	463b      	mov	r3, r7
 80026c8:	4986      	ldr	r1, [pc, #536]	; (80028e4 <updateMap+0x344>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f005 ffc6 	bl	800865c <siprintf>
 80026d0:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            HAL_UART_Transmit(&huart2, h, sq, 1000);
 80026d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4639      	mov	r1, r7
 80026dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e0:	4881      	ldr	r0, [pc, #516]	; (80028e8 <updateMap+0x348>)
 80026e2:	f004 ff0d 	bl	8007500 <HAL_UART_Transmit>

        }
        if (show[marioY + 1][marioX] == 6) {
 80026e6:	4b79      	ldr	r3, [pc, #484]	; (80028cc <updateMap+0x32c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <updateMap+0x334>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4403      	add	r3, r0
 80026fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d102      	bne.n	800270c <updateMap+0x16c>
            gameMode = 4;
 8002706:	4b79      	ldr	r3, [pc, #484]	; (80028ec <updateMap+0x34c>)
 8002708:	2204      	movs	r2, #4
 800270a:	601a      	str	r2, [r3, #0]
        }
    }
    marioYTmp = 0;
 800270c:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <updateMap+0x330>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    show[marioY][marioX] = 2;
 8002712:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <updateMap+0x32c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <updateMap+0x334>)
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4403      	add	r3, r0
 8002728:	2202      	movs	r2, #2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    show[0][0] = 9;
 800272e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002732:	2209      	movs	r2, #9
 8002734:	601a      	str	r2, [r3, #0]
    show[1][0] = 9;
 8002736:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800273a:	2209      	movs	r2, #9
 800273c:	651a      	str	r2, [r3, #80]	; 0x50
    show[2][0] = 9;
 800273e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002742:	2209      	movs	r2, #9
 8002744:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    show[3][0] = 9;
 8002748:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800274c:	2209      	movs	r2, #9
 800274e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    for (int c = 0; c < 4; c++) {
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002758:	e042      	b.n	80027e0 <updateMap+0x240>
        for (int i = 0; i < 20; i++) {
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002760:	e035      	b.n	80027ce <updateMap+0x22e>
            if (lastLcd[c][i] != show[c][i]) {
 8002762:	4963      	ldr	r1, [pc, #396]	; (80028f0 <updateMap+0x350>)
 8002764:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002774:	4413      	add	r3, r2
 8002776:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800277a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800277e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800278e:	4413      	add	r3, r2
 8002790:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002794:	4299      	cmp	r1, r3
 8002796:	d015      	beq.n	80027c4 <updateMap+0x224>
                setCursor(i, c);
 8002798:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 800279c:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80027a0:	f7fe fbf2 	bl	8000f88 <setCursor>
                write(show[c][i]);
 80027a4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80027a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80027b8:	4413      	add	r3, r2
 80027ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc8b 	bl	80010da <write>
        for (int i = 0; i < 20; i++) {
 80027c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027c8:	3301      	adds	r3, #1
 80027ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80027ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027d2:	2b13      	cmp	r3, #19
 80027d4:	ddc5      	ble.n	8002762 <updateMap+0x1c2>
    for (int c = 0; c < 4; c++) {
 80027d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80027e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	ddb8      	ble.n	800275a <updateMap+0x1ba>
            }
        }
    }
    for (int c = 0; c < 4; c++) {
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80027ee:	e02a      	b.n	8002846 <updateMap+0x2a6>
        for (int i = 0; i < 20; i++) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80027f6:	e01d      	b.n	8002834 <updateMap+0x294>
            lastLcd[c][i] = show[c][i];
 80027f8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80027fc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800280c:	4413      	add	r3, r2
 800280e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002812:	4837      	ldr	r0, [pc, #220]	; (80028f0 <updateMap+0x350>)
 8002814:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002824:	4413      	add	r3, r2
 8002826:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (int i = 0; i < 20; i++) {
 800282a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800282e:	3301      	adds	r3, #1
 8002830:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002834:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002838:	2b13      	cmp	r3, #19
 800283a:	dddd      	ble.n	80027f8 <updateMap+0x258>
    for (int c = 0; c < 4; c++) {
 800283c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002840:	3301      	adds	r3, #1
 8002842:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002846:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800284a:	2b03      	cmp	r3, #3
 800284c:	ddd0      	ble.n	80027f0 <updateMap+0x250>
        }
    }
    marioLeftRight = 0;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <updateMap+0x354>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    if (marioY >= 3 || marioX <= 0) {
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <updateMap+0x32c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	dc03      	bgt.n	8002864 <updateMap+0x2c4>
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <updateMap+0x334>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	dc27      	bgt.n	80028b4 <updateMap+0x314>
        heart--;
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <updateMap+0x358>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <updateMap+0x358>)
 800286c:	6013      	str	r3, [r2, #0]
        decLed();
 800286e:	f000 fba7 	bl	8002fc0 <decLed>
        marioY = 2;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <updateMap+0x32c>)
 8002874:	2202      	movs	r2, #2
 8002876:	601a      	str	r2, [r3, #0]
        marioX = 2;
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <updateMap+0x334>)
 800287a:	2202      	movs	r2, #2
 800287c:	601a      	str	r2, [r3, #0]
        clear();
 800287e:	f7fe fb79 	bl	8000f74 <clear>
        if (heart == 0) {
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <updateMap+0x358>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <updateMap+0x2f2>
            gameMode = 3;
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <updateMap+0x34c>)
 800288c:	2203      	movs	r2, #3
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e002      	b.n	8002898 <updateMap+0x2f8>
        } else {
            gameMode = 6;
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <updateMap+0x34c>)
 8002894:	2206      	movs	r2, #6
 8002896:	601a      	str	r2, [r3, #0]
        }
        if (windowStart > 2) {
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <updateMap+0x320>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b02      	cmp	r3, #2
 800289e:	dd09      	ble.n	80028b4 <updateMap+0x314>
            windowStart -= 2;
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <updateMap+0x320>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3b02      	subs	r3, #2
 80028a6:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <updateMap+0x320>)
 80028a8:	6013      	str	r3, [r2, #0]
            windowEnd -= 2;
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <updateMap+0x328>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3b02      	subs	r3, #2
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <updateMap+0x328>)
 80028b2:	6013      	str	r3, [r2, #0]

        }
    }
}
 80028b4:	bf00      	nop
 80028b6:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200000b4 	.word	0x200000b4
 80028c4:	20000760 	.word	0x20000760
 80028c8:	20000010 	.word	0x20000010
 80028cc:	200000c0 	.word	0x200000c0
 80028d0:	200000cc 	.word	0x200000cc
 80028d4:	200000bc 	.word	0x200000bc
 80028d8:	20000014 	.word	0x20000014
 80028dc:	200000b8 	.word	0x200000b8
 80028e0:	48001000 	.word	0x48001000
 80028e4:	08008f70 	.word	0x08008f70
 80028e8:	200003f0 	.word	0x200003f0
 80028ec:	20000004 	.word	0x20000004
 80028f0:	20000b20 	.word	0x20000b20
 80028f4:	200000d0 	.word	0x200000d0
 80028f8:	2000000c 	.word	0x2000000c

080028fc <showMap>:

void showMap() {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b0d6      	sub	sp, #344	; 0x158
 8002900:	af00      	add	r7, sp, #0

    int show[4][20];
    if (windowEnd >= 59) {
 8002902:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <showMap+0x1a0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b3a      	cmp	r3, #58	; 0x3a
 8002908:	f300 80c2 	bgt.w	8002a90 <showMap+0x194>
        return;
    }
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 800290c:	4b64      	ldr	r3, [pc, #400]	; (8002aa0 <showMap+0x1a4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800291a:	e037      	b.n	800298c <showMap+0x90>
        show[0][j] = map[0][i];
 800291c:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <showMap+0x1a8>)
 800291e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002922:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002926:	463b      	mov	r3, r7
 8002928:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[1][j] = map[1][i];
 8002930:	4a5c      	ldr	r2, [pc, #368]	; (8002aa4 <showMap+0x1a8>)
 8002932:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002936:	333c      	adds	r3, #60	; 0x3c
 8002938:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800293c:	463b      	mov	r3, r7
 800293e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002942:	3214      	adds	r2, #20
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[2][j] = map[2][i];
 8002948:	4a56      	ldr	r2, [pc, #344]	; (8002aa4 <showMap+0x1a8>)
 800294a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800294e:	3378      	adds	r3, #120	; 0x78
 8002950:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002954:	463b      	mov	r3, r7
 8002956:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800295a:	3228      	adds	r2, #40	; 0x28
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        show[3][j] = map[3][i];
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <showMap+0x1a8>)
 8002962:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002966:	33b4      	adds	r3, #180	; 0xb4
 8002968:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800296c:	463b      	mov	r3, r7
 800296e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002972:	323c      	adds	r2, #60	; 0x3c
 8002974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = windowStart, j = 0; i < windowEnd; i++, j++) {
 8002978:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800297c:	3301      	adds	r3, #1
 800297e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002982:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002986:	3301      	adds	r3, #1
 8002988:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800298c:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <showMap+0x1a0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002994:	429a      	cmp	r2, r3
 8002996:	dbc1      	blt.n	800291c <showMap+0x20>
    }
    show[marioY][marioX] = 2;
 8002998:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <showMap+0x1ac>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <showMap+0x1b0>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4639      	mov	r1, r7
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	2202      	movs	r2, #2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    show[0][0] = 9;
 80029b2:	463b      	mov	r3, r7
 80029b4:	2209      	movs	r2, #9
 80029b6:	601a      	str	r2, [r3, #0]
    show[1][0] = 9;
 80029b8:	463b      	mov	r3, r7
 80029ba:	2209      	movs	r2, #9
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50
    show[2][0] = 9;
 80029be:	463b      	mov	r3, r7
 80029c0:	2209      	movs	r2, #9
 80029c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    show[3][0] = 9;
 80029c6:	463b      	mov	r3, r7
 80029c8:	2209      	movs	r2, #9
 80029ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    for (int c = 0; c < 4; c++) {
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029d4:	e025      	b.n	8002a22 <showMap+0x126>
        setCursor(0, c);
 80029d6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe fad4 	bl	8000f88 <setCursor>
        for (int i = 0; i < 20; i++) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80029e6:	e013      	b.n	8002a10 <showMap+0x114>
            write(show[c][i]);
 80029e8:	4639      	mov	r1, r7
 80029ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029fa:	4413      	add	r3, r2
 80029fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fb6a 	bl	80010da <write>
        for (int i = 0; i < 20; i++) {
 8002a06:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002a10:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002a14:	2b13      	cmp	r3, #19
 8002a16:	dde7      	ble.n	80029e8 <showMap+0xec>
    for (int c = 0; c < 4; c++) {
 8002a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	ddd5      	ble.n	80029d6 <showMap+0xda>

        }
    }
    for (int c = 0; c < 4; c++) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a30:	e029      	b.n	8002a86 <showMap+0x18a>
        for (int i = 0; i < 20; i++) {
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002a38:	e01c      	b.n	8002a74 <showMap+0x178>
            lastLcd[c][i] = show[c][i];
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002a52:	4817      	ldr	r0, [pc, #92]	; (8002ab0 <showMap+0x1b4>)
 8002a54:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002a64:	4413      	add	r3, r2
 8002a66:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (int i = 0; i < 20; i++) {
 8002a6a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002a74:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002a78:	2b13      	cmp	r3, #19
 8002a7a:	ddde      	ble.n	8002a3a <showMap+0x13e>
    for (int c = 0; c < 4; c++) {
 8002a7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a80:	3301      	adds	r3, #1
 8002a82:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a86:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	ddd1      	ble.n	8002a32 <showMap+0x136>
 8002a8e:	e000      	b.n	8002a92 <showMap+0x196>
        return;
 8002a90:	bf00      	nop
        }
    }
}
 8002a92:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000010 	.word	0x20000010
 8002aa0:	200000b4 	.word	0x200000b4
 8002aa4:	20000760 	.word	0x20000760
 8002aa8:	200000c0 	.word	0x200000c0
 8002aac:	200000bc 	.word	0x200000bc
 8002ab0:	20000b20 	.word	0x20000b20

08002ab4 <createMap>:
    map[2][17] = 6;
    map[2][26] = 7;

}

void createMap() {
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
    srand(time(NULL));
 8002aba:	2000      	movs	r0, #0
 8002abc:	f005 fdee 	bl	800869c <time>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f005 fd71 	bl	80085ac <srand>
    for (int i = 0; i < 4; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e016      	b.n	8002afe <createMap+0x4a>
        for (int j = 0; j < 60; j++) {
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e00d      	b.n	8002af2 <createMap+0x3e>
            map[i][j] = 0;
 8002ad6:	4955      	ldr	r1, [pc, #340]	; (8002c2c <createMap+0x178>)
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 60; j++) {
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	3301      	adds	r3, #1
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b3b      	cmp	r3, #59	; 0x3b
 8002af6:	ddee      	ble.n	8002ad6 <createMap+0x22>
    for (int i = 0; i < 4; i++) {
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	dde5      	ble.n	8002ad0 <createMap+0x1c>
        }
    }
    int r = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	603b      	str	r3, [r7, #0]
    for (int i = 4; i < 60; i++) {
 8002b08:	2304      	movs	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e022      	b.n	8002b54 <createMap+0xa0>
        r = rand();
 8002b0e:	f005 fd71 	bl	80085f4 <rand>
 8002b12:	6038      	str	r0, [r7, #0]
        if (r % 7 == 0) {
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <createMap+0x17c>)
 8002b18:	fb83 1302 	smull	r1, r3, r3, r2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	1099      	asrs	r1, r3, #2
 8002b20:	17d3      	asrs	r3, r2, #31
 8002b22:	1ac9      	subs	r1, r1, r3
 8002b24:	460b      	mov	r3, r1
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a5b      	subs	r3, r3, r1
 8002b2a:	1ad1      	subs	r1, r2, r3
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d104      	bne.n	8002b3a <createMap+0x86>
            map[0][i] = 4;//brick
 8002b30:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <createMap+0x178>)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2104      	movs	r1, #4
 8002b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
        if (r % 8 == 0) {
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <createMap+0x9a>
            map[0][i] = 5;//?
 8002b44:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <createMap+0x178>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2105      	movs	r1, #5
 8002b4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 4; i < 60; i++) {
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b3b      	cmp	r3, #59	; 0x3b
 8002b58:	ddd9      	ble.n	8002b0e <createMap+0x5a>
        }

    }

    for (int i = 0; i < 60; i++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	e023      	b.n	8002ba8 <createMap+0xf4>
        r = rand();
 8002b60:	f005 fd48 	bl	80085f4 <rand>
 8002b64:	6038      	str	r0, [r7, #0]
        if (r % 12 == 0 && i > 4) {
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <createMap+0x180>)
 8002b6a:	fb83 2301 	smull	r2, r3, r3, r1
 8002b6e:	105a      	asrs	r2, r3, #1
 8002b70:	17cb      	asrs	r3, r1, #31
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	1aca      	subs	r2, r1, r3
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d109      	bne.n	8002b96 <createMap+0xe2>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	dd06      	ble.n	8002b96 <createMap+0xe2>
            map[3][i] = 0;//hole
 8002b88:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <createMap+0x178>)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	33b4      	adds	r3, #180	; 0xb4
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002b94:	e005      	b.n	8002ba2 <createMap+0xee>

        } else {
            map[3][i] = 3;//ground
 8002b96:	4a25      	ldr	r2, [pc, #148]	; (8002c2c <createMap+0x178>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	33b4      	adds	r3, #180	; 0xb4
 8002b9c:	2103      	movs	r1, #3
 8002b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 60; i++) {
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b3b      	cmp	r3, #59	; 0x3b
 8002bac:	ddd8      	ble.n	8002b60 <createMap+0xac>

        }

    }
    for (int i = 4; i < 60; i++) {
 8002bae:	2304      	movs	r3, #4
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	e01f      	b.n	8002bf4 <createMap+0x140>
        r = rand();
 8002bb4:	f005 fd1e 	bl	80085f4 <rand>
 8002bb8:	6038      	str	r0, [r7, #0]
        if (r % 5 == 0 && map[3][i] == 3) {
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <createMap+0x184>)
 8002bbe:	fb83 2301 	smull	r2, r3, r3, r1
 8002bc2:	105a      	asrs	r2, r3, #1
 8002bc4:	17cb      	asrs	r3, r1, #31
 8002bc6:	1ad2      	subs	r2, r2, r3
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	1aca      	subs	r2, r1, r3
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	d10c      	bne.n	8002bee <createMap+0x13a>
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <createMap+0x178>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	33b4      	adds	r3, #180	; 0xb4
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d105      	bne.n	8002bee <createMap+0x13a>
            map[2][i] = 7;//mane
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <createMap+0x178>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3378      	adds	r3, #120	; 0x78
 8002be8:	2107      	movs	r1, #7
 8002bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 4; i < 60; i++) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b3b      	cmp	r3, #59	; 0x3b
 8002bf8:	dddc      	ble.n	8002bb4 <createMap+0x100>
        }
    }
    map[2][57] = 6;//flag
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <createMap+0x178>)
 8002bfc:	2206      	movs	r2, #6
 8002bfe:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    map[2][58] = 0;//empty
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <createMap+0x178>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
    map[2][59] = 0;//empty
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <createMap+0x178>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
    map[3][58] = 3;
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <createMap+0x178>)
 8002c14:	2203      	movs	r2, #3
 8002c16:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    map[3][59] = 3;
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <createMap+0x178>)
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000760 	.word	0x20000760
 8002c30:	92492493 	.word	0x92492493
 8002c34:	2aaaaaab 	.word	0x2aaaaaab
 8002c38:	66666667 	.word	0x66666667

08002c3c <heartMarioPage>:

void heartMarioPage() {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
    clear();
 8002c40:	f7fe f998 	bl	8000f74 <clear>
    setCursor(3, 1);
 8002c44:	2101      	movs	r1, #1
 8002c46:	2003      	movs	r0, #3
 8002c48:	f7fe f99e 	bl	8000f88 <setCursor>
    print("OPS! YOU LOST!");
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <heartMarioPage+0x1c>)
 8002c4e:	f7fe f9e3 	bl	8001018 <print>

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	08008f74 	.word	0x08008f74

08002c5c <gameOverPage>:

void gameOverPage() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b0d2      	sub	sp, #328	; 0x148
 8002c60:	af00      	add	r7, sp, #0
    int s[4][20];
    for (int c = 0; c < 4; c++) {
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c68:	e01e      	b.n	8002ca8 <gameOverPage+0x4c>
        for (int i = 0; i < 20; i++) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002c70:	e011      	b.n	8002c96 <gameOverPage+0x3a>
            s[c][i] = 0;
 8002c72:	4639      	mov	r1, r7
 8002c74:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002c84:	4413      	add	r3, r2
 8002c86:	2200      	movs	r2, #0
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 20; i++) {
 8002c8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002c90:	3301      	adds	r3, #1
 8002c92:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002c96:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002c9a:	2b13      	cmp	r3, #19
 8002c9c:	dde9      	ble.n	8002c72 <gameOverPage+0x16>
    for (int c = 0; c < 4; c++) {
 8002c9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ca8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	dddc      	ble.n	8002c6a <gameOverPage+0xe>
        }
    }
    s[1][5] = 71;
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	2247      	movs	r2, #71	; 0x47
 8002cb4:	665a      	str	r2, [r3, #100]	; 0x64
    s[1][6] = 65;
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	2241      	movs	r2, #65	; 0x41
 8002cba:	669a      	str	r2, [r3, #104]	; 0x68
    s[1][7] = 77;
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	224d      	movs	r2, #77	; 0x4d
 8002cc0:	66da      	str	r2, [r3, #108]	; 0x6c
    s[1][8] = 69;
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	2245      	movs	r2, #69	; 0x45
 8002cc6:	671a      	str	r2, [r3, #112]	; 0x70
    s[1][9] = 32;
 8002cc8:	463b      	mov	r3, r7
 8002cca:	2220      	movs	r2, #32
 8002ccc:	675a      	str	r2, [r3, #116]	; 0x74
    s[1][10] = 79;
 8002cce:	463b      	mov	r3, r7
 8002cd0:	224f      	movs	r2, #79	; 0x4f
 8002cd2:	679a      	str	r2, [r3, #120]	; 0x78
    s[1][11] = 86;
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	2256      	movs	r2, #86	; 0x56
 8002cd8:	67da      	str	r2, [r3, #124]	; 0x7c
    s[1][12] = 69;
 8002cda:	463b      	mov	r3, r7
 8002cdc:	2245      	movs	r2, #69	; 0x45
 8002cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    s[1][13] = 82;
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	2252      	movs	r2, #82	; 0x52
 8002ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//    s[3][0]=97;

    displayLcd(s, 1);
 8002cea:	463b      	mov	r3, r7
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f806 	bl	8002d00 <displayLcd>
}
 8002cf4:	bf00      	nop
 8002cf6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <displayLcd>:

void displayLcd(int arr[4][20], int type) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
    for (int c = 0; c < 4; c++) {
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e04a      	b.n	8002da6 <displayLcd+0xa6>
        for (int i = 0; i < 20; i++) {
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e041      	b.n	8002d9a <displayLcd+0x9a>
            if (lastLcd[c][i] != arr[c][i]) {
 8002d16:	493b      	ldr	r1, [pc, #236]	; (8002e04 <displayLcd+0x104>)
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4413      	add	r3, r2
 8002d26:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d40:	4299      	cmp	r1, r3
 8002d42:	d027      	beq.n	8002d94 <displayLcd+0x94>
                setCursor(i, c);
 8002d44:	69f9      	ldr	r1, [r7, #28]
 8002d46:	69b8      	ldr	r0, [r7, #24]
 8002d48:	f7fe f91e 	bl	8000f88 <setCursor>
                if (type == 0) {
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <displayLcd+0x70>
                    write(arr[c][i]);
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f9b6 	bl	80010da <write>
 8002d6e:	e011      	b.n	8002d94 <displayLcd+0x94>
                } else {
                    char q[1];
                    q[0] = (char) arr[c][i];
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	733b      	strb	r3, [r7, #12]
                    print(q);
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe f942 	bl	8001018 <print>
        for (int i = 0; i < 20; i++) {
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b13      	cmp	r3, #19
 8002d9e:	ddba      	ble.n	8002d16 <displayLcd+0x16>
    for (int c = 0; c < 4; c++) {
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	ddb1      	ble.n	8002d10 <displayLcd+0x10>
                }
            }
        }
    }
    for (int c = 0; c < 4; c++) {
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e020      	b.n	8002df4 <displayLcd+0xf4>
        for (int i = 0; i < 20; i++) {
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	e017      	b.n	8002de8 <displayLcd+0xe8>
            lastLcd[c][i] = arr[c][i];
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002dce:	480d      	ldr	r0, [pc, #52]	; (8002e04 <displayLcd+0x104>)
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (int i = 0; i < 20; i++) {
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3301      	adds	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b13      	cmp	r3, #19
 8002dec:	dde4      	ble.n	8002db8 <displayLcd+0xb8>
    for (int c = 0; c < 4; c++) {
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	dddb      	ble.n	8002db2 <displayLcd+0xb2>
        }
    }
}
 8002dfa:	bf00      	nop
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000b20 	.word	0x20000b20

08002e08 <winGamePage>:

void winGamePage() {
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b09b      	sub	sp, #108	; 0x6c
 8002e0c:	af00      	add	r7, sp, #0
    clear();
 8002e0e:	f7fe f8b1 	bl	8000f74 <clear>
    setCursor(5, 1);
 8002e12:	2101      	movs	r1, #1
 8002e14:	2005      	movs	r0, #5
 8002e16:	f7fe f8b7 	bl	8000f88 <setCursor>
    print("YOU WON!!!");
 8002e1a:	4822      	ldr	r0, [pc, #136]	; (8002ea4 <winGamePage+0x9c>)
 8002e1c:	f7fe f8fc 	bl	8001018 <print>
    setCursor(4, 2);
 8002e20:	2102      	movs	r1, #2
 8002e22:	2004      	movs	r0, #4
 8002e24:	f7fe f8b0 	bl	8000f88 <setCursor>
    unsigned char h[100];
    sprintf(h, "YOUR SCORE:%d", score);
 8002e28:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <winGamePage+0xa0>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	491f      	ldr	r1, [pc, #124]	; (8002eac <winGamePage+0xa4>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fc13 	bl	800865c <siprintf>
    print(h);
 8002e36:	463b      	mov	r3, r7
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f8ed 	bl	8001018 <print>
    setCursor(4, 3);
 8002e3e:	2103      	movs	r1, #3
 8002e40:	2004      	movs	r0, #4
 8002e42:	f7fe f8a1 	bl	8000f88 <setCursor>
    int t = timer / 4;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <winGamePage+0xa8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da00      	bge.n	8002e50 <winGamePage+0x48>
 8002e4e:	3303      	adds	r3, #3
 8002e50:	109b      	asrs	r3, r3, #2
 8002e52:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf(h, "YOUR TIME:%d:%d", (t / 60), (t % 60));
 8002e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <winGamePage+0xac>)
 8002e58:	fb82 1203 	smull	r1, r2, r2, r3
 8002e5c:	441a      	add	r2, r3
 8002e5e:	1152      	asrs	r2, r2, #5
 8002e60:	17db      	asrs	r3, r3, #31
 8002e62:	1ad4      	subs	r4, r2, r3
 8002e64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <winGamePage+0xac>)
 8002e68:	fb83 1302 	smull	r1, r3, r3, r2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	1159      	asrs	r1, r3, #5
 8002e70:	17d3      	asrs	r3, r2, #31
 8002e72:	1ac9      	subs	r1, r1, r3
 8002e74:	460b      	mov	r3, r1
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a5b      	subs	r3, r3, r1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	1ad1      	subs	r1, r2, r3
 8002e7e:	4638      	mov	r0, r7
 8002e80:	460b      	mov	r3, r1
 8002e82:	4622      	mov	r2, r4
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <winGamePage+0xb0>)
 8002e86:	f005 fbe9 	bl	800865c <siprintf>
    print(h);
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f8c3 	bl	8001018 <print>
    gameMode = -2;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <winGamePage+0xb4>)
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	376c      	adds	r7, #108	; 0x6c
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	08008f84 	.word	0x08008f84
 8002ea8:	200000b8 	.word	0x200000b8
 8002eac:	08008f90 	.word	0x08008f90
 8002eb0:	200000c4 	.word	0x200000c4
 8002eb4:	88888889 	.word	0x88888889
 8002eb8:	08008fa0 	.word	0x08008fa0
 8002ebc:	20000004 	.word	0x20000004

08002ec0 <BCDtoSev>:
void BCDtoSev(int i){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
       int x1=i&1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
       int x2=i&2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]
       int x3=i&4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
       int x4=i&8;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	60bb      	str	r3, [r7, #8]
       if(x1>0) x1=1;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dd01      	ble.n	8002ef2 <BCDtoSev+0x32>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
       if(x2>0) x2=1;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dd01      	ble.n	8002efc <BCDtoSev+0x3c>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
       if(x3>0) x3=1;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	dd01      	ble.n	8002f06 <BCDtoSev+0x46>
 8002f02:	2301      	movs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
       if(x4>0) x4=1;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dd01      	ble.n	8002f10 <BCDtoSev+0x50>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, x1);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	2101      	movs	r1, #1
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <BCDtoSev+0x90>)
 8002f1a:	f002 f829 	bl	8004f70 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, x2);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	2102      	movs	r1, #2
 8002f26:	480a      	ldr	r0, [pc, #40]	; (8002f50 <BCDtoSev+0x90>)
 8002f28:	f002 f822 	bl	8004f70 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, x3);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	2104      	movs	r1, #4
 8002f34:	4806      	ldr	r0, [pc, #24]	; (8002f50 <BCDtoSev+0x90>)
 8002f36:	f002 f81b 	bl	8004f70 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, x4);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2108      	movs	r1, #8
 8002f42:	4803      	ldr	r0, [pc, #12]	; (8002f50 <BCDtoSev+0x90>)
 8002f44:	f002 f814 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002f48:	bf00      	nop
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	48000800 	.word	0x48000800

08002f54 <sevenSeg>:
void sevenSeg(int n){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	211e      	movs	r1, #30
 8002f60:	4816      	ldr	r0, [pc, #88]	; (8002fbc <sevenSeg+0x68>)
 8002f62:	f002 f805 	bl	8004f70 <HAL_GPIO_WritePin>
          switch(n) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d823      	bhi.n	8002fb4 <sevenSeg+0x60>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <sevenSeg+0x20>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f91 	.word	0x08002f91
 8002f7c:	08002f9d 	.word	0x08002f9d
 8002f80:	08002fa9 	.word	0x08002fa9
          case 0:
            HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 8002f84:	2201      	movs	r2, #1
 8002f86:	2102      	movs	r1, #2
 8002f88:	480c      	ldr	r0, [pc, #48]	; (8002fbc <sevenSeg+0x68>)
 8002f8a:	f001 fff1 	bl	8004f70 <HAL_GPIO_WritePin>
            break;
 8002f8e:	e011      	b.n	8002fb4 <sevenSeg+0x60>
          case 1:
                 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8002f90:	2201      	movs	r2, #1
 8002f92:	2104      	movs	r1, #4
 8002f94:	4809      	ldr	r0, [pc, #36]	; (8002fbc <sevenSeg+0x68>)
 8002f96:	f001 ffeb 	bl	8004f70 <HAL_GPIO_WritePin>
              break;
 8002f9a:	e00b      	b.n	8002fb4 <sevenSeg+0x60>
          case 2:
            HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2108      	movs	r1, #8
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <sevenSeg+0x68>)
 8002fa2:	f001 ffe5 	bl	8004f70 <HAL_GPIO_WritePin>
              break;
 8002fa6:	e005      	b.n	8002fb4 <sevenSeg+0x60>
          case 3:
            HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,1);
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2110      	movs	r1, #16
 8002fac:	4803      	ldr	r0, [pc, #12]	; (8002fbc <sevenSeg+0x68>)
 8002fae:	f001 ffdf 	bl	8004f70 <HAL_GPIO_WritePin>
              break;
 8002fb2:	bf00      	nop
          }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	48000c00 	.word	0x48000c00

08002fc0 <decLed>:
void decLed(){
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	switch (heart){
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <decLed+0x44>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d00b      	beq.n	8002fe4 <decLed+0x24>
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d002      	beq.n	8002fd6 <decLed+0x16>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <decLed+0x32>
break;
	case 0:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
break;
	}
}
 8002fd4:	e014      	b.n	8003000 <decLed+0x40>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fdc:	480a      	ldr	r0, [pc, #40]	; (8003008 <decLed+0x48>)
 8002fde:	f001 ffc7 	bl	8004f70 <HAL_GPIO_WritePin>
		break;
 8002fe2:	e00d      	b.n	8003000 <decLed+0x40>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fea:	4807      	ldr	r0, [pc, #28]	; (8003008 <decLed+0x48>)
 8002fec:	f001 ffc0 	bl	8004f70 <HAL_GPIO_WritePin>
break;
 8002ff0:	e006      	b.n	8003000 <decLed+0x40>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <decLed+0x48>)
 8002ffa:	f001 ffb9 	bl	8004f70 <HAL_GPIO_WritePin>
break;
 8002ffe:	bf00      	nop
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000000c 	.word	0x2000000c
 8003008:	48001000 	.word	0x48001000

0800300c <HAL_GPIO_EXTI_Callback>:
uint32_t lastTime=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]


	if (HAL_GetTick()-lastTime<150) {
 8003016:	f000 f95f 	bl	80032d8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_GPIO_EXTI_Callback+0x10c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b95      	cmp	r3, #149	; 0x95
 8003024:	d973      	bls.n	800310e <HAL_GPIO_EXTI_Callback+0x102>
		return;
	}
    if (gameMode == -1) {
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_GPIO_EXTI_Callback+0x110>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302e:	d102      	bne.n	8003036 <HAL_GPIO_EXTI_Callback+0x2a>
        gameMode = 0;
 8003030:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_GPIO_EXTI_Callback+0x110>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    }

	int row=0,col=0;
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == GPIO_PIN_10) {
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003044:	d102      	bne.n	800304c <HAL_GPIO_EXTI_Callback+0x40>
		 col = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e012      	b.n	8003072 <HAL_GPIO_EXTI_Callback+0x66>
	}else if (GPIO_Pin == GPIO_PIN_11) {
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003052:	d102      	bne.n	800305a <HAL_GPIO_EXTI_Callback+0x4e>
		 col = 1;
 8003054:	2301      	movs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e00b      	b.n	8003072 <HAL_GPIO_EXTI_Callback+0x66>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003060:	d102      	bne.n	8003068 <HAL_GPIO_EXTI_Callback+0x5c>
		 col = 2;
 8003062:	2302      	movs	r3, #2
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e004      	b.n	8003072 <HAL_GPIO_EXTI_Callback+0x66>
	} else if (GPIO_Pin == GPIO_PIN_4) {
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b10      	cmp	r3, #16
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_EXTI_Callback+0x66>
		 col = 3;
 800306e:	2303      	movs	r3, #3
 8003070:	60fb      	str	r3, [r7, #12]
	}

	switch(col){
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d83e      	bhi.n	80030f6 <HAL_GPIO_EXTI_Callback+0xea>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_GPIO_EXTI_Callback+0x74>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	0800309f 	.word	0x0800309f
 8003088:	080030cb 	.word	0x080030cb
 800308c:	080030dd 	.word	0x080030dd
	case 0://right
		windowDir=1;
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_GPIO_EXTI_Callback+0x114>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
	    dir = 1;
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_GPIO_EXTI_Callback+0x118>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
		break;
 800309c:	e02b      	b.n	80030f6 <HAL_GPIO_EXTI_Callback+0xea>
	case 1://up
	      if (lastLcd[marioY + 1][marioX] != 0) {
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_GPIO_EXTI_Callback+0x11c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_GPIO_EXTI_Callback+0x120>)
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	4821      	ldr	r0, [pc, #132]	; (8003130 <HAL_GPIO_EXTI_Callback+0x124>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01b      	beq.n	80030f4 <HAL_GPIO_EXTI_Callback+0xe8>
//	        	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
	            jump = 1;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_GPIO_EXTI_Callback+0x128>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
	            jumpLimit = 3;
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_GPIO_EXTI_Callback+0x12c>)
 80030c4:	2203      	movs	r2, #3
 80030c6:	601a      	str	r2, [r3, #0]
	        }
		break;
 80030c8:	e014      	b.n	80030f4 <HAL_GPIO_EXTI_Callback+0xe8>
	case 2://left
		windowDir=-1;
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_GPIO_EXTI_Callback+0x114>)
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d0:	601a      	str	r2, [r3, #0]
		dir = -1;
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_GPIO_EXTI_Callback+0x118>)
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d8:	601a      	str	r2, [r3, #0]
		        break;
 80030da:	e00c      	b.n	80030f6 <HAL_GPIO_EXTI_Callback+0xea>
	case 3://p
		if (gameMode==2){
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_GPIO_EXTI_Callback+0x110>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d103      	bne.n	80030ec <HAL_GPIO_EXTI_Callback+0xe0>
	        gameMode = 0;
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_GPIO_EXTI_Callback+0x110>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
		}else{
			gameMode = 2;
		}


break;
 80030ea:	e004      	b.n	80030f6 <HAL_GPIO_EXTI_Callback+0xea>
			gameMode = 2;
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_GPIO_EXTI_Callback+0x110>)
 80030ee:	2202      	movs	r2, #2
 80030f0:	601a      	str	r2, [r3, #0]
break;
 80030f2:	e000      	b.n	80030f6 <HAL_GPIO_EXTI_Callback+0xea>
		break;
 80030f4:	bf00      	nop
	}

	   lastTime=HAL_GetTick();
 80030f6:	f000 f8ef 	bl	80032d8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_GPIO_EXTI_Callback+0x10c>)
 80030fe:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15,  1);
 8003100:	2201      	movs	r2, #1
 8003102:	f248 01a1 	movw	r1, #32929	; 0x80a1
 8003106:	480d      	ldr	r0, [pc, #52]	; (800313c <HAL_GPIO_EXTI_Callback+0x130>)
 8003108:	f001 ff32 	bl	8004f70 <HAL_GPIO_WritePin>
 800310c:	e000      	b.n	8003110 <HAL_GPIO_EXTI_Callback+0x104>
		return;
 800310e:	bf00      	nop
}
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200000dc 	.word	0x200000dc
 800311c:	20000004 	.word	0x20000004
 8003120:	2000001c 	.word	0x2000001c
 8003124:	200000c8 	.word	0x200000c8
 8003128:	200000c0 	.word	0x200000c0
 800312c:	200000bc 	.word	0x200000bc
 8003130:	20000b20 	.word	0x20000b20
 8003134:	20000014 	.word	0x20000014
 8003138:	20000018 	.word	0x20000018
 800313c:	48000c00 	.word	0x48000c00

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f005 f9ea 	bl	8008548 <__errno>
 8003174:	4602      	mov	r2, r0
 8003176:	230c      	movs	r3, #12
 8003178:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	2000a000 	.word	0x2000a000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	200000e0 	.word	0x200000e0
 80031a8:	20000c68 	.word	0x20000c68

080031ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <SystemInit+0x20>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <SystemInit+0x20>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003208 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <LoopForever+0x6>)
  ldr r1, =_edata
 80031d6:	490e      	ldr	r1, [pc, #56]	; (8003210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <LoopForever+0xe>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031ec:	4c0b      	ldr	r4, [pc, #44]	; (800321c <LoopForever+0x16>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031fa:	f7ff ffd7 	bl	80031ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fe:	f005 f9a9 	bl	8008554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003202:	f7fe f835 	bl	8001270 <main>

08003206 <LoopForever>:

LoopForever:
    b LoopForever
 8003206:	e7fe      	b.n	8003206 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003208:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003210:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003214:	08009024 	.word	0x08009024
  ldr r2, =_sbss
 8003218:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800321c:	20000c68 	.word	0x20000c68

08003220 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC3_IRQHandler>
	...

08003224 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_Init+0x28>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_Init+0x28>)
 800322e:	f043 0310 	orr.w	r3, r3, #16
 8003232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003234:	2003      	movs	r0, #3
 8003236:	f001 fc69 	bl	8004b0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800323a:	2000      	movs	r0, #0
 800323c:	f000 f808 	bl	8003250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003240:	f7fe fc26 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_InitTick+0x54>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_InitTick+0x58>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003266:	fbb3 f3f1 	udiv	r3, r3, r1
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f001 fc81 	bl	8004b76 <HAL_SYSTICK_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00e      	b.n	800329c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d80a      	bhi.n	800329a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003284:	2200      	movs	r2, #0
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800328c:	f001 fc49 	bl	8004b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <HAL_InitTick+0x5c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000020 	.word	0x20000020
 80032a8:	20000028 	.word	0x20000028
 80032ac:	20000024 	.word	0x20000024

080032b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000028 	.word	0x20000028
 80032d4:	20000c60 	.word	0x20000c60

080032d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;  
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000c60 	.word	0x20000c60

080032f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_Delay+0x40>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000028 	.word	0x20000028

08003334 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b09a      	sub	sp, #104	; 0x68
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e1c9      	b.n	8003724 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d176      	bne.n	8003490 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d152      	bne.n	8003450 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fe fb87 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13b      	bne.n	8003450 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f001 fa67 	bl	80048ac <ADC_Disable>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d12f      	bne.n	8003450 <HAL_ADC_Init+0xe0>
 80033f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d12b      	bne.n	8003450 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	f043 0202 	orr.w	r2, r3, #2
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800341a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800342a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800342c:	4b86      	ldr	r3, [pc, #536]	; (8003648 <HAL_ADC_Init+0x2d8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a86      	ldr	r2, [pc, #536]	; (800364c <HAL_ADC_Init+0x2dc>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9a      	lsrs	r2, r3, #18
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003442:	e002      	b.n	800344a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3b01      	subs	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f9      	bne.n	8003444 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800346c:	d110      	bne.n	8003490 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f023 0312 	bic.w	r3, r3, #18
 8003476:	f043 0210 	orr.w	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8136 	bne.w	800370a <HAL_ADC_Init+0x39a>
 800349e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8131 	bne.w	800370a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8129 	bne.w	800370a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034c0:	f043 0202 	orr.w	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d0:	d004      	beq.n	80034dc <HAL_ADC_Init+0x16c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <HAL_ADC_Init+0x2e0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_Init+0x170>
 80034dc:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_ADC_Init+0x2e4>)
 80034de:	e000      	b.n	80034e2 <HAL_ADC_Init+0x172>
 80034e0:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_ADC_Init+0x2e8>)
 80034e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ec:	d102      	bne.n	80034f4 <HAL_ADC_Init+0x184>
 80034ee:	4b58      	ldr	r3, [pc, #352]	; (8003650 <HAL_ADC_Init+0x2e0>)
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e01a      	b.n	800352a <HAL_ADC_Init+0x1ba>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a55      	ldr	r2, [pc, #340]	; (8003650 <HAL_ADC_Init+0x2e0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d103      	bne.n	8003506 <HAL_ADC_Init+0x196>
 80034fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e011      	b.n	800352a <HAL_ADC_Init+0x1ba>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a54      	ldr	r2, [pc, #336]	; (800365c <HAL_ADC_Init+0x2ec>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d102      	bne.n	8003516 <HAL_ADC_Init+0x1a6>
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_ADC_Init+0x2f0>)
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e009      	b.n	800352a <HAL_ADC_Init+0x1ba>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a51      	ldr	r2, [pc, #324]	; (8003660 <HAL_ADC_Init+0x2f0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <HAL_ADC_Init+0x1b6>
 8003520:	4b4e      	ldr	r3, [pc, #312]	; (800365c <HAL_ADC_Init+0x2ec>)
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e001      	b.n	800352a <HAL_ADC_Init+0x1ba>
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d108      	bne.n	800354a <HAL_ADC_Init+0x1da>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_ADC_Init+0x1da>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_ADC_Init+0x1dc>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11c      	bne.n	800358a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003550:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_ADC_Init+0x202>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Init+0x202>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_ADC_Init+0x204>
 8003572:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	431a      	orrs	r2, r3
 8003586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003588:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7e5b      	ldrb	r3, [r3, #25]
 800358e:	035b      	lsls	r3, r3, #13
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003594:	2a01      	cmp	r2, #1
 8003596:	d002      	beq.n	800359e <HAL_ADC_Init+0x22e>
 8003598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359c:	e000      	b.n	80035a0 <HAL_ADC_Init+0x230>
 800359e:	2200      	movs	r2, #0
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035b0:	4313      	orrs	r3, r2
 80035b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d11b      	bne.n	80035f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7e5b      	ldrb	r3, [r3, #25]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	3b01      	subs	r3, #1
 80035cc:	045a      	lsls	r2, r3, #17
 80035ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	663b      	str	r3, [r7, #96]	; 0x60
 80035d8:	e00d      	b.n	80035f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d03a      	beq.n	8003674 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_ADC_Init+0x2ec>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_ADC_Init+0x2a2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_ADC_Init+0x2f0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d128      	bne.n	8003664 <HAL_ADC_Init+0x2f4>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800361a:	d012      	beq.n	8003642 <HAL_ADC_Init+0x2d2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003624:	d00a      	beq.n	800363c <HAL_ADC_Init+0x2cc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800362e:	d002      	beq.n	8003636 <HAL_ADC_Init+0x2c6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	e018      	b.n	8003668 <HAL_ADC_Init+0x2f8>
 8003636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800363a:	e015      	b.n	8003668 <HAL_ADC_Init+0x2f8>
 800363c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003640:	e012      	b.n	8003668 <HAL_ADC_Init+0x2f8>
 8003642:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003646:	e00f      	b.n	8003668 <HAL_ADC_Init+0x2f8>
 8003648:	20000020 	.word	0x20000020
 800364c:	431bde83 	.word	0x431bde83
 8003650:	50000100 	.word	0x50000100
 8003654:	50000300 	.word	0x50000300
 8003658:	50000700 	.word	0x50000700
 800365c:	50000400 	.word	0x50000400
 8003660:	50000500 	.word	0x50000500
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800366c:	4313      	orrs	r3, r2
 800366e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003670:	4313      	orrs	r3, r2
 8003672:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b00      	cmp	r3, #0
 8003680:	d114      	bne.n	80036ac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003690:	f023 0302 	bic.w	r3, r3, #2
 8003694:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7e1b      	ldrb	r3, [r3, #24]
 800369a:	039a      	lsls	r2, r3, #14
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036a8:	4313      	orrs	r3, r2
 80036aa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_ADC_Init+0x3bc>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80036bc:	430b      	orrs	r3, r1
 80036be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10c      	bne.n	80036e2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f023 010f 	bic.w	r1, r3, #15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	1e5a      	subs	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	e007      	b.n	80036f2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 020f 	bic.w	r2, r2, #15
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f023 0303 	bic.w	r3, r3, #3
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
 8003708:	e00a      	b.n	8003720 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f023 0312 	bic.w	r3, r3, #18
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003720:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003724:	4618      	mov	r0, r3
 8003726:	3768      	adds	r7, #104	; 0x68
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	fff0c007 	.word	0xfff0c007

08003730 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 8123 	bne.w	8003992 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_ADC_Start_IT+0x2a>
 8003756:	2302      	movs	r3, #2
 8003758:	e11e      	b.n	8003998 <HAL_ADC_Start_IT+0x268>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f001 f844 	bl	80047f0 <ADC_Enable>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 810a 	bne.w	8003988 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003790:	d004      	beq.n	800379c <HAL_ADC_Start_IT+0x6c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a82      	ldr	r2, [pc, #520]	; (80039a0 <HAL_ADC_Start_IT+0x270>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d106      	bne.n	80037aa <HAL_ADC_Start_IT+0x7a>
 800379c:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_ADC_Start_IT+0x274>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <HAL_ADC_Start_IT+0x9a>
 80037a8:	e005      	b.n	80037b6 <HAL_ADC_Start_IT+0x86>
 80037aa:	4b7f      	ldr	r3, [pc, #508]	; (80039a8 <HAL_ADC_Start_IT+0x278>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_ADC_Start_IT+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037be:	d004      	beq.n	80037ca <HAL_ADC_Start_IT+0x9a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a79      	ldr	r2, [pc, #484]	; (80039ac <HAL_ADC_Start_IT+0x27c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d115      	bne.n	80037f6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d036      	beq.n	8003852 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037f4:	e02d      	b.n	8003852 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380a:	d004      	beq.n	8003816 <HAL_ADC_Start_IT+0xe6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a63      	ldr	r2, [pc, #396]	; (80039a0 <HAL_ADC_Start_IT+0x270>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10a      	bne.n	800382c <HAL_ADC_Start_IT+0xfc>
 8003816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_ADC_Start_IT+0x10e>
 800382c:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <HAL_ADC_Start_IT+0x27c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800384a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d106      	bne.n	800386e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f023 0206 	bic.w	r2, r3, #6
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
 800386c:	e002      	b.n	8003874 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	221c      	movs	r2, #28
 8003882:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d110      	bne.n	80038ae <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0208 	orr.w	r2, r2, #8
 80038aa:	605a      	str	r2, [r3, #4]
          break;
 80038ac:	e008      	b.n	80038c0 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 020c 	orr.w	r2, r2, #12
 80038bc:	605a      	str	r2, [r3, #4]
          break;
 80038be:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0210 	bic.w	r2, r2, #16
 80038d6:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e0:	d004      	beq.n	80038ec <HAL_ADC_Start_IT+0x1bc>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2e      	ldr	r2, [pc, #184]	; (80039a0 <HAL_ADC_Start_IT+0x270>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d106      	bne.n	80038fa <HAL_ADC_Start_IT+0x1ca>
 80038ec:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_ADC_Start_IT+0x274>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03e      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 80038f8:	e005      	b.n	8003906 <HAL_ADC_Start_IT+0x1d6>
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_ADC_Start_IT+0x278>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2b00      	cmp	r3, #0
 8003904:	d037      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800390e:	d004      	beq.n	800391a <HAL_ADC_Start_IT+0x1ea>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_ADC_Start_IT+0x270>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d106      	bne.n	8003928 <HAL_ADC_Start_IT+0x1f8>
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_ADC_Start_IT+0x274>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2b05      	cmp	r3, #5
 8003924:	d027      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 8003926:	e005      	b.n	8003934 <HAL_ADC_Start_IT+0x204>
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_ADC_Start_IT+0x278>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2b05      	cmp	r3, #5
 8003932:	d020      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393c:	d004      	beq.n	8003948 <HAL_ADC_Start_IT+0x218>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <HAL_ADC_Start_IT+0x270>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d106      	bne.n	8003956 <HAL_ADC_Start_IT+0x226>
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_ADC_Start_IT+0x274>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2b09      	cmp	r3, #9
 8003952:	d010      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 8003954:	e005      	b.n	8003962 <HAL_ADC_Start_IT+0x232>
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_ADC_Start_IT+0x278>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2b09      	cmp	r3, #9
 8003960:	d009      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396a:	d004      	beq.n	8003976 <HAL_ADC_Start_IT+0x246>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_ADC_Start_IT+0x27c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10f      	bne.n	8003996 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0204 	orr.w	r2, r2, #4
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	e006      	b.n	8003996 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003990:	e001      	b.n	8003996 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	50000100 	.word	0x50000100
 80039a4:	50000300 	.word	0x50000300
 80039a8:	50000700 	.word	0x50000700
 80039ac:	50000400 	.word	0x50000400

080039b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d106      	bne.n	80039fc <HAL_ADC_IRQHandler+0x30>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d00f      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	f040 80c0 	bne.w	8003b8c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	f040 80b8 	bne.w	8003b8c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3c:	d004      	beq.n	8003a48 <HAL_ADC_IRQHandler+0x7c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a95      	ldr	r2, [pc, #596]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d106      	bne.n	8003a56 <HAL_ADC_IRQHandler+0x8a>
 8003a48:	4b94      	ldr	r3, [pc, #592]	; (8003c9c <HAL_ADC_IRQHandler+0x2d0>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d03e      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003a54:	e005      	b.n	8003a62 <HAL_ADC_IRQHandler+0x96>
 8003a56:	4b92      	ldr	r3, [pc, #584]	; (8003ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d037      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a6a:	d004      	beq.n	8003a76 <HAL_ADC_IRQHandler+0xaa>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a89      	ldr	r2, [pc, #548]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d106      	bne.n	8003a84 <HAL_ADC_IRQHandler+0xb8>
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_ADC_IRQHandler+0x2d0>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d027      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003a82:	e005      	b.n	8003a90 <HAL_ADC_IRQHandler+0xc4>
 8003a84:	4b86      	ldr	r3, [pc, #536]	; (8003ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d020      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a98:	d004      	beq.n	8003aa4 <HAL_ADC_IRQHandler+0xd8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a7e      	ldr	r2, [pc, #504]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d106      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0xe6>
 8003aa4:	4b7d      	ldr	r3, [pc, #500]	; (8003c9c <HAL_ADC_IRQHandler+0x2d0>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d010      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003ab0:	e005      	b.n	8003abe <HAL_ADC_IRQHandler+0xf2>
 8003ab2:	4b7b      	ldr	r3, [pc, #492]	; (8003ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d009      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac6:	d004      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x106>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a75      	ldr	r2, [pc, #468]	; (8003ca4 <HAL_ADC_IRQHandler+0x2d8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d104      	bne.n	8003adc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e00f      	b.n	8003afc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae4:	d004      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x124>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6b      	ldr	r2, [pc, #428]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d102      	bne.n	8003af6 <HAL_ADC_IRQHandler+0x12a>
 8003af0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003af4:	e000      	b.n	8003af8 <HAL_ADC_IRQHandler+0x12c>
 8003af6:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <HAL_ADC_IRQHandler+0x2d8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d139      	bne.n	8003b7e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d134      	bne.n	8003b7e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d12d      	bne.n	8003b7e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11a      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020c 	bic.w	r2, r2, #12
 8003b3e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d112      	bne.n	8003b7e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
 8003b64:	e00b      	b.n	8003b7e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f043 0210 	orr.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f043 0201 	orr.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fbd8 	bl	8003334 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	220c      	movs	r2, #12
 8003b8a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d106      	bne.n	8003ba8 <HAL_ADC_IRQHandler+0x1dc>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d00f      	beq.n	8003bc8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	f040 813c 	bne.w	8003e30 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	f040 8134 	bne.w	8003e30 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x21c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d106      	bne.n	8003bf6 <HAL_ADC_IRQHandler+0x22a>
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_ADC_IRQHandler+0x2d0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03e      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003bf4:	e005      	b.n	8003c02 <HAL_ADC_IRQHandler+0x236>
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d037      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0a:	d004      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x24a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x258>
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_ADC_IRQHandler+0x2d0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d027      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003c22:	e005      	b.n	8003c30 <HAL_ADC_IRQHandler+0x264>
 8003c24:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d020      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c38:	d004      	beq.n	8003c44 <HAL_ADC_IRQHandler+0x278>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d106      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x286>
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_ADC_IRQHandler+0x2d0>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2b09      	cmp	r3, #9
 8003c4e:	d010      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003c50:	e005      	b.n	8003c5e <HAL_ADC_IRQHandler+0x292>
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d009      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x2a6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_ADC_IRQHandler+0x2d8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d104      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	e018      	b.n	8003cae <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x2c4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a03      	ldr	r2, [pc, #12]	; (8003c98 <HAL_ADC_IRQHandler+0x2cc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_ADC_IRQHandler+0x2dc>
 8003c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c94:	e009      	b.n	8003caa <HAL_ADC_IRQHandler+0x2de>
 8003c96:	bf00      	nop
 8003c98:	50000100 	.word	0x50000100
 8003c9c:	50000300 	.word	0x50000300
 8003ca0:	50000700 	.word	0x50000700
 8003ca4:	50000400 	.word	0x50000400
 8003ca8:	4b9d      	ldr	r3, [pc, #628]	; (8003f20 <HAL_ADC_IRQHandler+0x554>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 80b2 	bne.w	8003e22 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 80a5 	bne.w	8003e22 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 809f 	bne.w	8003e22 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	f040 8097 	bne.w	8003e22 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfc:	d004      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x33c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a88      	ldr	r2, [pc, #544]	; (8003f24 <HAL_ADC_IRQHandler+0x558>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d106      	bne.n	8003d16 <HAL_ADC_IRQHandler+0x34a>
 8003d08:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <HAL_ADC_IRQHandler+0x55c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03e      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d14:	e005      	b.n	8003d22 <HAL_ADC_IRQHandler+0x356>
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_ADC_IRQHandler+0x560>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d037      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d2a:	d004      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x36a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a7c      	ldr	r2, [pc, #496]	; (8003f24 <HAL_ADC_IRQHandler+0x558>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d106      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x378>
 8003d36:	4b7c      	ldr	r3, [pc, #496]	; (8003f28 <HAL_ADC_IRQHandler+0x55c>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d027      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d42:	e005      	b.n	8003d50 <HAL_ADC_IRQHandler+0x384>
 8003d44:	4b79      	ldr	r3, [pc, #484]	; (8003f2c <HAL_ADC_IRQHandler+0x560>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d020      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d58:	d004      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x398>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a71      	ldr	r2, [pc, #452]	; (8003f24 <HAL_ADC_IRQHandler+0x558>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d106      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x3a6>
 8003d64:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <HAL_ADC_IRQHandler+0x55c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2b07      	cmp	r3, #7
 8003d6e:	d010      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d70:	e005      	b.n	8003d7e <HAL_ADC_IRQHandler+0x3b2>
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <HAL_ADC_IRQHandler+0x560>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2b07      	cmp	r3, #7
 8003d7c:	d009      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d86:	d004      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3c6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a64      	ldr	r2, [pc, #400]	; (8003f20 <HAL_ADC_IRQHandler+0x554>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d104      	bne.n	8003d9c <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e00f      	b.n	8003dbc <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da4:	d004      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x3e4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5e      	ldr	r2, [pc, #376]	; (8003f24 <HAL_ADC_IRQHandler+0x558>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d102      	bne.n	8003db6 <HAL_ADC_IRQHandler+0x3ea>
 8003db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003db4:	e000      	b.n	8003db8 <HAL_ADC_IRQHandler+0x3ec>
 8003db6:	4b5a      	ldr	r3, [pc, #360]	; (8003f20 <HAL_ADC_IRQHandler+0x554>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d12d      	bne.n	8003e22 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11a      	bne.n	8003e0a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003de2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d112      	bne.n	8003e22 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0201 	orr.w	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
 8003e08:	e00b      	b.n	8003e22 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0210 	orr.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8de 	bl	8003fe4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2260      	movs	r2, #96	; 0x60
 8003e2e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d113      	bne.n	8003e66 <HAL_ADC_IRQHandler+0x49a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d10c      	bne.n	8003e66 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fa75 	bl	8003348 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e74:	d115      	bne.n	8003ea2 <HAL_ADC_IRQHandler+0x4d6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e84:	d10d      	bne.n	8003ea2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8ba 	bl	800400c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb0:	d115      	bne.n	8003ede <HAL_ADC_IRQHandler+0x512>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d10d      	bne.n	8003ede <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8a6 	bl	8004020 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d151      	bne.n	8003f90 <HAL_ADC_IRQHandler+0x5c4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d14a      	bne.n	8003f90 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e02d      	b.n	8003f64 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f10:	d004      	beq.n	8003f1c <HAL_ADC_IRQHandler+0x550>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a03      	ldr	r2, [pc, #12]	; (8003f24 <HAL_ADC_IRQHandler+0x558>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d109      	bne.n	8003f30 <HAL_ADC_IRQHandler+0x564>
 8003f1c:	4b02      	ldr	r3, [pc, #8]	; (8003f28 <HAL_ADC_IRQHandler+0x55c>)
 8003f1e:	e008      	b.n	8003f32 <HAL_ADC_IRQHandler+0x566>
 8003f20:	50000400 	.word	0x50000400
 8003f24:	50000100 	.word	0x50000100
 8003f28:	50000300 	.word	0x50000300
 8003f2c:	50000700 	.word	0x50000700
 8003f30:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_ADC_IRQHandler+0x614>)
 8003f32:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10a      	bne.n	8003f64 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003f4e:	2301      	movs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e007      	b.n	8003f64 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10e      	bne.n	8003f88 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f043 0202 	orr.w	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff f9ea 	bl	800335c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_ADC_IRQHandler+0x60c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d113      	bne.n	8003fd8 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	f043 0208 	orr.w	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fd0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f810 	bl	8003ff8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003fd8:	bf00      	nop
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	50000700 	.word	0x50000700

08003fe4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b09b      	sub	sp, #108	; 0x6c
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x22>
 8004052:	2302      	movs	r3, #2
 8004054:	e2cb      	b.n	80045ee <HAL_ADC_ConfigChannel+0x5ba>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 82af 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b04      	cmp	r3, #4
 8004074:	d81c      	bhi.n	80040b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	461a      	mov	r2, r3
 800408a:	231f      	movs	r3, #31
 800408c:	4093      	lsls	r3, r2
 800408e:	43db      	mvns	r3, r3
 8004090:	4019      	ands	r1, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa00 f203 	lsl.w	r2, r0, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
 80040ae:	e063      	b.n	8004178 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	d81e      	bhi.n	80040f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	3b1e      	subs	r3, #30
 80040cc:	221f      	movs	r2, #31
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	4019      	ands	r1, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	3b1e      	subs	r3, #30
 80040e8:	fa00 f203 	lsl.w	r2, r0, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
 80040f4:	e040      	b.n	8004178 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b0e      	cmp	r3, #14
 80040fc:	d81e      	bhi.n	800413c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	3b3c      	subs	r3, #60	; 0x3c
 8004112:	221f      	movs	r2, #31
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	4019      	ands	r1, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	3b3c      	subs	r3, #60	; 0x3c
 800412e:	fa00 f203 	lsl.w	r2, r0, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
 800413a:	e01d      	b.n	8004178 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	3b5a      	subs	r3, #90	; 0x5a
 8004150:	221f      	movs	r2, #31
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	4019      	ands	r1, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	3b5a      	subs	r3, #90	; 0x5a
 800416c:	fa00 f203 	lsl.w	r2, r0, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 80e5 	bne.w	8004352 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b09      	cmp	r3, #9
 800418e:	d91c      	bls.n	80041ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	3b1e      	subs	r3, #30
 80041a2:	2207      	movs	r2, #7
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	4019      	ands	r1, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6898      	ldr	r0, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	3b1e      	subs	r3, #30
 80041bc:	fa00 f203 	lsl.w	r2, r0, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	619a      	str	r2, [r3, #24]
 80041c8:	e019      	b.n	80041fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6959      	ldr	r1, [r3, #20]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	2207      	movs	r2, #7
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	4019      	ands	r1, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6898      	ldr	r0, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4413      	add	r3, r2
 80041f2:	fa00 f203 	lsl.w	r2, r0, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	3b01      	subs	r3, #1
 800421c:	2b03      	cmp	r3, #3
 800421e:	d84f      	bhi.n	80042c0 <HAL_ADC_ConfigChannel+0x28c>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_ADC_ConfigChannel+0x1f4>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004239 	.word	0x08004239
 800422c:	0800425b 	.word	0x0800425b
 8004230:	0800427d 	.word	0x0800427d
 8004234:	0800429f 	.word	0x0800429f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800423e:	4b9f      	ldr	r3, [pc, #636]	; (80044bc <HAL_ADC_ConfigChannel+0x488>)
 8004240:	4013      	ands	r3, r2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	0691      	lsls	r1, r2, #26
 8004248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800424a:	430a      	orrs	r2, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004256:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004258:	e07e      	b.n	8004358 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004260:	4b96      	ldr	r3, [pc, #600]	; (80044bc <HAL_ADC_ConfigChannel+0x488>)
 8004262:	4013      	ands	r3, r2
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	0691      	lsls	r1, r2, #26
 800426a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800426c:	430a      	orrs	r2, r1
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004278:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800427a:	e06d      	b.n	8004358 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004282:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <HAL_ADC_ConfigChannel+0x488>)
 8004284:	4013      	ands	r3, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	0691      	lsls	r1, r2, #26
 800428c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800428e:	430a      	orrs	r2, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800429a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800429c:	e05c      	b.n	8004358 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042a4:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_ADC_ConfigChannel+0x488>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	0691      	lsls	r1, r2, #26
 80042ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042b0:	430a      	orrs	r2, r1
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042be:	e04b      	b.n	8004358 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	069b      	lsls	r3, r3, #26
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d107      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004306:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	069b      	lsls	r3, r3, #26
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800432a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	069b      	lsls	r3, r3, #26
 800433c:	429a      	cmp	r2, r3
 800433e:	d10a      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800434e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004350:	e001      	b.n	8004356 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004356:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d108      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x344>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x344>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_ADC_ConfigChannel+0x346>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	f040 8131 	bne.w	80045e2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d00f      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	400a      	ands	r2, r1
 80043a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80043a6:	e049      	b.n	800443c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d91c      	bls.n	8004404 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6999      	ldr	r1, [r3, #24]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	3b1b      	subs	r3, #27
 80043dc:	2207      	movs	r2, #7
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	4019      	ands	r1, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6898      	ldr	r0, [r3, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	3b1b      	subs	r3, #27
 80043f6:	fa00 f203 	lsl.w	r2, r0, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
 8004402:	e01b      	b.n	800443c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6959      	ldr	r1, [r3, #20]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	2207      	movs	r2, #7
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	4019      	ands	r1, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6898      	ldr	r0, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004444:	d004      	beq.n	8004450 <HAL_ADC_ConfigChannel+0x41c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_ADC_ConfigChannel+0x48c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x420>
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <HAL_ADC_ConfigChannel+0x490>)
 8004452:	e000      	b.n	8004456 <HAL_ADC_ConfigChannel+0x422>
 8004454:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <HAL_ADC_ConfigChannel+0x494>)
 8004456:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b10      	cmp	r3, #16
 800445e:	d105      	bne.n	800446c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004468:	2b00      	cmp	r3, #0
 800446a:	d015      	beq.n	8004498 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004470:	2b11      	cmp	r3, #17
 8004472:	d105      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004484:	2b12      	cmp	r3, #18
 8004486:	f040 80ac 	bne.w	80045e2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800448a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 80a5 	bne.w	80045e2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044a0:	d102      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x474>
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <HAL_ADC_ConfigChannel+0x48c>)
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e023      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4bc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <HAL_ADC_ConfigChannel+0x48c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10c      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x498>
 80044b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e01a      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4bc>
 80044ba:	bf00      	nop
 80044bc:	83fff000 	.word	0x83fff000
 80044c0:	50000100 	.word	0x50000100
 80044c4:	50000300 	.word	0x50000300
 80044c8:	50000700 	.word	0x50000700
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <HAL_ADC_ConfigChannel+0x5c8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d102      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x4a8>
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_ADC_ConfigChannel+0x5cc>)
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e009      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4bc>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a47      	ldr	r2, [pc, #284]	; (8004600 <HAL_ADC_ConfigChannel+0x5cc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d102      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x4b8>
 80044e6:	4b45      	ldr	r3, [pc, #276]	; (80045fc <HAL_ADC_ConfigChannel+0x5c8>)
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e001      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4bc>
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x4dc>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x4dc>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_ADC_ConfigChannel+0x4de>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d150      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004516:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x504>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x504>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_ADC_ConfigChannel+0x506>
 8004538:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800453a:	2b00      	cmp	r3, #0
 800453c:	d13c      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b10      	cmp	r3, #16
 8004544:	d11d      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x54e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800454e:	d118      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_ADC_ConfigChannel+0x5d0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a29      	ldr	r2, [pc, #164]	; (8004608 <HAL_ADC_ConfigChannel+0x5d4>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0c9a      	lsrs	r2, r3, #18
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004572:	e002      	b.n	800457a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3b01      	subs	r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f9      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004580:	e02e      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b11      	cmp	r3, #17
 8004588:	d10b      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x56e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004592:	d106      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800459c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045a0:	e01e      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b12      	cmp	r3, #18
 80045a8:	d11a      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80045aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045b6:	e013      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045ca:	e00a      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045de:	e000      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	376c      	adds	r7, #108	; 0x6c
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	50000400 	.word	0x50000400
 8004600:	50000500 	.word	0x50000500
 8004604:	20000020 	.word	0x20000020
 8004608:	431bde83 	.word	0x431bde83

0800460c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800460c:	b480      	push	{r7}
 800460e:	b099      	sub	sp, #100	; 0x64
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004624:	d102      	bne.n	800462c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	e01a      	b.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d103      	bne.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	e011      	b.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a67      	ldr	r2, [pc, #412]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d102      	bne.n	800464e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	e009      	b.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a64      	ldr	r2, [pc, #400]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d102      	bne.n	800465e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	e001      	b.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0b0      	b.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004676:	2302      	movs	r3, #2
 8004678:	e0a9      	b.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 808d 	bne.w	80047ac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 8086 	bne.w	80047ac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046a8:	d004      	beq.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046b4:	4b4c      	ldr	r3, [pc, #304]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80046b6:	e000      	b.n	80046ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046b8:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80046ba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d040      	beq.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80046c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046d6:	035b      	lsls	r3, r3, #13
 80046d8:	430b      	orrs	r3, r1
 80046da:	431a      	orrs	r2, r3
 80046dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046de:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d108      	bne.n	8004700 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d15c      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004722:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d14b      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004730:	f023 030f 	bic.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	6811      	ldr	r1, [r2, #0]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	6892      	ldr	r2, [r2, #8]
 800473c:	430a      	orrs	r2, r1
 800473e:	431a      	orrs	r2, r3
 8004740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004742:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004744:	e03c      	b.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004750:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d108      	bne.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d123      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004794:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004796:	2b00      	cmp	r3, #0
 8004798:	d112      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800479a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047a2:	f023 030f 	bic.w	r3, r3, #15
 80047a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047a8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80047aa:	e009      	b.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80047be:	e000      	b.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80047ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80047ce:	4618      	mov	r0, r3
 80047d0:	3764      	adds	r7, #100	; 0x64
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	50000100 	.word	0x50000100
 80047e0:	50000400 	.word	0x50000400
 80047e4:	50000500 	.word	0x50000500
 80047e8:	50000300 	.word	0x50000300
 80047ec:	50000700 	.word	0x50000700

080047f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d108      	bne.n	800481c <ADC_Enable+0x2c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <ADC_Enable+0x2c>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <ADC_Enable+0x2e>
 800481c:	2300      	movs	r3, #0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d13c      	bne.n	800489c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <ADC_Enable+0xb8>)
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f043 0210 	orr.w	r2, r3, #16
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e028      	b.n	800489e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800485c:	f7fe fd3c 	bl	80032d8 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004862:	e014      	b.n	800488e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004864:	f7fe fd38 	bl	80032d8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d90d      	bls.n	800488e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e007      	b.n	800489e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d1e3      	bne.n	8004864 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	8000003f 	.word	0x8000003f

080048ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d108      	bne.n	80048d8 <ADC_Disable+0x2c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <ADC_Disable+0x2c>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <ADC_Disable+0x2e>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d040      	beq.n	8004960 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030d 	and.w	r3, r3, #13
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10f      	bne.n	800490c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0202 	orr.w	r2, r2, #2
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2203      	movs	r2, #3
 8004902:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004904:	f7fe fce8 	bl	80032d8 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800490a:	e022      	b.n	8004952 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0210 	orr.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e01c      	b.n	8004962 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004928:	f7fe fcd6 	bl	80032d8 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d90d      	bls.n	8004952 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0210 	orr.w	r2, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f043 0201 	orr.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e007      	b.n	8004962 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d0e3      	beq.n	8004928 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	60d3      	str	r3, [r2, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__NVIC_GetPriorityGrouping+0x18>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0307 	and.w	r3, r3, #7
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	db0b      	blt.n	80049fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	4907      	ldr	r1, [pc, #28]	; (8004a08 <__NVIC_EnableIRQ+0x38>)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2001      	movs	r0, #1
 80049f2:	fa00 f202 	lsl.w	r2, r0, r2
 80049f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	e000e100 	.word	0xe000e100

08004a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	db0a      	blt.n	8004a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	490c      	ldr	r1, [pc, #48]	; (8004a58 <__NVIC_SetPriority+0x4c>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	440b      	add	r3, r1
 8004a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a34:	e00a      	b.n	8004a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4908      	ldr	r1, [pc, #32]	; (8004a5c <__NVIC_SetPriority+0x50>)
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	3b04      	subs	r3, #4
 8004a44:	0112      	lsls	r2, r2, #4
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	440b      	add	r3, r1
 8004a4a:	761a      	strb	r2, [r3, #24]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000e100 	.word	0xe000e100
 8004a5c:	e000ed00 	.word	0xe000ed00

08004a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f1c3 0307 	rsb	r3, r3, #7
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf28      	it	cs
 8004a7e:	2304      	movcs	r3, #4
 8004a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d902      	bls.n	8004a90 <NVIC_EncodePriority+0x30>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3b03      	subs	r3, #3
 8004a8e:	e000      	b.n	8004a92 <NVIC_EncodePriority+0x32>
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43d9      	mvns	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab8:	4313      	orrs	r3, r2
         );
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3724      	adds	r7, #36	; 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad8:	d301      	bcc.n	8004ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ada:	2301      	movs	r3, #1
 8004adc:	e00f      	b.n	8004afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <SysTick_Config+0x40>)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae6:	210f      	movs	r1, #15
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aec:	f7ff ff8e 	bl	8004a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <SysTick_Config+0x40>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <SysTick_Config+0x40>)
 8004af8:	2207      	movs	r2, #7
 8004afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000e010 	.word	0xe000e010

08004b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff29 	bl	800496c <__NVIC_SetPriorityGrouping>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b34:	f7ff ff3e 	bl	80049b4 <__NVIC_GetPriorityGrouping>
 8004b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	6978      	ldr	r0, [r7, #20]
 8004b40:	f7ff ff8e 	bl	8004a60 <NVIC_EncodePriority>
 8004b44:	4602      	mov	r2, r0
 8004b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff5d 	bl	8004a0c <__NVIC_SetPriority>
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ff31 	bl	80049d0 <__NVIC_EnableIRQ>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ffa2 	bl	8004ac8 <SysTick_Config>
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d008      	beq.n	8004bb2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e020      	b.n	8004bf4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 020e 	bic.w	r2, r2, #14
 8004bc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	2101      	movs	r1, #1
 8004bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004be0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d005      	beq.n	8004c22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e027      	b.n	8004c72 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 020e 	bic.w	r2, r2, #14
 8004c30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
    } 
  }
  return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c8a:	e154      	b.n	8004f36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8146 	beq.w	8004f30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d00b      	beq.n	8004cc4 <HAL_GPIO_Init+0x48>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d007      	beq.n	8004cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cb8:	2b11      	cmp	r3, #17
 8004cba:	d003      	beq.n	8004cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b12      	cmp	r3, #18
 8004cc2:	d130      	bne.n	8004d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	2203      	movs	r2, #3
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 0201 	and.w	r2, r3, #1
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2203      	movs	r2, #3
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_Init+0xea>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b12      	cmp	r3, #18
 8004d64:	d123      	bne.n	8004dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	08da      	lsrs	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3208      	adds	r2, #8
 8004d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	220f      	movs	r2, #15
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	08da      	lsrs	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3208      	adds	r2, #8
 8004da8:	6939      	ldr	r1, [r7, #16]
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	2203      	movs	r2, #3
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0203 	and.w	r2, r3, #3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80a0 	beq.w	8004f30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_GPIO_Init+0x2d8>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_GPIO_Init+0x2d8>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6193      	str	r3, [r2, #24]
 8004dfc:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_GPIO_Init+0x2d8>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e08:	4a53      	ldr	r2, [pc, #332]	; (8004f58 <HAL_GPIO_Init+0x2dc>)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	3302      	adds	r3, #2
 8004e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	220f      	movs	r2, #15
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e32:	d019      	beq.n	8004e68 <HAL_GPIO_Init+0x1ec>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a49      	ldr	r2, [pc, #292]	; (8004f5c <HAL_GPIO_Init+0x2e0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <HAL_GPIO_Init+0x1e8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a48      	ldr	r2, [pc, #288]	; (8004f60 <HAL_GPIO_Init+0x2e4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00d      	beq.n	8004e60 <HAL_GPIO_Init+0x1e4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a47      	ldr	r2, [pc, #284]	; (8004f64 <HAL_GPIO_Init+0x2e8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <HAL_GPIO_Init+0x1e0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a46      	ldr	r2, [pc, #280]	; (8004f68 <HAL_GPIO_Init+0x2ec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <HAL_GPIO_Init+0x1dc>
 8004e54:	2304      	movs	r3, #4
 8004e56:	e008      	b.n	8004e6a <HAL_GPIO_Init+0x1ee>
 8004e58:	2305      	movs	r3, #5
 8004e5a:	e006      	b.n	8004e6a <HAL_GPIO_Init+0x1ee>
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e004      	b.n	8004e6a <HAL_GPIO_Init+0x1ee>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e002      	b.n	8004e6a <HAL_GPIO_Init+0x1ee>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_GPIO_Init+0x1ee>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	f002 0203 	and.w	r2, r2, #3
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	4093      	lsls	r3, r2
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e7a:	4937      	ldr	r1, [pc, #220]	; (8004f58 <HAL_GPIO_Init+0x2dc>)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	3302      	adds	r3, #2
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e88:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004eac:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ed6:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004edc:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f00:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f06:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	3301      	adds	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f aea3 	bne.w	8004c8c <HAL_GPIO_Init+0x10>
  }
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	48000400 	.word	0x48000400
 8004f60:	48000800 	.word	0x48000800
 8004f64:	48000c00 	.word	0x48000c00
 8004f68:	48001000 	.word	0x48001000
 8004f6c:	40010400 	.word	0x40010400

08004f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	807b      	strh	r3, [r7, #2]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f80:	787b      	ldrb	r3, [r7, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f8c:	e002      	b.n	8004f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	041a      	lsls	r2, r3, #16
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	43d9      	mvns	r1, r3
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	400b      	ands	r3, r1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	619a      	str	r2, [r3, #24]
}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fea:	4a05      	ldr	r2, [pc, #20]	; (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe f80a 	bl	800300c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40010400 	.word	0x40010400

08005004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e081      	b.n	800511a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc fd98 	bl	8001b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	e006      	b.n	800508c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800508a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d104      	bne.n	800509e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800509c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	ea42 0103 	orr.w	r1, r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1a      	ldr	r2, [r3, #32]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b20      	cmp	r3, #32
 8005136:	d138      	bne.n	80051aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005142:	2302      	movs	r3, #2
 8005144:	e032      	b.n	80051ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2224      	movs	r2, #36	; 0x24
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005174:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
  }
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d139      	bne.n	8005242 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051d8:	2302      	movs	r3, #2
 80051da:	e033      	b.n	8005244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800520a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005252:	b08b      	sub	sp, #44	; 0x2c
 8005254:	af06      	add	r7, sp, #24
 8005256:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0d0      	b.n	8005404 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc fd82 	bl	8001d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2203      	movs	r2, #3
 8005280:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f003 f921 	bl	80084d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e04c      	b.n	800532e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	3301      	adds	r3, #1
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	7bfa      	ldrb	r2, [r7, #15]
 80052bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052be:	7bfa      	ldrb	r2, [r7, #15]
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	b298      	uxth	r0, r3
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	440b      	add	r3, r1
 80052d0:	3336      	adds	r3, #54	; 0x36
 80052d2:	4602      	mov	r2, r0
 80052d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	3303      	adds	r3, #3
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	3338      	adds	r3, #56	; 0x38
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005300:	7bfa      	ldrb	r2, [r7, #15]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	333c      	adds	r3, #60	; 0x3c
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005314:	7bfa      	ldrb	r2, [r7, #15]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	440b      	add	r3, r1
 8005322:	3340      	adds	r3, #64	; 0x40
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	3301      	adds	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d3ad      	bcc.n	8005294 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e044      	b.n	80053c8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800533e:	7bfa      	ldrb	r2, [r7, #15]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005366:	7bfa      	ldrb	r2, [r7, #15]
 8005368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800536a:	7bfa      	ldrb	r2, [r7, #15]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005396:	7bfa      	ldrb	r2, [r7, #15]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	440b      	add	r3, r1
 80053a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	3301      	adds	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3b5      	bcc.n	800533e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	687e      	ldr	r6, [r7, #4]
 80053da:	466d      	mov	r5, sp
 80053dc:	f106 0410 	add.w	r4, r6, #16
 80053e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	1d33      	adds	r3, r6, #4
 80053ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ec:	6838      	ldr	r0, [r7, #0]
 80053ee:	f003 f88a 	bl	8008506 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800540c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005412:	af00      	add	r7, sp, #0
 8005414:	1d3b      	adds	r3, r7, #4
 8005416:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f000 bef4 	b.w	800620e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 816a 	beq.w	800570a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005436:	4bb3      	ldr	r3, [pc, #716]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d00c      	beq.n	800545c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005442:	4bb0      	ldr	r3, [pc, #704]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b08      	cmp	r3, #8
 800544c:	d159      	bne.n	8005502 <HAL_RCC_OscConfig+0xf6>
 800544e:	4bad      	ldr	r3, [pc, #692]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545a:	d152      	bne.n	8005502 <HAL_RCC_OscConfig+0xf6>
 800545c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005460:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005470:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d102      	bne.n	800548e <HAL_RCC_OscConfig+0x82>
 8005488:	4b9e      	ldr	r3, [pc, #632]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	e015      	b.n	80054ba <HAL_RCC_OscConfig+0xae>
 800548e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005492:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80054a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054a6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80054aa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80054b6:	4b93      	ldr	r3, [pc, #588]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054be:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80054c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80054c6:	fa92 f2a2 	rbit	r2, r2
 80054ca:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80054ce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80054d2:	fab2 f282 	clz	r2, r2
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	f042 0220 	orr.w	r2, r2, #32
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	f002 021f 	and.w	r2, r2, #31
 80054e2:	2101      	movs	r1, #1
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 810c 	beq.w	8005708 <HAL_RCC_OscConfig+0x2fc>
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f040 8106 	bne.w	8005708 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f000 be86 	b.w	800620e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550c:	d106      	bne.n	800551c <HAL_RCC_OscConfig+0x110>
 800550e:	4b7d      	ldr	r3, [pc, #500]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7c      	ldr	r2, [pc, #496]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e030      	b.n	800557e <HAL_RCC_OscConfig+0x172>
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10c      	bne.n	8005540 <HAL_RCC_OscConfig+0x134>
 8005526:	4b77      	ldr	r3, [pc, #476]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a76      	ldr	r2, [pc, #472]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800552c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	4b74      	ldr	r3, [pc, #464]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a73      	ldr	r2, [pc, #460]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e01e      	b.n	800557e <HAL_RCC_OscConfig+0x172>
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800554a:	d10c      	bne.n	8005566 <HAL_RCC_OscConfig+0x15a>
 800554c:	4b6d      	ldr	r3, [pc, #436]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6c      	ldr	r2, [pc, #432]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a69      	ldr	r2, [pc, #420]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800555e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e00b      	b.n	800557e <HAL_RCC_OscConfig+0x172>
 8005566:	4b67      	ldr	r3, [pc, #412]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a66      	ldr	r2, [pc, #408]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800556c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b64      	ldr	r3, [pc, #400]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a63      	ldr	r2, [pc, #396]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800557e:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	f023 020f 	bic.w	r2, r3, #15
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	495d      	ldr	r1, [pc, #372]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800558e:	4313      	orrs	r3, r2
 8005590:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d059      	beq.n	8005650 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7fd fe9c 	bl	80032d8 <HAL_GetTick>
 80055a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a4:	e00a      	b.n	80055bc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a6:	f7fd fe97 	bl	80032d8 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d902      	bls.n	80055bc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	f000 be29 	b.w	800620e <HAL_RCC_OscConfig+0xe02>
 80055bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055c8:	fa93 f3a3 	rbit	r3, r3
 80055cc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d102      	bne.n	80055ee <HAL_RCC_OscConfig+0x1e2>
 80055e8:	4b46      	ldr	r3, [pc, #280]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x20e>
 80055ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005606:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800560a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800560e:	fa93 f3a3 	rbit	r3, r3
 8005612:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005616:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800561e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005622:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005626:	fa92 f2a2 	rbit	r2, r2
 800562a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800562e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005632:	fab2 f282 	clz	r2, r2
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	f042 0220 	orr.w	r2, r2, #32
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	f002 021f 	and.w	r2, r2, #31
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f202 	lsl.w	r2, r1, r2
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0ab      	beq.n	80055a6 <HAL_RCC_OscConfig+0x19a>
 800564e:	e05c      	b.n	800570a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fd fe42 	bl	80032d8 <HAL_GetTick>
 8005654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005658:	e00a      	b.n	8005670 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800565a:	f7fd fe3d 	bl	80032d8 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d902      	bls.n	8005670 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	f000 bdcf 	b.w	800620e <HAL_RCC_OscConfig+0xe02>
 8005670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005674:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005678:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800567c:	fa93 f3a3 	rbit	r3, r3
 8005680:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005684:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005688:	fab3 f383 	clz	r3, r3
 800568c:	b2db      	uxtb	r3, r3
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d102      	bne.n	80056a2 <HAL_RCC_OscConfig+0x296>
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	e015      	b.n	80056ce <HAL_RCC_OscConfig+0x2c2>
 80056a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80056b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80056be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056ca:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <HAL_RCC_OscConfig+0x2f8>)
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056da:	fa92 f2a2 	rbit	r2, r2
 80056de:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056e2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056e6:	fab2 f282 	clz	r2, r2
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	f042 0220 	orr.w	r2, r2, #32
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	f002 021f 	and.w	r2, r2, #31
 80056f6:	2101      	movs	r1, #1
 80056f8:	fa01 f202 	lsl.w	r2, r1, r2
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ab      	bne.n	800565a <HAL_RCC_OscConfig+0x24e>
 8005702:	e002      	b.n	800570a <HAL_RCC_OscConfig+0x2fe>
 8005704:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 816f 	beq.w	80059f8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800571a:	4bd0      	ldr	r3, [pc, #832]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005726:	4bcd      	ldr	r3, [pc, #820]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b08      	cmp	r3, #8
 8005730:	d16c      	bne.n	800580c <HAL_RCC_OscConfig+0x400>
 8005732:	4bca      	ldr	r3, [pc, #808]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d166      	bne.n	800580c <HAL_RCC_OscConfig+0x400>
 800573e:	2302      	movs	r3, #2
 8005740:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005750:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005754:	fab3 f383 	clz	r3, r3
 8005758:	b2db      	uxtb	r3, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <HAL_RCC_OscConfig+0x362>
 8005768:	4bbc      	ldr	r3, [pc, #752]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	e013      	b.n	8005796 <HAL_RCC_OscConfig+0x38a>
 800576e:	2302      	movs	r3, #2
 8005770:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005778:	fa93 f3a3 	rbit	r3, r3
 800577c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005780:	2302      	movs	r3, #2
 8005782:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005786:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005792:	4bb2      	ldr	r3, [pc, #712]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2202      	movs	r2, #2
 8005798:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800579c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80057a0:	fa92 f2a2 	rbit	r2, r2
 80057a4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80057a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80057ac:	fab2 f282 	clz	r2, r2
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	f042 0220 	orr.w	r2, r2, #32
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	f002 021f 	and.w	r2, r2, #31
 80057bc:	2101      	movs	r1, #1
 80057be:	fa01 f202 	lsl.w	r2, r1, r2
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <HAL_RCC_OscConfig+0x3cc>
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d002      	beq.n	80057d8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f000 bd1b 	b.w	800620e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4ba0      	ldr	r3, [pc, #640]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	21f8      	movs	r1, #248	; 0xf8
 80057e8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80057f0:	fa91 f1a1 	rbit	r1, r1
 80057f4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80057f8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80057fc:	fab1 f181 	clz	r1, r1
 8005800:	b2c9      	uxtb	r1, r1
 8005802:	408b      	lsls	r3, r1
 8005804:	4995      	ldr	r1, [pc, #596]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	e0f5      	b.n	80059f8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8085 	beq.w	8005922 <HAL_RCC_OscConfig+0x516>
 8005818:	2301      	movs	r3, #1
 800581a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800582a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005838:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	461a      	mov	r2, r3
 8005840:	2301      	movs	r3, #1
 8005842:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd fd48 	bl	80032d8 <HAL_GetTick>
 8005848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584e:	f7fd fd43 	bl	80032d8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d902      	bls.n	8005864 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	f000 bcd5 	b.w	800620e <HAL_RCC_OscConfig+0xe02>
 8005864:	2302      	movs	r3, #2
 8005866:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005876:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587a:	fab3 f383 	clz	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d102      	bne.n	8005894 <HAL_RCC_OscConfig+0x488>
 800588e:	4b73      	ldr	r3, [pc, #460]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	e013      	b.n	80058bc <HAL_RCC_OscConfig+0x4b0>
 8005894:	2302      	movs	r3, #2
 8005896:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80058a6:	2302      	movs	r3, #2
 80058a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80058ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80058b0:	fa93 f3a3 	rbit	r3, r3
 80058b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80058b8:	4b68      	ldr	r3, [pc, #416]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2202      	movs	r2, #2
 80058be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058c6:	fa92 f2a2 	rbit	r2, r2
 80058ca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80058d2:	fab2 f282 	clz	r2, r2
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	f042 0220 	orr.w	r2, r2, #32
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	f002 021f 	and.w	r2, r2, #31
 80058e2:	2101      	movs	r1, #1
 80058e4:	fa01 f202 	lsl.w	r2, r1, r2
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0af      	beq.n	800584e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ee:	4b5b      	ldr	r3, [pc, #364]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058f6:	1d3b      	adds	r3, r7, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	21f8      	movs	r1, #248	; 0xf8
 80058fe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005906:	fa91 f1a1 	rbit	r1, r1
 800590a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800590e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005912:	fab1 f181 	clz	r1, r1
 8005916:	b2c9      	uxtb	r1, r1
 8005918:	408b      	lsls	r3, r1
 800591a:	4950      	ldr	r1, [pc, #320]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]
 8005920:	e06a      	b.n	80059f8 <HAL_RCC_OscConfig+0x5ec>
 8005922:	2301      	movs	r3, #1
 8005924:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005934:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005942:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594e:	f7fd fcc3 	bl	80032d8 <HAL_GetTick>
 8005952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	e00a      	b.n	800596e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005958:	f7fd fcbe 	bl	80032d8 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d902      	bls.n	800596e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	f000 bc50 	b.w	800620e <HAL_RCC_OscConfig+0xe02>
 800596e:	2302      	movs	r3, #2
 8005970:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005974:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005978:	fa93 f3a3 	rbit	r3, r3
 800597c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005984:	fab3 f383 	clz	r3, r3
 8005988:	b2db      	uxtb	r3, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d102      	bne.n	800599e <HAL_RCC_OscConfig+0x592>
 8005998:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	e013      	b.n	80059c6 <HAL_RCC_OscConfig+0x5ba>
 800599e:	2302      	movs	r3, #2
 80059a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059a8:	fa93 f3a3 	rbit	r3, r3
 80059ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059b0:	2302      	movs	r3, #2
 80059b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059ba:	fa93 f3a3 	rbit	r3, r3
 80059be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059c2:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <HAL_RCC_OscConfig+0x650>)
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2202      	movs	r2, #2
 80059c8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80059cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80059d0:	fa92 f2a2 	rbit	r2, r2
 80059d4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80059d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80059dc:	fab2 f282 	clz	r2, r2
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	f042 0220 	orr.w	r2, r2, #32
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	f002 021f 	and.w	r2, r2, #31
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f202 	lsl.w	r2, r1, r2
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1af      	bne.n	8005958 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80da 	beq.w	8005bbc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d069      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x6da>
 8005a12:	2301      	movs	r3, #1
 8005a14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a28:	fab3 f383 	clz	r3, r3
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCC_OscConfig+0x654>)
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	461a      	mov	r2, r3
 8005a38:	2301      	movs	r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3c:	f7fd fc4c 	bl	80032d8 <HAL_GetTick>
 8005a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a44:	e00e      	b.n	8005a64 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a46:	f7fd fc47 	bl	80032d8 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d906      	bls.n	8005a64 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e3d9      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	10908120 	.word	0x10908120
 8005a64:	2302      	movs	r3, #2
 8005a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	fa93 f2a3 	rbit	r2, r3
 8005a88:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a92:	2202      	movs	r2, #2
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	fa93 f2a3 	rbit	r2, r3
 8005aa0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005aa4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa6:	4ba5      	ldr	r3, [pc, #660]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aaa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005aae:	2102      	movs	r1, #2
 8005ab0:	6019      	str	r1, [r3, #0]
 8005ab2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	fa93 f1a3 	rbit	r1, r3
 8005abc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ac0:	6019      	str	r1, [r3, #0]
  return result;
 8005ac2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fab3 f383 	clz	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0b0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x63a>
 8005ae4:	e06a      	b.n	8005bbc <HAL_RCC_OscConfig+0x7b0>
 8005ae6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	fa93 f2a3 	rbit	r2, r3
 8005af8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005afc:	601a      	str	r2, [r3, #0]
  return result;
 8005afe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b02:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b04:	fab3 f383 	clz	r3, r3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4b8c      	ldr	r3, [pc, #560]	; (8005d40 <HAL_RCC_OscConfig+0x934>)
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	461a      	mov	r2, r3
 8005b14:	2300      	movs	r3, #0
 8005b16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b18:	f7fd fbde 	bl	80032d8 <HAL_GetTick>
 8005b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	e009      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fd fbd9 	bl	80032d8 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e36b      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 8005b36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	fa93 f2a3 	rbit	r2, r3
 8005b48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b52:	2202      	movs	r2, #2
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fa93 f2a3 	rbit	r2, r3
 8005b60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	fa93 f2a3 	rbit	r2, r3
 8005b78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005b7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7e:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b86:	2102      	movs	r1, #2
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	fa93 f1a3 	rbit	r1, r3
 8005b94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b98:	6019      	str	r1, [r3, #0]
  return result;
 8005b9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	fab3 f383 	clz	r3, r3
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1b2      	bne.n	8005b22 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bbc:	1d3b      	adds	r3, r7, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8158 	beq.w	8005e7c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd2:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d112      	bne.n	8005c04 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	4b57      	ldr	r3, [pc, #348]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4a56      	ldr	r2, [pc, #344]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be8:	61d3      	str	r3, [r2, #28]
 8005bea:	4b54      	ldr	r3, [pc, #336]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f107 0308 	add.w	r3, r7, #8
 8005bfc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c04:	4b4f      	ldr	r3, [pc, #316]	; (8005d44 <HAL_RCC_OscConfig+0x938>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11a      	bne.n	8005c46 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c10:	4b4c      	ldr	r3, [pc, #304]	; (8005d44 <HAL_RCC_OscConfig+0x938>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a4b      	ldr	r2, [pc, #300]	; (8005d44 <HAL_RCC_OscConfig+0x938>)
 8005c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1c:	f7fd fb5c 	bl	80032d8 <HAL_GetTick>
 8005c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c24:	e009      	b.n	8005c3a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c26:	f7fd fb57 	bl	80032d8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e2e9      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3a:	4b42      	ldr	r3, [pc, #264]	; (8005d44 <HAL_RCC_OscConfig+0x938>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0ef      	beq.n	8005c26 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c46:	1d3b      	adds	r3, r7, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x852>
 8005c50:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4a39      	ldr	r2, [pc, #228]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6213      	str	r3, [r2, #32]
 8005c5c:	e02f      	b.n	8005cbe <HAL_RCC_OscConfig+0x8b2>
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10c      	bne.n	8005c82 <HAL_RCC_OscConfig+0x876>
 8005c68:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	4a33      	ldr	r2, [pc, #204]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6213      	str	r3, [r2, #32]
 8005c74:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	4a30      	ldr	r2, [pc, #192]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c7a:	f023 0304 	bic.w	r3, r3, #4
 8005c7e:	6213      	str	r3, [r2, #32]
 8005c80:	e01d      	b.n	8005cbe <HAL_RCC_OscConfig+0x8b2>
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b05      	cmp	r3, #5
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x89a>
 8005c8c:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c92:	f043 0304 	orr.w	r3, r3, #4
 8005c96:	6213      	str	r3, [r2, #32]
 8005c98:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	6213      	str	r3, [r2, #32]
 8005ca4:	e00b      	b.n	8005cbe <HAL_RCC_OscConfig+0x8b2>
 8005ca6:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6213      	str	r3, [r2, #32]
 8005cb2:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005cb8:	f023 0304 	bic.w	r3, r3, #4
 8005cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d06b      	beq.n	8005da0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc8:	f7fd fb06 	bl	80032d8 <HAL_GetTick>
 8005ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd0:	e00b      	b.n	8005cea <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fd fb01 	bl	80032d8 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e291      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 8005cea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cee:	2202      	movs	r2, #2
 8005cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	fa93 f2a3 	rbit	r2, r3
 8005cfc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d06:	2202      	movs	r2, #2
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	fa93 f2a3 	rbit	r2, r3
 8005d14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d18:	601a      	str	r2, [r3, #0]
  return result;
 8005d1a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d20:	fab3 f383 	clz	r3, r3
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f043 0302 	orr.w	r3, r3, #2
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d109      	bne.n	8005d48 <HAL_RCC_OscConfig+0x93c>
 8005d34:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <HAL_RCC_OscConfig+0x930>)
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	e014      	b.n	8005d64 <HAL_RCC_OscConfig+0x958>
 8005d3a:	bf00      	nop
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	10908120 	.word	0x10908120
 8005d44:	40007000 	.word	0x40007000
 8005d48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	fa93 f2a3 	rbit	r2, r3
 8005d5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	4bbb      	ldr	r3, [pc, #748]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d68:	2102      	movs	r1, #2
 8005d6a:	6011      	str	r1, [r2, #0]
 8005d6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	fa92 f1a2 	rbit	r1, r2
 8005d76:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d7a:	6011      	str	r1, [r2, #0]
  return result;
 8005d7c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	fab2 f282 	clz	r2, r2
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	f002 021f 	and.w	r2, r2, #31
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f202 	lsl.w	r2, r1, r2
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d099      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x8c6>
 8005d9e:	e063      	b.n	8005e68 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da0:	f7fd fa9a 	bl	80032d8 <HAL_GetTick>
 8005da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	e00b      	b.n	8005dc2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fd fa95 	bl	80032d8 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e225      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 8005dc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	fa93 f2a3 	rbit	r2, r3
 8005dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dde:	2202      	movs	r2, #2
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	fa93 f2a3 	rbit	r2, r3
 8005dec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005df0:	601a      	str	r2, [r3, #0]
  return result;
 8005df2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005df6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df8:	fab3 f383 	clz	r3, r3
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f043 0302 	orr.w	r3, r3, #2
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCC_OscConfig+0xa06>
 8005e0c:	4b90      	ldr	r3, [pc, #576]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	e00d      	b.n	8005e2e <HAL_RCC_OscConfig+0xa22>
 8005e12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e16:	2202      	movs	r2, #2
 8005e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	fa93 f2a3 	rbit	r2, r3
 8005e24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	4b89      	ldr	r3, [pc, #548]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e32:	2102      	movs	r1, #2
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	fa92 f1a2 	rbit	r1, r2
 8005e40:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e44:	6011      	str	r1, [r2, #0]
  return result;
 8005e46:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	fab2 f282 	clz	r2, r2
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	f002 021f 	and.w	r2, r2, #31
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1a0      	bne.n	8005daa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d105      	bne.n	8005e7c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e70:	4b77      	ldr	r3, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4a76      	ldr	r2, [pc, #472]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 81c2 	beq.w	800620c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e88:	4b71      	ldr	r3, [pc, #452]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	f000 819c 	beq.w	80061ce <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	f040 8114 	bne.w	80060ca <HAL_RCC_OscConfig+0xcbe>
 8005ea2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ea6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	fa93 f2a3 	rbit	r2, r3
 8005eb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005eba:	601a      	str	r2, [r3, #0]
  return result;
 8005ebc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ec0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed8:	f7fd f9fe 	bl	80032d8 <HAL_GetTick>
 8005edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee0:	e009      	b.n	8005ef6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fd f9f9 	bl	80032d8 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e18b      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 8005ef6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	fa93 f2a3 	rbit	r2, r3
 8005f0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f0e:	601a      	str	r2, [r3, #0]
  return result;
 8005f10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f16:	fab3 f383 	clz	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f043 0301 	orr.w	r3, r3, #1
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_RCC_OscConfig+0xb24>
 8005f2a:	4b49      	ldr	r3, [pc, #292]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	e01b      	b.n	8005f68 <HAL_RCC_OscConfig+0xb5c>
 8005f30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	fa93 f2a3 	rbit	r2, r3
 8005f44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	fa93 f2a3 	rbit	r2, r3
 8005f5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f70:	6011      	str	r1, [r2, #0]
 8005f72:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	fa92 f1a2 	rbit	r1, r2
 8005f7c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f80:	6011      	str	r1, [r2, #0]
  return result;
 8005f82:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	fab2 f282 	clz	r2, r2
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	f042 0220 	orr.w	r2, r2, #32
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	f002 021f 	and.w	r2, r2, #31
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d19e      	bne.n	8005ee2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa4:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	4925      	ldr	r1, [pc, #148]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
 8005fc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	fa93 f2a3 	rbit	r2, r3
 8005fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fd8:	601a      	str	r2, [r3, #0]
  return result;
 8005fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fde:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff6:	f7fd f96f 	bl	80032d8 <HAL_GetTick>
 8005ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ffe:	e009      	b.n	8006014 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006000:	f7fd f96a 	bl	80032d8 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e0fc      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 8006014:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800601c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	fa93 f2a3 	rbit	r2, r3
 8006028:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800602c:	601a      	str	r2, [r3, #0]
  return result;
 800602e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006034:	fab3 f383 	clz	r3, r3
 8006038:	b2db      	uxtb	r3, r3
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d105      	bne.n	8006054 <HAL_RCC_OscConfig+0xc48>
 8006048:	4b01      	ldr	r3, [pc, #4]	; (8006050 <HAL_RCC_OscConfig+0xc44>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	e01e      	b.n	800608c <HAL_RCC_OscConfig+0xc80>
 800604e:	bf00      	nop
 8006050:	40021000 	.word	0x40021000
 8006054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800605c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	fa93 f2a3 	rbit	r2, r3
 8006068:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	fa93 f2a3 	rbit	r2, r3
 8006082:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	4b63      	ldr	r3, [pc, #396]	; (8006218 <HAL_RCC_OscConfig+0xe0c>)
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006090:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	fa92 f1a2 	rbit	r1, r2
 80060a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060a4:	6011      	str	r1, [r2, #0]
  return result;
 80060a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	fab2 f282 	clz	r2, r2
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	f042 0220 	orr.w	r2, r2, #32
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	f002 021f 	and.w	r2, r2, #31
 80060bc:	2101      	movs	r1, #1
 80060be:	fa01 f202 	lsl.w	r2, r1, r2
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d09b      	beq.n	8006000 <HAL_RCC_OscConfig+0xbf4>
 80060c8:	e0a0      	b.n	800620c <HAL_RCC_OscConfig+0xe00>
 80060ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	fa93 f2a3 	rbit	r2, r3
 80060de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060e2:	601a      	str	r2, [r3, #0]
  return result;
 80060e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006100:	f7fd f8ea 	bl	80032d8 <HAL_GetTick>
 8006104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006108:	e009      	b.n	800611e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610a:	f7fd f8e5 	bl	80032d8 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e077      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
 800611e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	fa93 f2a3 	rbit	r2, r3
 8006132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006136:	601a      	str	r2, [r3, #0]
  return result;
 8006138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800613c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800613e:	fab3 f383 	clz	r3, r3
 8006142:	b2db      	uxtb	r3, r3
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d102      	bne.n	8006158 <HAL_RCC_OscConfig+0xd4c>
 8006152:	4b31      	ldr	r3, [pc, #196]	; (8006218 <HAL_RCC_OscConfig+0xe0c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	e01b      	b.n	8006190 <HAL_RCC_OscConfig+0xd84>
 8006158:	f107 0320 	add.w	r3, r7, #32
 800615c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006162:	f107 0320 	add.w	r3, r7, #32
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	fa93 f2a3 	rbit	r2, r3
 800616c:	f107 031c 	add.w	r3, r7, #28
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	f107 0318 	add.w	r3, r7, #24
 8006176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f107 0318 	add.w	r3, r7, #24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	fa93 f2a3 	rbit	r2, r3
 8006186:	f107 0314 	add.w	r3, r7, #20
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_RCC_OscConfig+0xe0c>)
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	f107 0210 	add.w	r2, r7, #16
 8006194:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006198:	6011      	str	r1, [r2, #0]
 800619a:	f107 0210 	add.w	r2, r7, #16
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	fa92 f1a2 	rbit	r1, r2
 80061a4:	f107 020c 	add.w	r2, r7, #12
 80061a8:	6011      	str	r1, [r2, #0]
  return result;
 80061aa:	f107 020c 	add.w	r2, r7, #12
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	fab2 f282 	clz	r2, r2
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f042 0220 	orr.w	r2, r2, #32
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	f002 021f 	and.w	r2, r2, #31
 80061c0:	2101      	movs	r1, #1
 80061c2:	fa01 f202 	lsl.w	r2, r1, r2
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d19e      	bne.n	800610a <HAL_RCC_OscConfig+0xcfe>
 80061cc:	e01e      	b.n	800620c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ce:	1d3b      	adds	r3, r7, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e018      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <HAL_RCC_OscConfig+0xe0c>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061ec:	1d3b      	adds	r3, r7, #4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d108      	bne.n	8006208 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80061f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006204:	429a      	cmp	r2, r3
 8006206:	d001      	beq.n	800620c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40021000 	.word	0x40021000

0800621c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b09e      	sub	sp, #120	; 0x78
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e162      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006234:	4b90      	ldr	r3, [pc, #576]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d910      	bls.n	8006264 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b8d      	ldr	r3, [pc, #564]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 0207 	bic.w	r2, r3, #7
 800624a:	498b      	ldr	r1, [pc, #556]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	4b89      	ldr	r3, [pc, #548]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e14a      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006270:	4b82      	ldr	r3, [pc, #520]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	497f      	ldr	r1, [pc, #508]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80dc 	beq.w	8006448 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d13c      	bne.n	8006312 <HAL_RCC_ClockConfig+0xf6>
 8006298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800629c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062a0:	fa93 f3a3 	rbit	r3, r3
 80062a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80062a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a8:	fab3 f383 	clz	r3, r3
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d102      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xa6>
 80062bc:	4b6f      	ldr	r3, [pc, #444]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	e00f      	b.n	80062e2 <HAL_RCC_ClockConfig+0xc6>
 80062c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	667b      	str	r3, [r7, #100]	; 0x64
 80062d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062d4:	663b      	str	r3, [r7, #96]	; 0x60
 80062d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062de:	4b67      	ldr	r3, [pc, #412]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80062e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ea:	fa92 f2a2 	rbit	r2, r2
 80062ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80062f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062f2:	fab2 f282 	clz	r2, r2
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	f042 0220 	orr.w	r2, r2, #32
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	f002 021f 	and.w	r2, r2, #31
 8006302:	2101      	movs	r1, #1
 8006304:	fa01 f202 	lsl.w	r2, r1, r2
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d17b      	bne.n	8006406 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e0f3      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d13c      	bne.n	8006394 <HAL_RCC_ClockConfig+0x178>
 800631a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800631e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006322:	fa93 f3a3 	rbit	r3, r3
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	b2db      	uxtb	r3, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	d102      	bne.n	8006344 <HAL_RCC_ClockConfig+0x128>
 800633e:	4b4f      	ldr	r3, [pc, #316]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	e00f      	b.n	8006364 <HAL_RCC_ClockConfig+0x148>
 8006344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634c:	fa93 f3a3 	rbit	r3, r3
 8006350:	647b      	str	r3, [r7, #68]	; 0x44
 8006352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006356:	643b      	str	r3, [r7, #64]	; 0x40
 8006358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635a:	fa93 f3a3 	rbit	r3, r3
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	4b46      	ldr	r3, [pc, #280]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006368:	63ba      	str	r2, [r7, #56]	; 0x38
 800636a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636c:	fa92 f2a2 	rbit	r2, r2
 8006370:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006374:	fab2 f282 	clz	r2, r2
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	f042 0220 	orr.w	r2, r2, #32
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	f002 021f 	and.w	r2, r2, #31
 8006384:	2101      	movs	r1, #1
 8006386:	fa01 f202 	lsl.w	r2, r1, r2
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d13a      	bne.n	8006406 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0b2      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
 8006394:	2302      	movs	r3, #2
 8006396:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	fa93 f3a3 	rbit	r3, r3
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a2:	fab3 f383 	clz	r3, r3
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d102      	bne.n	80063bc <HAL_RCC_ClockConfig+0x1a0>
 80063b6:	4b31      	ldr	r3, [pc, #196]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	e00d      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1bc>
 80063bc:	2302      	movs	r3, #2
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	fa93 f3a3 	rbit	r3, r3
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	2302      	movs	r3, #2
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	fa93 f3a3 	rbit	r3, r3
 80063d2:	61fb      	str	r3, [r7, #28]
 80063d4:	4b29      	ldr	r3, [pc, #164]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2202      	movs	r2, #2
 80063da:	61ba      	str	r2, [r7, #24]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	fa92 f2a2 	rbit	r2, r2
 80063e2:	617a      	str	r2, [r7, #20]
  return result;
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	fab2 f282 	clz	r2, r2
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	f042 0220 	orr.w	r2, r2, #32
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	f002 021f 	and.w	r2, r2, #31
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f202 	lsl.w	r2, r1, r2
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e079      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f023 0203 	bic.w	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	491a      	ldr	r1, [pc, #104]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 8006414:	4313      	orrs	r3, r2
 8006416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006418:	f7fc ff5e 	bl	80032d8 <HAL_GetTick>
 800641c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	e00a      	b.n	8006436 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006420:	f7fc ff5a 	bl	80032d8 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	; 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e061      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_RCC_ClockConfig+0x260>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f003 020c 	and.w	r2, r3, #12
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	429a      	cmp	r2, r3
 8006446:	d1eb      	bne.n	8006420 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d214      	bcs.n	8006480 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 0207 	bic.w	r2, r3, #7
 800645e:	4906      	ldr	r1, [pc, #24]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <HAL_RCC_ClockConfig+0x25c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d005      	beq.n	8006480 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e040      	b.n	80064fa <HAL_RCC_ClockConfig+0x2de>
 8006478:	40022000 	.word	0x40022000
 800647c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800648c:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <HAL_RCC_ClockConfig+0x2e8>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	491a      	ldr	r1, [pc, #104]	; (8006504 <HAL_RCC_ClockConfig+0x2e8>)
 800649a:	4313      	orrs	r3, r2
 800649c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <HAL_RCC_ClockConfig+0x2e8>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4912      	ldr	r1, [pc, #72]	; (8006504 <HAL_RCC_ClockConfig+0x2e8>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80064be:	f000 f829 	bl	8006514 <HAL_RCC_GetSysClockFreq>
 80064c2:	4601      	mov	r1, r0
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <HAL_RCC_ClockConfig+0x2e8>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064cc:	22f0      	movs	r2, #240	; 0xf0
 80064ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	fa92 f2a2 	rbit	r2, r2
 80064d6:	60fa      	str	r2, [r7, #12]
  return result;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	fab2 f282 	clz	r2, r2
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	40d3      	lsrs	r3, r2
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <HAL_RCC_ClockConfig+0x2ec>)
 80064e4:	5cd3      	ldrb	r3, [r2, r3]
 80064e6:	fa21 f303 	lsr.w	r3, r1, r3
 80064ea:	4a08      	ldr	r2, [pc, #32]	; (800650c <HAL_RCC_ClockConfig+0x2f0>)
 80064ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <HAL_RCC_ClockConfig+0x2f4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fc feac 	bl	8003250 <HAL_InitTick>
  
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3778      	adds	r7, #120	; 0x78
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000
 8006508:	08008fb0 	.word	0x08008fb0
 800650c:	20000020 	.word	0x20000020
 8006510:	20000024 	.word	0x20000024

08006514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006514:	b480      	push	{r7}
 8006516:	b08b      	sub	sp, #44	; 0x2c
 8006518:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b04      	cmp	r3, #4
 800653c:	d002      	beq.n	8006544 <HAL_RCC_GetSysClockFreq+0x30>
 800653e:	2b08      	cmp	r3, #8
 8006540:	d003      	beq.n	800654a <HAL_RCC_GetSysClockFreq+0x36>
 8006542:	e03c      	b.n	80065be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006546:	623b      	str	r3, [r7, #32]
      break;
 8006548:	e03c      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006550:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006554:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	fa92 f2a2 	rbit	r2, r2
 800655c:	607a      	str	r2, [r7, #4]
  return result;
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	fab2 f282 	clz	r2, r2
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	40d3      	lsrs	r3, r2
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800656a:	5cd3      	ldrb	r3, [r2, r3]
 800656c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	220f      	movs	r2, #15
 8006578:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	fa92 f2a2 	rbit	r2, r2
 8006580:	60fa      	str	r2, [r7, #12]
  return result;
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	fab2 f282 	clz	r2, r2
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	40d3      	lsrs	r3, r2
 800658c:	4a14      	ldr	r2, [pc, #80]	; (80065e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800658e:	5cd3      	ldrb	r3, [r2, r3]
 8006590:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800659c:	4a0e      	ldr	r2, [pc, #56]	; (80065d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	e004      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	623b      	str	r3, [r7, #32]
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80065c0:	623b      	str	r3, [r7, #32]
      break;
 80065c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065c4:	6a3b      	ldr	r3, [r7, #32]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	372c      	adds	r7, #44	; 0x2c
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40021000 	.word	0x40021000
 80065d8:	007a1200 	.word	0x007a1200
 80065dc:	08008fc8 	.word	0x08008fc8
 80065e0:	08008fd8 	.word	0x08008fd8
 80065e4:	003d0900 	.word	0x003d0900

080065e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ee:	681b      	ldr	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000020 	.word	0x20000020

08006600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006606:	f7ff ffef 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 800660a:	4601      	mov	r1, r0
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006614:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006618:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	fa92 f2a2 	rbit	r2, r2
 8006620:	603a      	str	r2, [r7, #0]
  return result;
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	fab2 f282 	clz	r2, r2
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	40d3      	lsrs	r3, r2
 800662c:	4a04      	ldr	r2, [pc, #16]	; (8006640 <HAL_RCC_GetPCLK1Freq+0x40>)
 800662e:	5cd3      	ldrb	r3, [r2, r3]
 8006630:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40021000 	.word	0x40021000
 8006640:	08008fc0 	.word	0x08008fc0

08006644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800664a:	f7ff ffcd 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 800664e:	4601      	mov	r1, r0
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006658:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800665c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	fa92 f2a2 	rbit	r2, r2
 8006664:	603a      	str	r2, [r7, #0]
  return result;
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	fab2 f282 	clz	r2, r2
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	40d3      	lsrs	r3, r2
 8006670:	4a04      	ldr	r2, [pc, #16]	; (8006684 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006672:	5cd3      	ldrb	r3, [r2, r3]
 8006674:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40021000 	.word	0x40021000
 8006684:	08008fc0 	.word	0x08008fc0

08006688 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b092      	sub	sp, #72	; 0x48
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80d4 	beq.w	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ac:	4b4e      	ldr	r3, [pc, #312]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10e      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b8:	4b4b      	ldr	r3, [pc, #300]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	4a4a      	ldr	r2, [pc, #296]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c2:	61d3      	str	r3, [r2, #28]
 80066c4:	4b48      	ldr	r3, [pc, #288]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d6:	4b45      	ldr	r3, [pc, #276]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d118      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066e2:	4b42      	ldr	r3, [pc, #264]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a41      	ldr	r2, [pc, #260]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ee:	f7fc fdf3 	bl	80032d8 <HAL_GetTick>
 80066f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f4:	e008      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f6:	f7fc fdef 	bl	80032d8 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b64      	cmp	r3, #100	; 0x64
 8006702:	d901      	bls.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e169      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006708:	4b38      	ldr	r3, [pc, #224]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f0      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006714:	4b34      	ldr	r3, [pc, #208]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8084 	beq.w	800682e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006730:	429a      	cmp	r2, r3
 8006732:	d07c      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006734:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006742:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	fa93 f3a3 	rbit	r3, r3
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800674e:	fab3 f383 	clz	r3, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	461a      	mov	r2, r3
 800675e:	2301      	movs	r3, #1
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	fa93 f3a3 	rbit	r3, r3
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006772:	fab3 f383 	clz	r3, r3
 8006776:	b2db      	uxtb	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	461a      	mov	r2, r3
 8006782:	2300      	movs	r3, #0
 8006784:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006786:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d04b      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fc fd9f 	bl	80032d8 <HAL_GetTick>
 800679a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679c:	e00a      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fc fd9b 	bl	80032d8 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e113      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80067b4:	2302      	movs	r3, #2
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	fa93 f3a3 	rbit	r3, r3
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
 80067c0:	2302      	movs	r3, #2
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	fa93 f3a3 	rbit	r3, r3
 80067ca:	61fb      	str	r3, [r7, #28]
  return result;
 80067cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ce:	fab3 f383 	clz	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f043 0302 	orr.w	r3, r3, #2
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d108      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80067e2:	4b01      	ldr	r3, [pc, #4]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	e00d      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40007000 	.word	0x40007000
 80067f0:	10908100 	.word	0x10908100
 80067f4:	2302      	movs	r3, #2
 80067f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	fa93 f3a3 	rbit	r3, r3
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	4b78      	ldr	r3, [pc, #480]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2202      	movs	r2, #2
 8006806:	613a      	str	r2, [r7, #16]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	fa92 f2a2 	rbit	r2, r2
 800680e:	60fa      	str	r2, [r7, #12]
  return result;
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	fab2 f282 	clz	r2, r2
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	f002 021f 	and.w	r2, r2, #31
 8006822:	2101      	movs	r1, #1
 8006824:	fa01 f202 	lsl.w	r2, r1, r2
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0b7      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800682e:	4b6d      	ldr	r3, [pc, #436]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	496a      	ldr	r1, [pc, #424]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800683c:	4313      	orrs	r3, r2
 800683e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006840:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006844:	2b01      	cmp	r3, #1
 8006846:	d105      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006848:	4b66      	ldr	r3, [pc, #408]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	4a65      	ldr	r2, [pc, #404]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800684e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006852:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006860:	4b60      	ldr	r3, [pc, #384]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	f023 0203 	bic.w	r2, r3, #3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	495d      	ldr	r1, [pc, #372]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800686e:	4313      	orrs	r3, r2
 8006870:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800687e:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	4956      	ldr	r1, [pc, #344]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688c:	4313      	orrs	r3, r2
 800688e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800689c:	4b51      	ldr	r3, [pc, #324]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	494e      	ldr	r1, [pc, #312]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068ba:	4b4a      	ldr	r3, [pc, #296]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f023 0210 	bic.w	r2, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4947      	ldr	r1, [pc, #284]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	493f      	ldr	r1, [pc, #252]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068f6:	4b3b      	ldr	r3, [pc, #236]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f023 0220 	bic.w	r2, r3, #32
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4938      	ldr	r1, [pc, #224]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006914:	4b33      	ldr	r3, [pc, #204]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	4930      	ldr	r1, [pc, #192]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006922:	4313      	orrs	r3, r2
 8006924:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006932:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	4929      	ldr	r1, [pc, #164]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006940:	4313      	orrs	r3, r2
 8006942:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006950:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	4921      	ldr	r1, [pc, #132]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800695e:	4313      	orrs	r3, r2
 8006960:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	491a      	ldr	r1, [pc, #104]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697c:	4313      	orrs	r3, r2
 800697e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800698c:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	4912      	ldr	r1, [pc, #72]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d008      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	490b      	ldr	r1, [pc, #44]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	4903      	ldr	r1, [pc, #12]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3748      	adds	r7, #72	; 0x48
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40021000 	.word	0x40021000

080069e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e09d      	b.n	8006b36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0a:	d009      	beq.n	8006a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
 8006a12:	e005      	b.n	8006a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fb f8d4 	bl	8001be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a60:	d902      	bls.n	8006a68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e002      	b.n	8006a6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a76:	d007      	beq.n	8006a88 <HAL_SPI_Init+0xa0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aca:	ea42 0103 	orr.w	r1, r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	f003 0204 	and.w	r2, r3, #4
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b04:	ea42 0103 	orr.w	r1, r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e049      	b.n	8006be4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fb f881 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f000 faa9 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e04a      	b.n	8006c9a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d018      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x6c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d013      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x6c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <HAL_TIM_Base_Start_IT+0xc0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00e      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x6c>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d009      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x6c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x6c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d115      	bne.n	8006c84 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b06      	cmp	r3, #6
 8006c68:	d015      	beq.n	8006c96 <HAL_TIM_Base_Start_IT+0xaa>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c70:	d011      	beq.n	8006c96 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c82:	e008      	b.n	8006c96 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	e000      	b.n	8006c98 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	00010007 	.word	0x00010007

08006cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d122      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d11b      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0202 	mvn.w	r2, #2
 8006cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f9c8 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006d08:	e005      	b.n	8006d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9ba 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f9cb 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d122      	bne.n	8006d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d11b      	bne.n	8006d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0204 	mvn.w	r2, #4
 8006d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f99e 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006d5c:	e005      	b.n	8006d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f990 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f9a1 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d122      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0208 	mvn.w	r2, #8
 8006d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2204      	movs	r2, #4
 8006d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f974 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f966 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f977 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0210 	mvn.w	r2, #16
 8006de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2208      	movs	r2, #8
 8006dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f94a 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f93c 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f94d 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d10e      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d107      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0201 	mvn.w	r2, #1
 8006e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f916 	bl	8007070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d10e      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	2b80      	cmp	r3, #128	; 0x80
 8006e5e:	d107      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fae6 	bl	800743c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7e:	d10e      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fad9 	bl	8007450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d10e      	bne.n	8006eca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8fb 	bl	80070c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d10e      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0220 	mvn.w	r2, #32
 8006eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fa99 	bl	8007428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_TIM_ConfigClockSource+0x18>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e0a8      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x16a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f40:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d067      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x124>
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d80b      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x70>
 8006f56:	2b10      	cmp	r3, #16
 8006f58:	d073      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x144>
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d802      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x66>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d06f      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f62:	e078      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d06c      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x144>
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	d06a      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006f6c:	e073      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006f6e:	2b70      	cmp	r3, #112	; 0x70
 8006f70:	d00d      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x90>
 8006f72:	2b70      	cmp	r3, #112	; 0x70
 8006f74:	d804      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x82>
 8006f76:	2b50      	cmp	r3, #80	; 0x50
 8006f78:	d033      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0xe4>
 8006f7a:	2b60      	cmp	r3, #96	; 0x60
 8006f7c:	d041      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006f7e:	e06a      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f84:	d066      	beq.n	8007054 <HAL_TIM_ConfigClockSource+0x156>
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d017      	beq.n	8006fbc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006f8c:	e063      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6899      	ldr	r1, [r3, #8]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f000 f9a3 	bl	80072e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	609a      	str	r2, [r3, #8]
      break;
 8006fba:	e04c      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	6899      	ldr	r1, [r3, #8]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f000 f98c 	bl	80072e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fde:	609a      	str	r2, [r3, #8]
      break;
 8006fe0:	e039      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6859      	ldr	r1, [r3, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f000 f900 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2150      	movs	r1, #80	; 0x50
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f959 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8007000:	e029      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6859      	ldr	r1, [r3, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	461a      	mov	r2, r3
 8007010:	f000 f91f 	bl	8007252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2160      	movs	r1, #96	; 0x60
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f949 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8007020:	e019      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	6859      	ldr	r1, [r3, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	461a      	mov	r2, r3
 8007030:	f000 f8e0 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2140      	movs	r1, #64	; 0x40
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f939 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8007040:	e009      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f000 f930 	bl	80072b2 <TIM_ITRx_SetConfig>
        break;
 8007052:	e000      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007054:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3c      	ldr	r2, [pc, #240]	; (80071d8 <TIM_Base_SetConfig+0x104>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a39      	ldr	r2, [pc, #228]	; (80071dc <TIM_Base_SetConfig+0x108>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <TIM_Base_SetConfig+0x10c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a37      	ldr	r2, [pc, #220]	; (80071e4 <TIM_Base_SetConfig+0x110>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2d      	ldr	r2, [pc, #180]	; (80071d8 <TIM_Base_SetConfig+0x104>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01b      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d017      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <TIM_Base_SetConfig+0x108>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a29      	ldr	r2, [pc, #164]	; (80071e0 <TIM_Base_SetConfig+0x10c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00f      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a28      	ldr	r2, [pc, #160]	; (80071e4 <TIM_Base_SetConfig+0x110>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <TIM_Base_SetConfig+0x114>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d007      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <TIM_Base_SetConfig+0x118>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <TIM_Base_SetConfig+0x11c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d108      	bne.n	8007170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a10      	ldr	r2, [pc, #64]	; (80071d8 <TIM_Base_SetConfig+0x104>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <TIM_Base_SetConfig+0x110>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <TIM_Base_SetConfig+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <TIM_Base_SetConfig+0x118>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <TIM_Base_SetConfig+0x11c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d103      	bne.n	80071c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	615a      	str	r2, [r3, #20]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40013400 	.word	0x40013400
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400
 80071f0:	40014800 	.word	0x40014800

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800733c:	2302      	movs	r3, #2
 800733e:	e063      	b.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2b      	ldr	r2, [pc, #172]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2a      	ldr	r2, [pc, #168]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d108      	bne.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800737a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b2:	d013      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a18      	ldr	r2, [pc, #96]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a12      	ldr	r2, [pc, #72]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a13      	ldr	r2, [pc, #76]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d10c      	bne.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40014000 	.word	0x40014000

08007428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e040      	b.n	80074f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fa fc30 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	; 0x24
 8007490:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb28 	bl	8007af8 <UART_SetConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e022      	b.n	80074f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fcee 	bl	8007e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd75 	bl	8007fe0 <UART_CheckIdleState>
 80074f6:	4603      	mov	r3, r0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007514:	2b20      	cmp	r3, #32
 8007516:	f040 8082 	bne.w	800761e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <HAL_UART_Transmit+0x26>
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e07a      	b.n	8007620 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_UART_Transmit+0x38>
 8007534:	2302      	movs	r3, #2
 8007536:	e073      	b.n	8007620 <HAL_UART_Transmit+0x120>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2221      	movs	r2, #33	; 0x21
 800754c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800754e:	f7fb fec3 	bl	80032d8 <HAL_GetTick>
 8007552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	88fa      	ldrh	r2, [r7, #6]
 8007558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	88fa      	ldrh	r2, [r7, #6]
 8007560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756c:	d108      	bne.n	8007580 <HAL_UART_Transmit+0x80>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d104      	bne.n	8007580 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	e003      	b.n	8007588 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007590:	e02d      	b.n	80075ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fd68 	bl	8008072 <UART_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e039      	b.n	8007620 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075be:	b292      	uxth	r2, r2
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	3302      	adds	r3, #2
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	e008      	b.n	80075dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	b292      	uxth	r2, r2
 80075d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	3301      	adds	r3, #1
 80075da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1cb      	bne.n	8007592 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2200      	movs	r2, #0
 8007602:	2140      	movs	r1, #64	; 0x40
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fd34 	bl	8008072 <UART_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e005      	b.n	8007620 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e000      	b.n	8007620 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800761e:	2302      	movs	r3, #2
  }
}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763a:	2b20      	cmp	r3, #32
 800763c:	d12c      	bne.n	8007698 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_UART_Receive_IT+0x22>
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e025      	b.n	800769a <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_UART_Receive_IT+0x34>
 8007658:	2302      	movs	r3, #2
 800765a:	e01e      	b.n	800769a <HAL_UART_Receive_IT+0x72>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007686:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	461a      	mov	r2, r3
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fd6c 	bl	800816c <UART_Start_Receive_IT>
 8007694:	4603      	mov	r3, r0
 8007696:	e000      	b.n	800769a <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007698:	2302      	movs	r3, #2
  }
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80076ca:	4013      	ands	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d113      	bne.n	80076fc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00e      	beq.n	80076fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 81cd 	beq.w	8007a8c <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
      }
      return;
 80076fa:	e1c7      	b.n	8007a8c <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80e3 	beq.w	80078ca <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4ba5      	ldr	r3, [pc, #660]	; (80079a8 <HAL_UART_IRQHandler+0x304>)
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80d8 	beq.w	80078ca <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d010      	beq.n	8007746 <HAL_UART_IRQHandler+0xa2>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2201      	movs	r2, #1
 8007734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800773c:	f043 0201 	orr.w	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d010      	beq.n	8007772 <HAL_UART_IRQHandler+0xce>
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00b      	beq.n	8007772 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2202      	movs	r2, #2
 8007760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007768:	f043 0204 	orr.w	r2, r3, #4
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_UART_IRQHandler+0xfa>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2204      	movs	r2, #4
 800778c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007794:	f043 0202 	orr.w	r2, r3, #2
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d015      	beq.n	80077d4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2208      	movs	r2, #8
 80077c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ca:	f043 0208 	orr.w	r2, r3, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d011      	beq.n	8007802 <HAL_UART_IRQHandler+0x15e>
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00c      	beq.n	8007802 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8141 	beq.w	8007a90 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d004      	beq.n	8007852 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800784e:	2b00      	cmp	r3, #0
 8007850:	d031      	beq.n	80078b6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fd00 	bl	8008258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d123      	bne.n	80078ae <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007874:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	2b00      	cmp	r3, #0
 800787c:	d013      	beq.n	80078a6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007882:	4a4a      	ldr	r2, [pc, #296]	; (80079ac <HAL_UART_IRQHandler+0x308>)
 8007884:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	4618      	mov	r0, r3
 800788c:	f7fd f9b8 	bl	8004c00 <HAL_DMA_Abort_IT>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d017      	beq.n	80078c6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	e00f      	b.n	80078c6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f910 	bl	8007acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00b      	b.n	80078c6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f90c 	bl	8007acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e007      	b.n	80078c6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f908 	bl	8007acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80078c4:	e0e4      	b.n	8007a90 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c6:	bf00      	nop
    return;
 80078c8:	e0e2      	b.n	8007a90 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	f040 80a7 	bne.w	8007a22 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80a1 	beq.w	8007a22 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 809b 	beq.w	8007a22 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2210      	movs	r2, #16
 80078f2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d156      	bne.n	80079b0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800790c:	893b      	ldrh	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80c0 	beq.w	8007a94 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800791a:	893a      	ldrh	r2, [r7, #8]
 800791c:	429a      	cmp	r2, r3
 800791e:	f080 80b9 	bcs.w	8007a94 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	893a      	ldrh	r2, [r7, #8]
 8007926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	2b20      	cmp	r3, #32
 8007932:	d02a      	beq.n	800798a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007942:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007962:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0210 	bic.w	r2, r2, #16
 800797e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd f902 	bl	8004b8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007996:	b29b      	uxth	r3, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f89e 	bl	8007ae0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80079a4:	e076      	b.n	8007a94 <HAL_UART_IRQHandler+0x3f0>
 80079a6:	bf00      	nop
 80079a8:	04000120 	.word	0x04000120
 80079ac:	080082b7 	.word	0x080082b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d064      	beq.n	8007a98 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d061      	beq.n	8007a98 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079e2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0201 	bic.w	r2, r2, #1
 80079f2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0210 	bic.w	r2, r2, #16
 8007a14:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a16:	897b      	ldrh	r3, [r7, #10]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f860 	bl	8007ae0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a20:	e03a      	b.n	8007a98 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00d      	beq.n	8007a48 <HAL_UART_IRQHandler+0x3a4>
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fd3b 	bl	80084bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a46:	e02a      	b.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00d      	beq.n	8007a6e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
    }
    return;
 8007a6c:	e016      	b.n	8007a9c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fc2d 	bl	80082e2 <UART_EndTransmit_IT>
    return;
 8007a88:	bf00      	nop
 8007a8a:	e008      	b.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
      return;
 8007a8c:	bf00      	nop
 8007a8e:	e006      	b.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
    return;
 8007a90:	bf00      	nop
 8007a92:	e004      	b.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
      return;
 8007a94:	bf00      	nop
 8007a96:	e002      	b.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
      return;
 8007a98:	bf00      	nop
 8007a9a:	e000      	b.n	8007a9e <HAL_UART_IRQHandler+0x3fa>
    return;
 8007a9c:	bf00      	nop
  }

}
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b26:	f023 030c 	bic.w	r3, r3, #12
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4aad      	ldr	r2, [pc, #692]	; (8007e28 <UART_SetConfig+0x330>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d121      	bne.n	8007bbc <UART_SetConfig+0xc4>
 8007b78:	4bac      	ldr	r3, [pc, #688]	; (8007e2c <UART_SetConfig+0x334>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d817      	bhi.n	8007bb4 <UART_SetConfig+0xbc>
 8007b84:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x94>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007baf 	.word	0x08007baf
 8007b98:	08007ba3 	.word	0x08007ba3
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e0b2      	b.n	8007d08 <UART_SetConfig+0x210>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e0af      	b.n	8007d08 <UART_SetConfig+0x210>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e0ac      	b.n	8007d08 <UART_SetConfig+0x210>
 8007bae:	2308      	movs	r3, #8
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e0a9      	b.n	8007d08 <UART_SetConfig+0x210>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	bf00      	nop
 8007bba:	e0a5      	b.n	8007d08 <UART_SetConfig+0x210>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a9b      	ldr	r2, [pc, #620]	; (8007e30 <UART_SetConfig+0x338>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d123      	bne.n	8007c0e <UART_SetConfig+0x116>
 8007bc6:	4b99      	ldr	r3, [pc, #612]	; (8007e2c <UART_SetConfig+0x334>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd2:	d012      	beq.n	8007bfa <UART_SetConfig+0x102>
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d802      	bhi.n	8007be0 <UART_SetConfig+0xe8>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <UART_SetConfig+0xf6>
 8007bde:	e012      	b.n	8007c06 <UART_SetConfig+0x10e>
 8007be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be4:	d00c      	beq.n	8007c00 <UART_SetConfig+0x108>
 8007be6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bea:	d003      	beq.n	8007bf4 <UART_SetConfig+0xfc>
 8007bec:	e00b      	b.n	8007c06 <UART_SetConfig+0x10e>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	77fb      	strb	r3, [r7, #31]
 8007bf2:	e089      	b.n	8007d08 <UART_SetConfig+0x210>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	77fb      	strb	r3, [r7, #31]
 8007bf8:	e086      	b.n	8007d08 <UART_SetConfig+0x210>
 8007bfa:	2304      	movs	r3, #4
 8007bfc:	77fb      	strb	r3, [r7, #31]
 8007bfe:	e083      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c00:	2308      	movs	r3, #8
 8007c02:	77fb      	strb	r3, [r7, #31]
 8007c04:	e080      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c06:	2310      	movs	r3, #16
 8007c08:	77fb      	strb	r3, [r7, #31]
 8007c0a:	bf00      	nop
 8007c0c:	e07c      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a88      	ldr	r2, [pc, #544]	; (8007e34 <UART_SetConfig+0x33c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d123      	bne.n	8007c60 <UART_SetConfig+0x168>
 8007c18:	4b84      	ldr	r3, [pc, #528]	; (8007e2c <UART_SetConfig+0x334>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c24:	d012      	beq.n	8007c4c <UART_SetConfig+0x154>
 8007c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c2a:	d802      	bhi.n	8007c32 <UART_SetConfig+0x13a>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <UART_SetConfig+0x148>
 8007c30:	e012      	b.n	8007c58 <UART_SetConfig+0x160>
 8007c32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c36:	d00c      	beq.n	8007c52 <UART_SetConfig+0x15a>
 8007c38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c3c:	d003      	beq.n	8007c46 <UART_SetConfig+0x14e>
 8007c3e:	e00b      	b.n	8007c58 <UART_SetConfig+0x160>
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e060      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e05d      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e05a      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e057      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	bf00      	nop
 8007c5e:	e053      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a74      	ldr	r2, [pc, #464]	; (8007e38 <UART_SetConfig+0x340>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d123      	bne.n	8007cb2 <UART_SetConfig+0x1ba>
 8007c6a:	4b70      	ldr	r3, [pc, #448]	; (8007e2c <UART_SetConfig+0x334>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c76:	d012      	beq.n	8007c9e <UART_SetConfig+0x1a6>
 8007c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7c:	d802      	bhi.n	8007c84 <UART_SetConfig+0x18c>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <UART_SetConfig+0x19a>
 8007c82:	e012      	b.n	8007caa <UART_SetConfig+0x1b2>
 8007c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c88:	d00c      	beq.n	8007ca4 <UART_SetConfig+0x1ac>
 8007c8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c8e:	d003      	beq.n	8007c98 <UART_SetConfig+0x1a0>
 8007c90:	e00b      	b.n	8007caa <UART_SetConfig+0x1b2>
 8007c92:	2300      	movs	r3, #0
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e037      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e034      	b.n	8007d08 <UART_SetConfig+0x210>
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e031      	b.n	8007d08 <UART_SetConfig+0x210>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e02e      	b.n	8007d08 <UART_SetConfig+0x210>
 8007caa:	2310      	movs	r3, #16
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	bf00      	nop
 8007cb0:	e02a      	b.n	8007d08 <UART_SetConfig+0x210>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a61      	ldr	r2, [pc, #388]	; (8007e3c <UART_SetConfig+0x344>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d123      	bne.n	8007d04 <UART_SetConfig+0x20c>
 8007cbc:	4b5b      	ldr	r3, [pc, #364]	; (8007e2c <UART_SetConfig+0x334>)
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc8:	d012      	beq.n	8007cf0 <UART_SetConfig+0x1f8>
 8007cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cce:	d802      	bhi.n	8007cd6 <UART_SetConfig+0x1de>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <UART_SetConfig+0x1ec>
 8007cd4:	e012      	b.n	8007cfc <UART_SetConfig+0x204>
 8007cd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cda:	d00c      	beq.n	8007cf6 <UART_SetConfig+0x1fe>
 8007cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ce0:	d003      	beq.n	8007cea <UART_SetConfig+0x1f2>
 8007ce2:	e00b      	b.n	8007cfc <UART_SetConfig+0x204>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e00e      	b.n	8007d08 <UART_SetConfig+0x210>
 8007cea:	2302      	movs	r3, #2
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e00b      	b.n	8007d08 <UART_SetConfig+0x210>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e008      	b.n	8007d08 <UART_SetConfig+0x210>
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	77fb      	strb	r3, [r7, #31]
 8007cfa:	e005      	b.n	8007d08 <UART_SetConfig+0x210>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	bf00      	nop
 8007d02:	e001      	b.n	8007d08 <UART_SetConfig+0x210>
 8007d04:	2310      	movs	r3, #16
 8007d06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d10:	d15d      	bne.n	8007dce <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8007d12:	7ffb      	ldrb	r3, [r7, #31]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d828      	bhi.n	8007d6a <UART_SetConfig+0x272>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x228>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe fc5c 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8007d48:	61b8      	str	r0, [r7, #24]
        break;
 8007d4a:	e013      	b.n	8007d74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fe fc7a 	bl	8006644 <HAL_RCC_GetPCLK2Freq>
 8007d50:	61b8      	str	r0, [r7, #24]
        break;
 8007d52:	e00f      	b.n	8007d74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <UART_SetConfig+0x348>)
 8007d56:	61bb      	str	r3, [r7, #24]
        break;
 8007d58:	e00c      	b.n	8007d74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fe fbdb 	bl	8006514 <HAL_RCC_GetSysClockFreq>
 8007d5e:	61b8      	str	r0, [r7, #24]
        break;
 8007d60:	e008      	b.n	8007d74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	61bb      	str	r3, [r7, #24]
        break;
 8007d68:	e004      	b.n	8007d74 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	77bb      	strb	r3, [r7, #30]
        break;
 8007d72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8085 	beq.w	8007e86 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	005a      	lsls	r2, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	441a      	add	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b0f      	cmp	r3, #15
 8007d98:	d916      	bls.n	8007dc8 <UART_SetConfig+0x2d0>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da0:	d212      	bcs.n	8007dc8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f023 030f 	bic.w	r3, r3, #15
 8007daa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	89fb      	ldrh	r3, [r7, #14]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	89fa      	ldrh	r2, [r7, #14]
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	e05e      	b.n	8007e86 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	77bb      	strb	r3, [r7, #30]
 8007dcc:	e05b      	b.n	8007e86 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dce:	7ffb      	ldrb	r3, [r7, #31]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d837      	bhi.n	8007e44 <UART_SetConfig+0x34c>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <UART_SetConfig+0x2e4>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007e09 	.word	0x08007e09
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	08007e45 	.word	0x08007e45
 8007dec:	08007e17 	.word	0x08007e17
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007e45 	.word	0x08007e45
 8007df8:	08007e45 	.word	0x08007e45
 8007dfc:	08007e1f 	.word	0x08007e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e00:	f7fe fbfe 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8007e04:	61b8      	str	r0, [r7, #24]
        break;
 8007e06:	e022      	b.n	8007e4e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e08:	f7fe fc1c 	bl	8006644 <HAL_RCC_GetPCLK2Freq>
 8007e0c:	61b8      	str	r0, [r7, #24]
        break;
 8007e0e:	e01e      	b.n	8007e4e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <UART_SetConfig+0x348>)
 8007e12:	61bb      	str	r3, [r7, #24]
        break;
 8007e14:	e01b      	b.n	8007e4e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e16:	f7fe fb7d 	bl	8006514 <HAL_RCC_GetSysClockFreq>
 8007e1a:	61b8      	str	r0, [r7, #24]
        break;
 8007e1c:	e017      	b.n	8007e4e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e22:	61bb      	str	r3, [r7, #24]
        break;
 8007e24:	e013      	b.n	8007e4e <UART_SetConfig+0x356>
 8007e26:	bf00      	nop
 8007e28:	40013800 	.word	0x40013800
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	40004400 	.word	0x40004400
 8007e34:	40004800 	.word	0x40004800
 8007e38:	40004c00 	.word	0x40004c00
 8007e3c:	40005000 	.word	0x40005000
 8007e40:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	77bb      	strb	r3, [r7, #30]
        break;
 8007e4c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d018      	beq.n	8007e86 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	085a      	lsrs	r2, r3, #1
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	441a      	add	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b0f      	cmp	r3, #15
 8007e6e:	d908      	bls.n	8007e82 <UART_SetConfig+0x38a>
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e76:	d204      	bcs.n	8007e82 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	e001      	b.n	8007e86 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e92:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f9a:	d10a      	bne.n	8007fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ff0:	f7fb f972 	bl	80032d8 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d10e      	bne.n	8008022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f82d 	bl	8008072 <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e023      	b.n	800806a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b04      	cmp	r3, #4
 800802e:	d10e      	bne.n	800804e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f817 	bl	8008072 <UART_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e00d      	b.n	800806a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	603b      	str	r3, [r7, #0]
 800807e:	4613      	mov	r3, r2
 8008080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008082:	e05e      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800808a:	d05a      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808c:	f7fb f924 	bl	80032d8 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	429a      	cmp	r2, r3
 800809a:	d302      	bcc.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d11b      	bne.n	80080da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2220      	movs	r2, #32
 80080c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e043      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02c      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f6:	d124      	bne.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008100:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008110:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2220      	movs	r2, #32
 8008126:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e00f      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4013      	ands	r3, r2
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	429a      	cmp	r2, r3
 8008150:	bf0c      	ite	eq
 8008152:	2301      	moveq	r3, #1
 8008154:	2300      	movne	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	429a      	cmp	r2, r3
 800815e:	d091      	beq.n	8008084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	88fa      	ldrh	r2, [r7, #6]
 8008184:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819e:	d10e      	bne.n	80081be <UART_Start_Receive_IT+0x52>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d105      	bne.n	80081b4 <UART_Start_Receive_IT+0x48>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081b2:	e01a      	b.n	80081ea <UART_Start_Receive_IT+0x7e>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	22ff      	movs	r2, #255	; 0xff
 80081b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081bc:	e015      	b.n	80081ea <UART_Start_Receive_IT+0x7e>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10d      	bne.n	80081e2 <UART_Start_Receive_IT+0x76>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <UART_Start_Receive_IT+0x6c>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	22ff      	movs	r2, #255	; 0xff
 80081d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081d6:	e008      	b.n	80081ea <UART_Start_Receive_IT+0x7e>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	227f      	movs	r2, #127	; 0x7f
 80081dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081e0:	e003      	b.n	80081ea <UART_Start_Receive_IT+0x7e>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2222      	movs	r2, #34	; 0x22
 80081f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008210:	d107      	bne.n	8008222 <UART_Start_Receive_IT+0xb6>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4a0c      	ldr	r2, [pc, #48]	; (8008250 <UART_Start_Receive_IT+0xe4>)
 800821e:	665a      	str	r2, [r3, #100]	; 0x64
 8008220:	e002      	b.n	8008228 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4a0b      	ldr	r2, [pc, #44]	; (8008254 <UART_Start_Receive_IT+0xe8>)
 8008226:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800823e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	080083e9 	.word	0x080083e9
 8008254:	08008315 	.word	0x08008315

08008258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800826e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0201 	bic.w	r2, r2, #1
 800827e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008284:	2b01      	cmp	r3, #1
 8008286:	d107      	bne.n	8008298 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0210 	bic.w	r2, r2, #16
 8008296:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff fbf9 	bl	8007acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2220      	movs	r2, #32
 80082fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fbcc 	bl	8007aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008322:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008328:	2b22      	cmp	r3, #34	; 0x22
 800832a:	d151      	bne.n	80083d0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008332:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008334:	89bb      	ldrh	r3, [r7, #12]
 8008336:	b2d9      	uxtb	r1, r3
 8008338:	89fb      	ldrh	r3, [r7, #14]
 800833a:	b2da      	uxtb	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008340:	400a      	ands	r2, r1
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008368:	b29b      	uxth	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d138      	bne.n	80083e0 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800837c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d10f      	bne.n	80083c2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0210 	bic.w	r2, r2, #16
 80083b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff fb90 	bl	8007ae0 <HAL_UARTEx_RxEventCallback>
 80083c0:	e002      	b.n	80083c8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fb78 	bl	8007ab8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083ce:	e007      	b.n	80083e0 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0208 	orr.w	r2, r2, #8
 80083de:	619a      	str	r2, [r3, #24]
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fc:	2b22      	cmp	r3, #34	; 0x22
 80083fe:	d151      	bne.n	80084a4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008406:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800840e:	89ba      	ldrh	r2, [r7, #12]
 8008410:	89fb      	ldrh	r3, [r7, #14]
 8008412:	4013      	ands	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	1c9a      	adds	r2, r3, #2
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800842a:	b29b      	uxth	r3, r3
 800842c:	3b01      	subs	r3, #1
 800842e:	b29a      	uxth	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d138      	bne.n	80084b4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008450:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0201 	bic.w	r2, r2, #1
 8008460:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008472:	2b01      	cmp	r3, #1
 8008474:	d10f      	bne.n	8008496 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0210 	bic.w	r2, r2, #16
 8008484:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff fb26 	bl	8007ae0 <HAL_UARTEx_RxEventCallback>
 8008494:	e002      	b.n	800849c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fb0e 	bl	8007ab8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084a2:	e007      	b.n	80084b4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0208 	orr.w	r2, r2, #8
 80084b2:	619a      	str	r2, [r3, #24]
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80084d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80084dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	43db      	mvns	r3, r3
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4013      	ands	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008506:	b084      	sub	sp, #16
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	f107 0014 	add.w	r0, r7, #20
 8008514:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	b004      	add	sp, #16
 8008546:	4770      	bx	lr

08008548 <__errno>:
 8008548:	4b01      	ldr	r3, [pc, #4]	; (8008550 <__errno+0x8>)
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	2000002c 	.word	0x2000002c

08008554 <__libc_init_array>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4e0d      	ldr	r6, [pc, #52]	; (800858c <__libc_init_array+0x38>)
 8008558:	4c0d      	ldr	r4, [pc, #52]	; (8008590 <__libc_init_array+0x3c>)
 800855a:	1ba4      	subs	r4, r4, r6
 800855c:	10a4      	asrs	r4, r4, #2
 800855e:	2500      	movs	r5, #0
 8008560:	42a5      	cmp	r5, r4
 8008562:	d109      	bne.n	8008578 <__libc_init_array+0x24>
 8008564:	4e0b      	ldr	r6, [pc, #44]	; (8008594 <__libc_init_array+0x40>)
 8008566:	4c0c      	ldr	r4, [pc, #48]	; (8008598 <__libc_init_array+0x44>)
 8008568:	f000 fcba 	bl	8008ee0 <_init>
 800856c:	1ba4      	subs	r4, r4, r6
 800856e:	10a4      	asrs	r4, r4, #2
 8008570:	2500      	movs	r5, #0
 8008572:	42a5      	cmp	r5, r4
 8008574:	d105      	bne.n	8008582 <__libc_init_array+0x2e>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800857c:	4798      	blx	r3
 800857e:	3501      	adds	r5, #1
 8008580:	e7ee      	b.n	8008560 <__libc_init_array+0xc>
 8008582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008586:	4798      	blx	r3
 8008588:	3501      	adds	r5, #1
 800858a:	e7f2      	b.n	8008572 <__libc_init_array+0x1e>
 800858c:	0800901c 	.word	0x0800901c
 8008590:	0800901c 	.word	0x0800901c
 8008594:	0800901c 	.word	0x0800901c
 8008598:	08009020 	.word	0x08009020

0800859c <memset>:
 800859c:	4402      	add	r2, r0
 800859e:	4603      	mov	r3, r0
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d100      	bne.n	80085a6 <memset+0xa>
 80085a4:	4770      	bx	lr
 80085a6:	f803 1b01 	strb.w	r1, [r3], #1
 80085aa:	e7f9      	b.n	80085a0 <memset+0x4>

080085ac <srand>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <srand+0x38>)
 80085b0:	681c      	ldr	r4, [r3, #0]
 80085b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085b4:	4605      	mov	r5, r0
 80085b6:	b97b      	cbnz	r3, 80085d8 <srand+0x2c>
 80085b8:	2018      	movs	r0, #24
 80085ba:	f000 f89b 	bl	80086f4 <malloc>
 80085be:	4a0a      	ldr	r2, [pc, #40]	; (80085e8 <srand+0x3c>)
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <srand+0x40>)
 80085c2:	63a0      	str	r0, [r4, #56]	; 0x38
 80085c4:	e9c0 2300 	strd	r2, r3, [r0]
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <srand+0x44>)
 80085ca:	6083      	str	r3, [r0, #8]
 80085cc:	230b      	movs	r3, #11
 80085ce:	8183      	strh	r3, [r0, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	2300      	movs	r3, #0
 80085d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80085d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085da:	2200      	movs	r2, #0
 80085dc:	611d      	str	r5, [r3, #16]
 80085de:	615a      	str	r2, [r3, #20]
 80085e0:	bd38      	pop	{r3, r4, r5, pc}
 80085e2:	bf00      	nop
 80085e4:	2000002c 	.word	0x2000002c
 80085e8:	abcd330e 	.word	0xabcd330e
 80085ec:	e66d1234 	.word	0xe66d1234
 80085f0:	0005deec 	.word	0x0005deec

080085f4 <rand>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <rand+0x50>)
 80085f8:	681c      	ldr	r4, [r3, #0]
 80085fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085fc:	b97b      	cbnz	r3, 800861e <rand+0x2a>
 80085fe:	2018      	movs	r0, #24
 8008600:	f000 f878 	bl	80086f4 <malloc>
 8008604:	4a10      	ldr	r2, [pc, #64]	; (8008648 <rand+0x54>)
 8008606:	4b11      	ldr	r3, [pc, #68]	; (800864c <rand+0x58>)
 8008608:	63a0      	str	r0, [r4, #56]	; 0x38
 800860a:	e9c0 2300 	strd	r2, r3, [r0]
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <rand+0x5c>)
 8008610:	6083      	str	r3, [r0, #8]
 8008612:	230b      	movs	r3, #11
 8008614:	8183      	strh	r3, [r0, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	2300      	movs	r3, #0
 800861a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800861e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008620:	480c      	ldr	r0, [pc, #48]	; (8008654 <rand+0x60>)
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	694b      	ldr	r3, [r1, #20]
 8008626:	4c0c      	ldr	r4, [pc, #48]	; (8008658 <rand+0x64>)
 8008628:	4350      	muls	r0, r2
 800862a:	fb04 0003 	mla	r0, r4, r3, r0
 800862e:	fba2 2304 	umull	r2, r3, r2, r4
 8008632:	4403      	add	r3, r0
 8008634:	1c54      	adds	r4, r2, #1
 8008636:	f143 0500 	adc.w	r5, r3, #0
 800863a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800863e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	2000002c 	.word	0x2000002c
 8008648:	abcd330e 	.word	0xabcd330e
 800864c:	e66d1234 	.word	0xe66d1234
 8008650:	0005deec 	.word	0x0005deec
 8008654:	5851f42d 	.word	0x5851f42d
 8008658:	4c957f2d 	.word	0x4c957f2d

0800865c <siprintf>:
 800865c:	b40e      	push	{r1, r2, r3}
 800865e:	b500      	push	{lr}
 8008660:	b09c      	sub	sp, #112	; 0x70
 8008662:	ab1d      	add	r3, sp, #116	; 0x74
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	9006      	str	r0, [sp, #24]
 8008668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800866c:	4809      	ldr	r0, [pc, #36]	; (8008694 <siprintf+0x38>)
 800866e:	9107      	str	r1, [sp, #28]
 8008670:	9104      	str	r1, [sp, #16]
 8008672:	4909      	ldr	r1, [pc, #36]	; (8008698 <siprintf+0x3c>)
 8008674:	f853 2b04 	ldr.w	r2, [r3], #4
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	a902      	add	r1, sp, #8
 8008680:	f000 f942 	bl	8008908 <_svfiprintf_r>
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	b01c      	add	sp, #112	; 0x70
 800868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008690:	b003      	add	sp, #12
 8008692:	4770      	bx	lr
 8008694:	2000002c 	.word	0x2000002c
 8008698:	ffff0208 	.word	0xffff0208

0800869c <time>:
 800869c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800869e:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <time+0x30>)
 80086a0:	4604      	mov	r4, r0
 80086a2:	2200      	movs	r2, #0
 80086a4:	4669      	mov	r1, sp
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	f000 f812 	bl	80086d0 <_gettimeofday_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	da05      	bge.n	80086bc <time+0x20>
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b8:	e9cd 2300 	strd	r2, r3, [sp]
 80086bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c0:	b10c      	cbz	r4, 80086c6 <time+0x2a>
 80086c2:	e9c4 0100 	strd	r0, r1, [r4]
 80086c6:	b004      	add	sp, #16
 80086c8:	bd10      	pop	{r4, pc}
 80086ca:	bf00      	nop
 80086cc:	2000002c 	.word	0x2000002c

080086d0 <_gettimeofday_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4c07      	ldr	r4, [pc, #28]	; (80086f0 <_gettimeofday_r+0x20>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4605      	mov	r5, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	f000 fbf7 	bl	8008ed0 <_gettimeofday>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d102      	bne.n	80086ec <_gettimeofday_r+0x1c>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	b103      	cbz	r3, 80086ec <_gettimeofday_r+0x1c>
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
 80086ee:	bf00      	nop
 80086f0:	20000c64 	.word	0x20000c64

080086f4 <malloc>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <malloc+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f000 b851 	b.w	80087a0 <_malloc_r>
 80086fe:	bf00      	nop
 8008700:	2000002c 	.word	0x2000002c

08008704 <_free_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4605      	mov	r5, r0
 8008708:	2900      	cmp	r1, #0
 800870a:	d045      	beq.n	8008798 <_free_r+0x94>
 800870c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008710:	1f0c      	subs	r4, r1, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	bfb8      	it	lt
 8008716:	18e4      	addlt	r4, r4, r3
 8008718:	f000 fbaa 	bl	8008e70 <__malloc_lock>
 800871c:	4a1f      	ldr	r2, [pc, #124]	; (800879c <_free_r+0x98>)
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	4610      	mov	r0, r2
 8008722:	b933      	cbnz	r3, 8008732 <_free_r+0x2e>
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	6014      	str	r4, [r2, #0]
 8008728:	4628      	mov	r0, r5
 800872a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800872e:	f000 bba0 	b.w	8008e72 <__malloc_unlock>
 8008732:	42a3      	cmp	r3, r4
 8008734:	d90c      	bls.n	8008750 <_free_r+0x4c>
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	1862      	adds	r2, r4, r1
 800873a:	4293      	cmp	r3, r2
 800873c:	bf04      	itt	eq
 800873e:	681a      	ldreq	r2, [r3, #0]
 8008740:	685b      	ldreq	r3, [r3, #4]
 8008742:	6063      	str	r3, [r4, #4]
 8008744:	bf04      	itt	eq
 8008746:	1852      	addeq	r2, r2, r1
 8008748:	6022      	streq	r2, [r4, #0]
 800874a:	6004      	str	r4, [r0, #0]
 800874c:	e7ec      	b.n	8008728 <_free_r+0x24>
 800874e:	4613      	mov	r3, r2
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	b10a      	cbz	r2, 8008758 <_free_r+0x54>
 8008754:	42a2      	cmp	r2, r4
 8008756:	d9fa      	bls.n	800874e <_free_r+0x4a>
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	1858      	adds	r0, r3, r1
 800875c:	42a0      	cmp	r0, r4
 800875e:	d10b      	bne.n	8008778 <_free_r+0x74>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	4401      	add	r1, r0
 8008764:	1858      	adds	r0, r3, r1
 8008766:	4282      	cmp	r2, r0
 8008768:	6019      	str	r1, [r3, #0]
 800876a:	d1dd      	bne.n	8008728 <_free_r+0x24>
 800876c:	6810      	ldr	r0, [r2, #0]
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	605a      	str	r2, [r3, #4]
 8008772:	4401      	add	r1, r0
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	e7d7      	b.n	8008728 <_free_r+0x24>
 8008778:	d902      	bls.n	8008780 <_free_r+0x7c>
 800877a:	230c      	movs	r3, #12
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	e7d3      	b.n	8008728 <_free_r+0x24>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	1821      	adds	r1, r4, r0
 8008784:	428a      	cmp	r2, r1
 8008786:	bf04      	itt	eq
 8008788:	6811      	ldreq	r1, [r2, #0]
 800878a:	6852      	ldreq	r2, [r2, #4]
 800878c:	6062      	str	r2, [r4, #4]
 800878e:	bf04      	itt	eq
 8008790:	1809      	addeq	r1, r1, r0
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	605c      	str	r4, [r3, #4]
 8008796:	e7c7      	b.n	8008728 <_free_r+0x24>
 8008798:	bd38      	pop	{r3, r4, r5, pc}
 800879a:	bf00      	nop
 800879c:	200000e4 	.word	0x200000e4

080087a0 <_malloc_r>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	1ccd      	adds	r5, r1, #3
 80087a4:	f025 0503 	bic.w	r5, r5, #3
 80087a8:	3508      	adds	r5, #8
 80087aa:	2d0c      	cmp	r5, #12
 80087ac:	bf38      	it	cc
 80087ae:	250c      	movcc	r5, #12
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	4606      	mov	r6, r0
 80087b4:	db01      	blt.n	80087ba <_malloc_r+0x1a>
 80087b6:	42a9      	cmp	r1, r5
 80087b8:	d903      	bls.n	80087c2 <_malloc_r+0x22>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	2000      	movs	r0, #0
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
 80087c2:	f000 fb55 	bl	8008e70 <__malloc_lock>
 80087c6:	4a21      	ldr	r2, [pc, #132]	; (800884c <_malloc_r+0xac>)
 80087c8:	6814      	ldr	r4, [r2, #0]
 80087ca:	4621      	mov	r1, r4
 80087cc:	b991      	cbnz	r1, 80087f4 <_malloc_r+0x54>
 80087ce:	4c20      	ldr	r4, [pc, #128]	; (8008850 <_malloc_r+0xb0>)
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	b91b      	cbnz	r3, 80087dc <_malloc_r+0x3c>
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 fb17 	bl	8008e08 <_sbrk_r>
 80087da:	6020      	str	r0, [r4, #0]
 80087dc:	4629      	mov	r1, r5
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 fb12 	bl	8008e08 <_sbrk_r>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d124      	bne.n	8008832 <_malloc_r+0x92>
 80087e8:	230c      	movs	r3, #12
 80087ea:	6033      	str	r3, [r6, #0]
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 fb40 	bl	8008e72 <__malloc_unlock>
 80087f2:	e7e4      	b.n	80087be <_malloc_r+0x1e>
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	1b5b      	subs	r3, r3, r5
 80087f8:	d418      	bmi.n	800882c <_malloc_r+0x8c>
 80087fa:	2b0b      	cmp	r3, #11
 80087fc:	d90f      	bls.n	800881e <_malloc_r+0x7e>
 80087fe:	600b      	str	r3, [r1, #0]
 8008800:	50cd      	str	r5, [r1, r3]
 8008802:	18cc      	adds	r4, r1, r3
 8008804:	4630      	mov	r0, r6
 8008806:	f000 fb34 	bl	8008e72 <__malloc_unlock>
 800880a:	f104 000b 	add.w	r0, r4, #11
 800880e:	1d23      	adds	r3, r4, #4
 8008810:	f020 0007 	bic.w	r0, r0, #7
 8008814:	1ac3      	subs	r3, r0, r3
 8008816:	d0d3      	beq.n	80087c0 <_malloc_r+0x20>
 8008818:	425a      	negs	r2, r3
 800881a:	50e2      	str	r2, [r4, r3]
 800881c:	e7d0      	b.n	80087c0 <_malloc_r+0x20>
 800881e:	428c      	cmp	r4, r1
 8008820:	684b      	ldr	r3, [r1, #4]
 8008822:	bf16      	itet	ne
 8008824:	6063      	strne	r3, [r4, #4]
 8008826:	6013      	streq	r3, [r2, #0]
 8008828:	460c      	movne	r4, r1
 800882a:	e7eb      	b.n	8008804 <_malloc_r+0x64>
 800882c:	460c      	mov	r4, r1
 800882e:	6849      	ldr	r1, [r1, #4]
 8008830:	e7cc      	b.n	80087cc <_malloc_r+0x2c>
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d005      	beq.n	8008848 <_malloc_r+0xa8>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4630      	mov	r0, r6
 8008840:	f000 fae2 	bl	8008e08 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d0cf      	beq.n	80087e8 <_malloc_r+0x48>
 8008848:	6025      	str	r5, [r4, #0]
 800884a:	e7db      	b.n	8008804 <_malloc_r+0x64>
 800884c:	200000e4 	.word	0x200000e4
 8008850:	200000e8 	.word	0x200000e8

08008854 <__ssputs_r>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	688e      	ldr	r6, [r1, #8]
 800885a:	429e      	cmp	r6, r3
 800885c:	4682      	mov	sl, r0
 800885e:	460c      	mov	r4, r1
 8008860:	4690      	mov	r8, r2
 8008862:	4699      	mov	r9, r3
 8008864:	d837      	bhi.n	80088d6 <__ssputs_r+0x82>
 8008866:	898a      	ldrh	r2, [r1, #12]
 8008868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800886c:	d031      	beq.n	80088d2 <__ssputs_r+0x7e>
 800886e:	6825      	ldr	r5, [r4, #0]
 8008870:	6909      	ldr	r1, [r1, #16]
 8008872:	1a6f      	subs	r7, r5, r1
 8008874:	6965      	ldr	r5, [r4, #20]
 8008876:	2302      	movs	r3, #2
 8008878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800887c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008880:	f109 0301 	add.w	r3, r9, #1
 8008884:	443b      	add	r3, r7
 8008886:	429d      	cmp	r5, r3
 8008888:	bf38      	it	cc
 800888a:	461d      	movcc	r5, r3
 800888c:	0553      	lsls	r3, r2, #21
 800888e:	d530      	bpl.n	80088f2 <__ssputs_r+0x9e>
 8008890:	4629      	mov	r1, r5
 8008892:	f7ff ff85 	bl	80087a0 <_malloc_r>
 8008896:	4606      	mov	r6, r0
 8008898:	b950      	cbnz	r0, 80088b0 <__ssputs_r+0x5c>
 800889a:	230c      	movs	r3, #12
 800889c:	f8ca 3000 	str.w	r3, [sl]
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b0:	463a      	mov	r2, r7
 80088b2:	6921      	ldr	r1, [r4, #16]
 80088b4:	f000 fab8 	bl	8008e28 <memcpy>
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c2:	81a3      	strh	r3, [r4, #12]
 80088c4:	6126      	str	r6, [r4, #16]
 80088c6:	6165      	str	r5, [r4, #20]
 80088c8:	443e      	add	r6, r7
 80088ca:	1bed      	subs	r5, r5, r7
 80088cc:	6026      	str	r6, [r4, #0]
 80088ce:	60a5      	str	r5, [r4, #8]
 80088d0:	464e      	mov	r6, r9
 80088d2:	454e      	cmp	r6, r9
 80088d4:	d900      	bls.n	80088d8 <__ssputs_r+0x84>
 80088d6:	464e      	mov	r6, r9
 80088d8:	4632      	mov	r2, r6
 80088da:	4641      	mov	r1, r8
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	f000 faae 	bl	8008e3e <memmove>
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	1b9b      	subs	r3, r3, r6
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	441e      	add	r6, r3
 80088ec:	6026      	str	r6, [r4, #0]
 80088ee:	2000      	movs	r0, #0
 80088f0:	e7dc      	b.n	80088ac <__ssputs_r+0x58>
 80088f2:	462a      	mov	r2, r5
 80088f4:	f000 fabe 	bl	8008e74 <_realloc_r>
 80088f8:	4606      	mov	r6, r0
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1e2      	bne.n	80088c4 <__ssputs_r+0x70>
 80088fe:	6921      	ldr	r1, [r4, #16]
 8008900:	4650      	mov	r0, sl
 8008902:	f7ff feff 	bl	8008704 <_free_r>
 8008906:	e7c8      	b.n	800889a <__ssputs_r+0x46>

08008908 <_svfiprintf_r>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	461d      	mov	r5, r3
 800890e:	898b      	ldrh	r3, [r1, #12]
 8008910:	061f      	lsls	r7, r3, #24
 8008912:	b09d      	sub	sp, #116	; 0x74
 8008914:	4680      	mov	r8, r0
 8008916:	460c      	mov	r4, r1
 8008918:	4616      	mov	r6, r2
 800891a:	d50f      	bpl.n	800893c <_svfiprintf_r+0x34>
 800891c:	690b      	ldr	r3, [r1, #16]
 800891e:	b96b      	cbnz	r3, 800893c <_svfiprintf_r+0x34>
 8008920:	2140      	movs	r1, #64	; 0x40
 8008922:	f7ff ff3d 	bl	80087a0 <_malloc_r>
 8008926:	6020      	str	r0, [r4, #0]
 8008928:	6120      	str	r0, [r4, #16]
 800892a:	b928      	cbnz	r0, 8008938 <_svfiprintf_r+0x30>
 800892c:	230c      	movs	r3, #12
 800892e:	f8c8 3000 	str.w	r3, [r8]
 8008932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008936:	e0c8      	b.n	8008aca <_svfiprintf_r+0x1c2>
 8008938:	2340      	movs	r3, #64	; 0x40
 800893a:	6163      	str	r3, [r4, #20]
 800893c:	2300      	movs	r3, #0
 800893e:	9309      	str	r3, [sp, #36]	; 0x24
 8008940:	2320      	movs	r3, #32
 8008942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008946:	2330      	movs	r3, #48	; 0x30
 8008948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800894c:	9503      	str	r5, [sp, #12]
 800894e:	f04f 0b01 	mov.w	fp, #1
 8008952:	4637      	mov	r7, r6
 8008954:	463d      	mov	r5, r7
 8008956:	f815 3b01 	ldrb.w	r3, [r5], #1
 800895a:	b10b      	cbz	r3, 8008960 <_svfiprintf_r+0x58>
 800895c:	2b25      	cmp	r3, #37	; 0x25
 800895e:	d13e      	bne.n	80089de <_svfiprintf_r+0xd6>
 8008960:	ebb7 0a06 	subs.w	sl, r7, r6
 8008964:	d00b      	beq.n	800897e <_svfiprintf_r+0x76>
 8008966:	4653      	mov	r3, sl
 8008968:	4632      	mov	r2, r6
 800896a:	4621      	mov	r1, r4
 800896c:	4640      	mov	r0, r8
 800896e:	f7ff ff71 	bl	8008854 <__ssputs_r>
 8008972:	3001      	adds	r0, #1
 8008974:	f000 80a4 	beq.w	8008ac0 <_svfiprintf_r+0x1b8>
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	4453      	add	r3, sl
 800897c:	9309      	str	r3, [sp, #36]	; 0x24
 800897e:	783b      	ldrb	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 809d 	beq.w	8008ac0 <_svfiprintf_r+0x1b8>
 8008986:	2300      	movs	r3, #0
 8008988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800898c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008998:	931a      	str	r3, [sp, #104]	; 0x68
 800899a:	462f      	mov	r7, r5
 800899c:	2205      	movs	r2, #5
 800899e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80089a2:	4850      	ldr	r0, [pc, #320]	; (8008ae4 <_svfiprintf_r+0x1dc>)
 80089a4:	f7f7 fc1c 	bl	80001e0 <memchr>
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	b9d0      	cbnz	r0, 80089e2 <_svfiprintf_r+0xda>
 80089ac:	06d9      	lsls	r1, r3, #27
 80089ae:	bf44      	itt	mi
 80089b0:	2220      	movmi	r2, #32
 80089b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089b6:	071a      	lsls	r2, r3, #28
 80089b8:	bf44      	itt	mi
 80089ba:	222b      	movmi	r2, #43	; 0x2b
 80089bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089c0:	782a      	ldrb	r2, [r5, #0]
 80089c2:	2a2a      	cmp	r2, #42	; 0x2a
 80089c4:	d015      	beq.n	80089f2 <_svfiprintf_r+0xea>
 80089c6:	9a07      	ldr	r2, [sp, #28]
 80089c8:	462f      	mov	r7, r5
 80089ca:	2000      	movs	r0, #0
 80089cc:	250a      	movs	r5, #10
 80089ce:	4639      	mov	r1, r7
 80089d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d4:	3b30      	subs	r3, #48	; 0x30
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d94d      	bls.n	8008a76 <_svfiprintf_r+0x16e>
 80089da:	b1b8      	cbz	r0, 8008a0c <_svfiprintf_r+0x104>
 80089dc:	e00f      	b.n	80089fe <_svfiprintf_r+0xf6>
 80089de:	462f      	mov	r7, r5
 80089e0:	e7b8      	b.n	8008954 <_svfiprintf_r+0x4c>
 80089e2:	4a40      	ldr	r2, [pc, #256]	; (8008ae4 <_svfiprintf_r+0x1dc>)
 80089e4:	1a80      	subs	r0, r0, r2
 80089e6:	fa0b f000 	lsl.w	r0, fp, r0
 80089ea:	4318      	orrs	r0, r3
 80089ec:	9004      	str	r0, [sp, #16]
 80089ee:	463d      	mov	r5, r7
 80089f0:	e7d3      	b.n	800899a <_svfiprintf_r+0x92>
 80089f2:	9a03      	ldr	r2, [sp, #12]
 80089f4:	1d11      	adds	r1, r2, #4
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	9103      	str	r1, [sp, #12]
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	db01      	blt.n	8008a02 <_svfiprintf_r+0xfa>
 80089fe:	9207      	str	r2, [sp, #28]
 8008a00:	e004      	b.n	8008a0c <_svfiprintf_r+0x104>
 8008a02:	4252      	negs	r2, r2
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	9207      	str	r2, [sp, #28]
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	783b      	ldrb	r3, [r7, #0]
 8008a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a10:	d10c      	bne.n	8008a2c <_svfiprintf_r+0x124>
 8008a12:	787b      	ldrb	r3, [r7, #1]
 8008a14:	2b2a      	cmp	r3, #42	; 0x2a
 8008a16:	d133      	bne.n	8008a80 <_svfiprintf_r+0x178>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	1d1a      	adds	r2, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	9203      	str	r2, [sp, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfb8      	it	lt
 8008a24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a28:	3702      	adds	r7, #2
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	4d2e      	ldr	r5, [pc, #184]	; (8008ae8 <_svfiprintf_r+0x1e0>)
 8008a2e:	7839      	ldrb	r1, [r7, #0]
 8008a30:	2203      	movs	r2, #3
 8008a32:	4628      	mov	r0, r5
 8008a34:	f7f7 fbd4 	bl	80001e0 <memchr>
 8008a38:	b138      	cbz	r0, 8008a4a <_svfiprintf_r+0x142>
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	1b40      	subs	r0, r0, r5
 8008a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a42:	9b04      	ldr	r3, [sp, #16]
 8008a44:	4303      	orrs	r3, r0
 8008a46:	3701      	adds	r7, #1
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	7839      	ldrb	r1, [r7, #0]
 8008a4c:	4827      	ldr	r0, [pc, #156]	; (8008aec <_svfiprintf_r+0x1e4>)
 8008a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a52:	2206      	movs	r2, #6
 8008a54:	1c7e      	adds	r6, r7, #1
 8008a56:	f7f7 fbc3 	bl	80001e0 <memchr>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d038      	beq.n	8008ad0 <_svfiprintf_r+0x1c8>
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <_svfiprintf_r+0x1e8>)
 8008a60:	bb13      	cbnz	r3, 8008aa8 <_svfiprintf_r+0x1a0>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	3307      	adds	r3, #7
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	444b      	add	r3, r9
 8008a72:	9309      	str	r3, [sp, #36]	; 0x24
 8008a74:	e76d      	b.n	8008952 <_svfiprintf_r+0x4a>
 8008a76:	fb05 3202 	mla	r2, r5, r2, r3
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	e7a6      	b.n	80089ce <_svfiprintf_r+0xc6>
 8008a80:	2300      	movs	r3, #0
 8008a82:	3701      	adds	r7, #1
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	4619      	mov	r1, r3
 8008a88:	250a      	movs	r5, #10
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a90:	3a30      	subs	r2, #48	; 0x30
 8008a92:	2a09      	cmp	r2, #9
 8008a94:	d903      	bls.n	8008a9e <_svfiprintf_r+0x196>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0c8      	beq.n	8008a2c <_svfiprintf_r+0x124>
 8008a9a:	9105      	str	r1, [sp, #20]
 8008a9c:	e7c6      	b.n	8008a2c <_svfiprintf_r+0x124>
 8008a9e:	fb05 2101 	mla	r1, r5, r1, r2
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	e7f0      	b.n	8008a8a <_svfiprintf_r+0x182>
 8008aa8:	ab03      	add	r3, sp, #12
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	4622      	mov	r2, r4
 8008aae:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <_svfiprintf_r+0x1ec>)
 8008ab0:	a904      	add	r1, sp, #16
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008abc:	4681      	mov	r9, r0
 8008abe:	d1d6      	bne.n	8008a6e <_svfiprintf_r+0x166>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	065b      	lsls	r3, r3, #25
 8008ac4:	f53f af35 	bmi.w	8008932 <_svfiprintf_r+0x2a>
 8008ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aca:	b01d      	add	sp, #116	; 0x74
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <_svfiprintf_r+0x1ec>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4640      	mov	r0, r8
 8008adc:	f000 f882 	bl	8008be4 <_printf_i>
 8008ae0:	e7ea      	b.n	8008ab8 <_svfiprintf_r+0x1b0>
 8008ae2:	bf00      	nop
 8008ae4:	08008fe8 	.word	0x08008fe8
 8008ae8:	08008fee 	.word	0x08008fee
 8008aec:	08008ff2 	.word	0x08008ff2
 8008af0:	00000000 	.word	0x00000000
 8008af4:	08008855 	.word	0x08008855

08008af8 <_printf_common>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	4691      	mov	r9, r2
 8008afe:	461f      	mov	r7, r3
 8008b00:	688a      	ldr	r2, [r1, #8]
 8008b02:	690b      	ldr	r3, [r1, #16]
 8008b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bfb8      	it	lt
 8008b0c:	4613      	movlt	r3, r2
 8008b0e:	f8c9 3000 	str.w	r3, [r9]
 8008b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b16:	4606      	mov	r6, r0
 8008b18:	460c      	mov	r4, r1
 8008b1a:	b112      	cbz	r2, 8008b22 <_printf_common+0x2a>
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f8c9 3000 	str.w	r3, [r9]
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	0699      	lsls	r1, r3, #26
 8008b26:	bf42      	ittt	mi
 8008b28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b2c:	3302      	addmi	r3, #2
 8008b2e:	f8c9 3000 	strmi.w	r3, [r9]
 8008b32:	6825      	ldr	r5, [r4, #0]
 8008b34:	f015 0506 	ands.w	r5, r5, #6
 8008b38:	d107      	bne.n	8008b4a <_printf_common+0x52>
 8008b3a:	f104 0a19 	add.w	sl, r4, #25
 8008b3e:	68e3      	ldr	r3, [r4, #12]
 8008b40:	f8d9 2000 	ldr.w	r2, [r9]
 8008b44:	1a9b      	subs	r3, r3, r2
 8008b46:	42ab      	cmp	r3, r5
 8008b48:	dc28      	bgt.n	8008b9c <_printf_common+0xa4>
 8008b4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	3300      	adds	r3, #0
 8008b52:	bf18      	it	ne
 8008b54:	2301      	movne	r3, #1
 8008b56:	0692      	lsls	r2, r2, #26
 8008b58:	d42d      	bmi.n	8008bb6 <_printf_common+0xbe>
 8008b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b5e:	4639      	mov	r1, r7
 8008b60:	4630      	mov	r0, r6
 8008b62:	47c0      	blx	r8
 8008b64:	3001      	adds	r0, #1
 8008b66:	d020      	beq.n	8008baa <_printf_common+0xb2>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	68e5      	ldr	r5, [r4, #12]
 8008b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b70:	f003 0306 	and.w	r3, r3, #6
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	bf08      	it	eq
 8008b78:	1aad      	subeq	r5, r5, r2
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	6922      	ldr	r2, [r4, #16]
 8008b7e:	bf0c      	ite	eq
 8008b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b84:	2500      	movne	r5, #0
 8008b86:	4293      	cmp	r3, r2
 8008b88:	bfc4      	itt	gt
 8008b8a:	1a9b      	subgt	r3, r3, r2
 8008b8c:	18ed      	addgt	r5, r5, r3
 8008b8e:	f04f 0900 	mov.w	r9, #0
 8008b92:	341a      	adds	r4, #26
 8008b94:	454d      	cmp	r5, r9
 8008b96:	d11a      	bne.n	8008bce <_printf_common+0xd6>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e008      	b.n	8008bae <_printf_common+0xb6>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4652      	mov	r2, sl
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	47c0      	blx	r8
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d103      	bne.n	8008bb2 <_printf_common+0xba>
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb2:	3501      	adds	r5, #1
 8008bb4:	e7c3      	b.n	8008b3e <_printf_common+0x46>
 8008bb6:	18e1      	adds	r1, r4, r3
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	2030      	movs	r0, #48	; 0x30
 8008bbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bc0:	4422      	add	r2, r4
 8008bc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bca:	3302      	adds	r3, #2
 8008bcc:	e7c5      	b.n	8008b5a <_printf_common+0x62>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4622      	mov	r2, r4
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	47c0      	blx	r8
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d0e6      	beq.n	8008baa <_printf_common+0xb2>
 8008bdc:	f109 0901 	add.w	r9, r9, #1
 8008be0:	e7d8      	b.n	8008b94 <_printf_common+0x9c>
	...

08008be4 <_printf_i>:
 8008be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008be8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008bec:	460c      	mov	r4, r1
 8008bee:	7e09      	ldrb	r1, [r1, #24]
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	296e      	cmp	r1, #110	; 0x6e
 8008bf4:	4617      	mov	r7, r2
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	4698      	mov	r8, r3
 8008bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfc:	f000 80b3 	beq.w	8008d66 <_printf_i+0x182>
 8008c00:	d822      	bhi.n	8008c48 <_printf_i+0x64>
 8008c02:	2963      	cmp	r1, #99	; 0x63
 8008c04:	d036      	beq.n	8008c74 <_printf_i+0x90>
 8008c06:	d80a      	bhi.n	8008c1e <_printf_i+0x3a>
 8008c08:	2900      	cmp	r1, #0
 8008c0a:	f000 80b9 	beq.w	8008d80 <_printf_i+0x19c>
 8008c0e:	2958      	cmp	r1, #88	; 0x58
 8008c10:	f000 8083 	beq.w	8008d1a <_printf_i+0x136>
 8008c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c1c:	e032      	b.n	8008c84 <_printf_i+0xa0>
 8008c1e:	2964      	cmp	r1, #100	; 0x64
 8008c20:	d001      	beq.n	8008c26 <_printf_i+0x42>
 8008c22:	2969      	cmp	r1, #105	; 0x69
 8008c24:	d1f6      	bne.n	8008c14 <_printf_i+0x30>
 8008c26:	6820      	ldr	r0, [r4, #0]
 8008c28:	6813      	ldr	r3, [r2, #0]
 8008c2a:	0605      	lsls	r5, r0, #24
 8008c2c:	f103 0104 	add.w	r1, r3, #4
 8008c30:	d52a      	bpl.n	8008c88 <_printf_i+0xa4>
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6011      	str	r1, [r2, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da03      	bge.n	8008c42 <_printf_i+0x5e>
 8008c3a:	222d      	movs	r2, #45	; 0x2d
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c42:	486f      	ldr	r0, [pc, #444]	; (8008e00 <_printf_i+0x21c>)
 8008c44:	220a      	movs	r2, #10
 8008c46:	e039      	b.n	8008cbc <_printf_i+0xd8>
 8008c48:	2973      	cmp	r1, #115	; 0x73
 8008c4a:	f000 809d 	beq.w	8008d88 <_printf_i+0x1a4>
 8008c4e:	d808      	bhi.n	8008c62 <_printf_i+0x7e>
 8008c50:	296f      	cmp	r1, #111	; 0x6f
 8008c52:	d020      	beq.n	8008c96 <_printf_i+0xb2>
 8008c54:	2970      	cmp	r1, #112	; 0x70
 8008c56:	d1dd      	bne.n	8008c14 <_printf_i+0x30>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	f043 0320 	orr.w	r3, r3, #32
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	e003      	b.n	8008c6a <_printf_i+0x86>
 8008c62:	2975      	cmp	r1, #117	; 0x75
 8008c64:	d017      	beq.n	8008c96 <_printf_i+0xb2>
 8008c66:	2978      	cmp	r1, #120	; 0x78
 8008c68:	d1d4      	bne.n	8008c14 <_printf_i+0x30>
 8008c6a:	2378      	movs	r3, #120	; 0x78
 8008c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c70:	4864      	ldr	r0, [pc, #400]	; (8008e04 <_printf_i+0x220>)
 8008c72:	e055      	b.n	8008d20 <_printf_i+0x13c>
 8008c74:	6813      	ldr	r3, [r2, #0]
 8008c76:	1d19      	adds	r1, r3, #4
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6011      	str	r1, [r2, #0]
 8008c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c84:	2301      	movs	r3, #1
 8008c86:	e08c      	b.n	8008da2 <_printf_i+0x1be>
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6011      	str	r1, [r2, #0]
 8008c8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c90:	bf18      	it	ne
 8008c92:	b21b      	sxthne	r3, r3
 8008c94:	e7cf      	b.n	8008c36 <_printf_i+0x52>
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	1d18      	adds	r0, r3, #4
 8008c9c:	6010      	str	r0, [r2, #0]
 8008c9e:	0628      	lsls	r0, r5, #24
 8008ca0:	d501      	bpl.n	8008ca6 <_printf_i+0xc2>
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	e002      	b.n	8008cac <_printf_i+0xc8>
 8008ca6:	0668      	lsls	r0, r5, #25
 8008ca8:	d5fb      	bpl.n	8008ca2 <_printf_i+0xbe>
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	4854      	ldr	r0, [pc, #336]	; (8008e00 <_printf_i+0x21c>)
 8008cae:	296f      	cmp	r1, #111	; 0x6f
 8008cb0:	bf14      	ite	ne
 8008cb2:	220a      	movne	r2, #10
 8008cb4:	2208      	moveq	r2, #8
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cbc:	6865      	ldr	r5, [r4, #4]
 8008cbe:	60a5      	str	r5, [r4, #8]
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	f2c0 8095 	blt.w	8008df0 <_printf_i+0x20c>
 8008cc6:	6821      	ldr	r1, [r4, #0]
 8008cc8:	f021 0104 	bic.w	r1, r1, #4
 8008ccc:	6021      	str	r1, [r4, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d13d      	bne.n	8008d4e <_printf_i+0x16a>
 8008cd2:	2d00      	cmp	r5, #0
 8008cd4:	f040 808e 	bne.w	8008df4 <_printf_i+0x210>
 8008cd8:	4665      	mov	r5, ip
 8008cda:	2a08      	cmp	r2, #8
 8008cdc:	d10b      	bne.n	8008cf6 <_printf_i+0x112>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	07db      	lsls	r3, r3, #31
 8008ce2:	d508      	bpl.n	8008cf6 <_printf_i+0x112>
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	6862      	ldr	r2, [r4, #4]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	bfde      	ittt	le
 8008cec:	2330      	movle	r3, #48	; 0x30
 8008cee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cf2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008cf6:	ebac 0305 	sub.w	r3, ip, r5
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	f8cd 8000 	str.w	r8, [sp]
 8008d00:	463b      	mov	r3, r7
 8008d02:	aa03      	add	r2, sp, #12
 8008d04:	4621      	mov	r1, r4
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff fef6 	bl	8008af8 <_printf_common>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d14d      	bne.n	8008dac <_printf_i+0x1c8>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d14:	b005      	add	sp, #20
 8008d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d1a:	4839      	ldr	r0, [pc, #228]	; (8008e00 <_printf_i+0x21c>)
 8008d1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d20:	6813      	ldr	r3, [r2, #0]
 8008d22:	6821      	ldr	r1, [r4, #0]
 8008d24:	1d1d      	adds	r5, r3, #4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6015      	str	r5, [r2, #0]
 8008d2a:	060a      	lsls	r2, r1, #24
 8008d2c:	d50b      	bpl.n	8008d46 <_printf_i+0x162>
 8008d2e:	07ca      	lsls	r2, r1, #31
 8008d30:	bf44      	itt	mi
 8008d32:	f041 0120 	orrmi.w	r1, r1, #32
 8008d36:	6021      	strmi	r1, [r4, #0]
 8008d38:	b91b      	cbnz	r3, 8008d42 <_printf_i+0x15e>
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	f022 0220 	bic.w	r2, r2, #32
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	2210      	movs	r2, #16
 8008d44:	e7b7      	b.n	8008cb6 <_printf_i+0xd2>
 8008d46:	064d      	lsls	r5, r1, #25
 8008d48:	bf48      	it	mi
 8008d4a:	b29b      	uxthmi	r3, r3
 8008d4c:	e7ef      	b.n	8008d2e <_printf_i+0x14a>
 8008d4e:	4665      	mov	r5, ip
 8008d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d54:	fb02 3311 	mls	r3, r2, r1, r3
 8008d58:	5cc3      	ldrb	r3, [r0, r3]
 8008d5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d5e:	460b      	mov	r3, r1
 8008d60:	2900      	cmp	r1, #0
 8008d62:	d1f5      	bne.n	8008d50 <_printf_i+0x16c>
 8008d64:	e7b9      	b.n	8008cda <_printf_i+0xf6>
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	6825      	ldr	r5, [r4, #0]
 8008d6a:	6961      	ldr	r1, [r4, #20]
 8008d6c:	1d18      	adds	r0, r3, #4
 8008d6e:	6010      	str	r0, [r2, #0]
 8008d70:	0628      	lsls	r0, r5, #24
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	d501      	bpl.n	8008d7a <_printf_i+0x196>
 8008d76:	6019      	str	r1, [r3, #0]
 8008d78:	e002      	b.n	8008d80 <_printf_i+0x19c>
 8008d7a:	066a      	lsls	r2, r5, #25
 8008d7c:	d5fb      	bpl.n	8008d76 <_printf_i+0x192>
 8008d7e:	8019      	strh	r1, [r3, #0]
 8008d80:	2300      	movs	r3, #0
 8008d82:	6123      	str	r3, [r4, #16]
 8008d84:	4665      	mov	r5, ip
 8008d86:	e7b9      	b.n	8008cfc <_printf_i+0x118>
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	6011      	str	r1, [r2, #0]
 8008d8e:	681d      	ldr	r5, [r3, #0]
 8008d90:	6862      	ldr	r2, [r4, #4]
 8008d92:	2100      	movs	r1, #0
 8008d94:	4628      	mov	r0, r5
 8008d96:	f7f7 fa23 	bl	80001e0 <memchr>
 8008d9a:	b108      	cbz	r0, 8008da0 <_printf_i+0x1bc>
 8008d9c:	1b40      	subs	r0, r0, r5
 8008d9e:	6060      	str	r0, [r4, #4]
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	6123      	str	r3, [r4, #16]
 8008da4:	2300      	movs	r3, #0
 8008da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008daa:	e7a7      	b.n	8008cfc <_printf_i+0x118>
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	462a      	mov	r2, r5
 8008db0:	4639      	mov	r1, r7
 8008db2:	4630      	mov	r0, r6
 8008db4:	47c0      	blx	r8
 8008db6:	3001      	adds	r0, #1
 8008db8:	d0aa      	beq.n	8008d10 <_printf_i+0x12c>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	079b      	lsls	r3, r3, #30
 8008dbe:	d413      	bmi.n	8008de8 <_printf_i+0x204>
 8008dc0:	68e0      	ldr	r0, [r4, #12]
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	4298      	cmp	r0, r3
 8008dc6:	bfb8      	it	lt
 8008dc8:	4618      	movlt	r0, r3
 8008dca:	e7a3      	b.n	8008d14 <_printf_i+0x130>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	464a      	mov	r2, r9
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	47c0      	blx	r8
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d09a      	beq.n	8008d10 <_printf_i+0x12c>
 8008dda:	3501      	adds	r5, #1
 8008ddc:	68e3      	ldr	r3, [r4, #12]
 8008dde:	9a03      	ldr	r2, [sp, #12]
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	42ab      	cmp	r3, r5
 8008de4:	dcf2      	bgt.n	8008dcc <_printf_i+0x1e8>
 8008de6:	e7eb      	b.n	8008dc0 <_printf_i+0x1dc>
 8008de8:	2500      	movs	r5, #0
 8008dea:	f104 0919 	add.w	r9, r4, #25
 8008dee:	e7f5      	b.n	8008ddc <_printf_i+0x1f8>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1ac      	bne.n	8008d4e <_printf_i+0x16a>
 8008df4:	7803      	ldrb	r3, [r0, #0]
 8008df6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dfe:	e76c      	b.n	8008cda <_printf_i+0xf6>
 8008e00:	08008ff9 	.word	0x08008ff9
 8008e04:	0800900a 	.word	0x0800900a

08008e08 <_sbrk_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4c06      	ldr	r4, [pc, #24]	; (8008e24 <_sbrk_r+0x1c>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4605      	mov	r5, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	f7fa f994 	bl	8003140 <_sbrk>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_sbrk_r+0x1a>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_sbrk_r+0x1a>
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20000c64 	.word	0x20000c64

08008e28 <memcpy>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	1e43      	subs	r3, r0, #1
 8008e2c:	440a      	add	r2, r1
 8008e2e:	4291      	cmp	r1, r2
 8008e30:	d100      	bne.n	8008e34 <memcpy+0xc>
 8008e32:	bd10      	pop	{r4, pc}
 8008e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e3c:	e7f7      	b.n	8008e2e <memcpy+0x6>

08008e3e <memmove>:
 8008e3e:	4288      	cmp	r0, r1
 8008e40:	b510      	push	{r4, lr}
 8008e42:	eb01 0302 	add.w	r3, r1, r2
 8008e46:	d807      	bhi.n	8008e58 <memmove+0x1a>
 8008e48:	1e42      	subs	r2, r0, #1
 8008e4a:	4299      	cmp	r1, r3
 8008e4c:	d00a      	beq.n	8008e64 <memmove+0x26>
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e56:	e7f8      	b.n	8008e4a <memmove+0xc>
 8008e58:	4283      	cmp	r3, r0
 8008e5a:	d9f5      	bls.n	8008e48 <memmove+0xa>
 8008e5c:	1881      	adds	r1, r0, r2
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	42d3      	cmn	r3, r2
 8008e62:	d100      	bne.n	8008e66 <memmove+0x28>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008e6e:	e7f7      	b.n	8008e60 <memmove+0x22>

08008e70 <__malloc_lock>:
 8008e70:	4770      	bx	lr

08008e72 <__malloc_unlock>:
 8008e72:	4770      	bx	lr

08008e74 <_realloc_r>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	4607      	mov	r7, r0
 8008e78:	4614      	mov	r4, r2
 8008e7a:	460e      	mov	r6, r1
 8008e7c:	b921      	cbnz	r1, 8008e88 <_realloc_r+0x14>
 8008e7e:	4611      	mov	r1, r2
 8008e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e84:	f7ff bc8c 	b.w	80087a0 <_malloc_r>
 8008e88:	b922      	cbnz	r2, 8008e94 <_realloc_r+0x20>
 8008e8a:	f7ff fc3b 	bl	8008704 <_free_r>
 8008e8e:	4625      	mov	r5, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e94:	f000 f814 	bl	8008ec0 <_malloc_usable_size_r>
 8008e98:	42a0      	cmp	r0, r4
 8008e9a:	d20f      	bcs.n	8008ebc <_realloc_r+0x48>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7ff fc7e 	bl	80087a0 <_malloc_r>
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d0f2      	beq.n	8008e90 <_realloc_r+0x1c>
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4622      	mov	r2, r4
 8008eae:	f7ff ffbb 	bl	8008e28 <memcpy>
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	f7ff fc25 	bl	8008704 <_free_r>
 8008eba:	e7e9      	b.n	8008e90 <_realloc_r+0x1c>
 8008ebc:	4635      	mov	r5, r6
 8008ebe:	e7e7      	b.n	8008e90 <_realloc_r+0x1c>

08008ec0 <_malloc_usable_size_r>:
 8008ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec4:	1f18      	subs	r0, r3, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfbc      	itt	lt
 8008eca:	580b      	ldrlt	r3, [r1, r0]
 8008ecc:	18c0      	addlt	r0, r0, r3
 8008ece:	4770      	bx	lr

08008ed0 <_gettimeofday>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <_gettimeofday+0xc>)
 8008ed2:	2258      	movs	r2, #88	; 0x58
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eda:	4770      	bx	lr
 8008edc:	20000c64 	.word	0x20000c64

08008ee0 <_init>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr

08008eec <_fini>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	bf00      	nop
 8008ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef2:	bc08      	pop	{r3}
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	4770      	bx	lr
